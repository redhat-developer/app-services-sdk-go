// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package registrymgmtclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that RegistriesApiMock does implement RegistriesApi.
// If this is not the case, regenerate this file with moq.
var _ RegistriesApi = &RegistriesApiMock{}

// RegistriesApiMock is a mock implementation of RegistriesApi.
//
// 	func TestSomethingThatUsesRegistriesApi(t *testing.T) {
//
// 		// make and configure a mocked RegistriesApi
// 		mockedRegistriesApi := &RegistriesApiMock{
// 			CreateRegistryFunc: func(ctx _context.Context) ApiCreateRegistryRequest {
// 				panic("mock out the CreateRegistry method")
// 			},
// 			CreateRegistryExecuteFunc: func(r ApiCreateRegistryRequest) (Registry, *_nethttp.Response, error) {
// 				panic("mock out the CreateRegistryExecute method")
// 			},
// 			DeleteRegistryFunc: func(ctx _context.Context, id string) ApiDeleteRegistryRequest {
// 				panic("mock out the DeleteRegistry method")
// 			},
// 			DeleteRegistryExecuteFunc: func(r ApiDeleteRegistryRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteRegistryExecute method")
// 			},
// 			GetRegistriesFunc: func(ctx _context.Context) ApiGetRegistriesRequest {
// 				panic("mock out the GetRegistries method")
// 			},
// 			GetRegistriesExecuteFunc: func(r ApiGetRegistriesRequest) (RegistryRestList, *_nethttp.Response, error) {
// 				panic("mock out the GetRegistriesExecute method")
// 			},
// 			GetRegistryFunc: func(ctx _context.Context, id string) ApiGetRegistryRequest {
// 				panic("mock out the GetRegistry method")
// 			},
// 			GetRegistryExecuteFunc: func(r ApiGetRegistryRequest) (Registry, *_nethttp.Response, error) {
// 				panic("mock out the GetRegistryExecute method")
// 			},
// 		}
//
// 		// use mockedRegistriesApi in code that requires RegistriesApi
// 		// and then make assertions.
//
// 	}
type RegistriesApiMock struct {
	// CreateRegistryFunc mocks the CreateRegistry method.
	CreateRegistryFunc func(ctx _context.Context) ApiCreateRegistryRequest

	// CreateRegistryExecuteFunc mocks the CreateRegistryExecute method.
	CreateRegistryExecuteFunc func(r ApiCreateRegistryRequest) (Registry, *_nethttp.Response, error)

	// DeleteRegistryFunc mocks the DeleteRegistry method.
	DeleteRegistryFunc func(ctx _context.Context, id string) ApiDeleteRegistryRequest

	// DeleteRegistryExecuteFunc mocks the DeleteRegistryExecute method.
	DeleteRegistryExecuteFunc func(r ApiDeleteRegistryRequest) (*_nethttp.Response, error)

	// GetRegistriesFunc mocks the GetRegistries method.
	GetRegistriesFunc func(ctx _context.Context) ApiGetRegistriesRequest

	// GetRegistriesExecuteFunc mocks the GetRegistriesExecute method.
	GetRegistriesExecuteFunc func(r ApiGetRegistriesRequest) (RegistryRestList, *_nethttp.Response, error)

	// GetRegistryFunc mocks the GetRegistry method.
	GetRegistryFunc func(ctx _context.Context, id string) ApiGetRegistryRequest

	// GetRegistryExecuteFunc mocks the GetRegistryExecute method.
	GetRegistryExecuteFunc func(r ApiGetRegistryRequest) (Registry, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateRegistry holds details about calls to the CreateRegistry method.
		CreateRegistry []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateRegistryExecute holds details about calls to the CreateRegistryExecute method.
		CreateRegistryExecute []struct {
			// R is the r argument value.
			R ApiCreateRegistryRequest
		}
		// DeleteRegistry holds details about calls to the DeleteRegistry method.
		DeleteRegistry []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteRegistryExecute holds details about calls to the DeleteRegistryExecute method.
		DeleteRegistryExecute []struct {
			// R is the r argument value.
			R ApiDeleteRegistryRequest
		}
		// GetRegistries holds details about calls to the GetRegistries method.
		GetRegistries []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// GetRegistriesExecute holds details about calls to the GetRegistriesExecute method.
		GetRegistriesExecute []struct {
			// R is the r argument value.
			R ApiGetRegistriesRequest
		}
		// GetRegistry holds details about calls to the GetRegistry method.
		GetRegistry []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetRegistryExecute holds details about calls to the GetRegistryExecute method.
		GetRegistryExecute []struct {
			// R is the r argument value.
			R ApiGetRegistryRequest
		}
	}
	lockCreateRegistry        sync.RWMutex
	lockCreateRegistryExecute sync.RWMutex
	lockDeleteRegistry        sync.RWMutex
	lockDeleteRegistryExecute sync.RWMutex
	lockGetRegistries         sync.RWMutex
	lockGetRegistriesExecute  sync.RWMutex
	lockGetRegistry           sync.RWMutex
	lockGetRegistryExecute    sync.RWMutex
}

// CreateRegistry calls CreateRegistryFunc.
func (mock *RegistriesApiMock) CreateRegistry(ctx _context.Context) ApiCreateRegistryRequest {
	if mock.CreateRegistryFunc == nil {
		panic("RegistriesApiMock.CreateRegistryFunc: method is nil but RegistriesApi.CreateRegistry was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateRegistry.Lock()
	mock.calls.CreateRegistry = append(mock.calls.CreateRegistry, callInfo)
	mock.lockCreateRegistry.Unlock()
	return mock.CreateRegistryFunc(ctx)
}

// CreateRegistryCalls gets all the calls that were made to CreateRegistry.
// Check the length with:
//     len(mockedRegistriesApi.CreateRegistryCalls())
func (mock *RegistriesApiMock) CreateRegistryCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateRegistry.RLock()
	calls = mock.calls.CreateRegistry
	mock.lockCreateRegistry.RUnlock()
	return calls
}

// CreateRegistryExecute calls CreateRegistryExecuteFunc.
func (mock *RegistriesApiMock) CreateRegistryExecute(r ApiCreateRegistryRequest) (Registry, *_nethttp.Response, error) {
	if mock.CreateRegistryExecuteFunc == nil {
		panic("RegistriesApiMock.CreateRegistryExecuteFunc: method is nil but RegistriesApi.CreateRegistryExecute was just called")
	}
	callInfo := struct {
		R ApiCreateRegistryRequest
	}{
		R: r,
	}
	mock.lockCreateRegistryExecute.Lock()
	mock.calls.CreateRegistryExecute = append(mock.calls.CreateRegistryExecute, callInfo)
	mock.lockCreateRegistryExecute.Unlock()
	return mock.CreateRegistryExecuteFunc(r)
}

// CreateRegistryExecuteCalls gets all the calls that were made to CreateRegistryExecute.
// Check the length with:
//     len(mockedRegistriesApi.CreateRegistryExecuteCalls())
func (mock *RegistriesApiMock) CreateRegistryExecuteCalls() []struct {
	R ApiCreateRegistryRequest
} {
	var calls []struct {
		R ApiCreateRegistryRequest
	}
	mock.lockCreateRegistryExecute.RLock()
	calls = mock.calls.CreateRegistryExecute
	mock.lockCreateRegistryExecute.RUnlock()
	return calls
}

// DeleteRegistry calls DeleteRegistryFunc.
func (mock *RegistriesApiMock) DeleteRegistry(ctx _context.Context, id string) ApiDeleteRegistryRequest {
	if mock.DeleteRegistryFunc == nil {
		panic("RegistriesApiMock.DeleteRegistryFunc: method is nil but RegistriesApi.DeleteRegistry was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteRegistry.Lock()
	mock.calls.DeleteRegistry = append(mock.calls.DeleteRegistry, callInfo)
	mock.lockDeleteRegistry.Unlock()
	return mock.DeleteRegistryFunc(ctx, id)
}

// DeleteRegistryCalls gets all the calls that were made to DeleteRegistry.
// Check the length with:
//     len(mockedRegistriesApi.DeleteRegistryCalls())
func (mock *RegistriesApiMock) DeleteRegistryCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockDeleteRegistry.RLock()
	calls = mock.calls.DeleteRegistry
	mock.lockDeleteRegistry.RUnlock()
	return calls
}

// DeleteRegistryExecute calls DeleteRegistryExecuteFunc.
func (mock *RegistriesApiMock) DeleteRegistryExecute(r ApiDeleteRegistryRequest) (*_nethttp.Response, error) {
	if mock.DeleteRegistryExecuteFunc == nil {
		panic("RegistriesApiMock.DeleteRegistryExecuteFunc: method is nil but RegistriesApi.DeleteRegistryExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteRegistryRequest
	}{
		R: r,
	}
	mock.lockDeleteRegistryExecute.Lock()
	mock.calls.DeleteRegistryExecute = append(mock.calls.DeleteRegistryExecute, callInfo)
	mock.lockDeleteRegistryExecute.Unlock()
	return mock.DeleteRegistryExecuteFunc(r)
}

// DeleteRegistryExecuteCalls gets all the calls that were made to DeleteRegistryExecute.
// Check the length with:
//     len(mockedRegistriesApi.DeleteRegistryExecuteCalls())
func (mock *RegistriesApiMock) DeleteRegistryExecuteCalls() []struct {
	R ApiDeleteRegistryRequest
} {
	var calls []struct {
		R ApiDeleteRegistryRequest
	}
	mock.lockDeleteRegistryExecute.RLock()
	calls = mock.calls.DeleteRegistryExecute
	mock.lockDeleteRegistryExecute.RUnlock()
	return calls
}

// GetRegistries calls GetRegistriesFunc.
func (mock *RegistriesApiMock) GetRegistries(ctx _context.Context) ApiGetRegistriesRequest {
	if mock.GetRegistriesFunc == nil {
		panic("RegistriesApiMock.GetRegistriesFunc: method is nil but RegistriesApi.GetRegistries was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRegistries.Lock()
	mock.calls.GetRegistries = append(mock.calls.GetRegistries, callInfo)
	mock.lockGetRegistries.Unlock()
	return mock.GetRegistriesFunc(ctx)
}

// GetRegistriesCalls gets all the calls that were made to GetRegistries.
// Check the length with:
//     len(mockedRegistriesApi.GetRegistriesCalls())
func (mock *RegistriesApiMock) GetRegistriesCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockGetRegistries.RLock()
	calls = mock.calls.GetRegistries
	mock.lockGetRegistries.RUnlock()
	return calls
}

// GetRegistriesExecute calls GetRegistriesExecuteFunc.
func (mock *RegistriesApiMock) GetRegistriesExecute(r ApiGetRegistriesRequest) (RegistryRestList, *_nethttp.Response, error) {
	if mock.GetRegistriesExecuteFunc == nil {
		panic("RegistriesApiMock.GetRegistriesExecuteFunc: method is nil but RegistriesApi.GetRegistriesExecute was just called")
	}
	callInfo := struct {
		R ApiGetRegistriesRequest
	}{
		R: r,
	}
	mock.lockGetRegistriesExecute.Lock()
	mock.calls.GetRegistriesExecute = append(mock.calls.GetRegistriesExecute, callInfo)
	mock.lockGetRegistriesExecute.Unlock()
	return mock.GetRegistriesExecuteFunc(r)
}

// GetRegistriesExecuteCalls gets all the calls that were made to GetRegistriesExecute.
// Check the length with:
//     len(mockedRegistriesApi.GetRegistriesExecuteCalls())
func (mock *RegistriesApiMock) GetRegistriesExecuteCalls() []struct {
	R ApiGetRegistriesRequest
} {
	var calls []struct {
		R ApiGetRegistriesRequest
	}
	mock.lockGetRegistriesExecute.RLock()
	calls = mock.calls.GetRegistriesExecute
	mock.lockGetRegistriesExecute.RUnlock()
	return calls
}

// GetRegistry calls GetRegistryFunc.
func (mock *RegistriesApiMock) GetRegistry(ctx _context.Context, id string) ApiGetRegistryRequest {
	if mock.GetRegistryFunc == nil {
		panic("RegistriesApiMock.GetRegistryFunc: method is nil but RegistriesApi.GetRegistry was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetRegistry.Lock()
	mock.calls.GetRegistry = append(mock.calls.GetRegistry, callInfo)
	mock.lockGetRegistry.Unlock()
	return mock.GetRegistryFunc(ctx, id)
}

// GetRegistryCalls gets all the calls that were made to GetRegistry.
// Check the length with:
//     len(mockedRegistriesApi.GetRegistryCalls())
func (mock *RegistriesApiMock) GetRegistryCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetRegistry.RLock()
	calls = mock.calls.GetRegistry
	mock.lockGetRegistry.RUnlock()
	return calls
}

// GetRegistryExecute calls GetRegistryExecuteFunc.
func (mock *RegistriesApiMock) GetRegistryExecute(r ApiGetRegistryRequest) (Registry, *_nethttp.Response, error) {
	if mock.GetRegistryExecuteFunc == nil {
		panic("RegistriesApiMock.GetRegistryExecuteFunc: method is nil but RegistriesApi.GetRegistryExecute was just called")
	}
	callInfo := struct {
		R ApiGetRegistryRequest
	}{
		R: r,
	}
	mock.lockGetRegistryExecute.Lock()
	mock.calls.GetRegistryExecute = append(mock.calls.GetRegistryExecute, callInfo)
	mock.lockGetRegistryExecute.Unlock()
	return mock.GetRegistryExecuteFunc(r)
}

// GetRegistryExecuteCalls gets all the calls that were made to GetRegistryExecute.
// Check the length with:
//     len(mockedRegistriesApi.GetRegistryExecuteCalls())
func (mock *RegistriesApiMock) GetRegistryExecuteCalls() []struct {
	R ApiGetRegistryRequest
} {
	var calls []struct {
		R ApiGetRegistryRequest
	}
	mock.lockGetRegistryExecute.RLock()
	calls = mock.calls.GetRegistryExecute
	mock.lockGetRegistryExecute.RUnlock()
	return calls
}

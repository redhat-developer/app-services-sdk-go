/*
 * Service Registry Fleet Manager
 *
 * Managed Service Registry cloud.redhat.com API Management API that lets you create new registry instances. Registry is a datastore for standard event schemas and API designs. Service Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Registry is an Managed version of upstream project called Apicurio Registry. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.
 *
 * API version: 0.0.6
 * Contact: rhosak-eval-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registrymgmtclient

import (
	"encoding/json"
)

// ServiceStatus Schema for the service status response body
type ServiceStatus struct {

	// Boolean property indicating if the maximum number of Trial instances have been reached, therefore creation of more eval instances should not be allowed.
	MaxEvalInstancesReached *bool `json:"max_eval_instances_reached,omitempty"`

}

// NewServiceStatus instantiates a new ServiceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceStatus() *ServiceStatus {
	this := ServiceStatus{}
	return &this
}

// NewServiceStatusWithDefaults instantiates a new ServiceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceStatusWithDefaults() *ServiceStatus {
	this := ServiceStatus{}


	return &this
}


// GetMaxEvalInstancesReached returns the MaxEvalInstancesReached field value if set, zero value otherwise.
func (o *ServiceStatus) GetMaxEvalInstancesReached() bool {
	if o == nil || o.MaxEvalInstancesReached == nil {
		var ret bool
		return ret
	}
	return *o.MaxEvalInstancesReached
}

// GetMaxEvalInstancesReachedOk returns a tuple with the MaxEvalInstancesReached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatus) GetMaxEvalInstancesReachedOk() (*bool, bool) {
	if o == nil || o.MaxEvalInstancesReached == nil {
		return nil, false
	}
	return o.MaxEvalInstancesReached, true
}

// HasMaxEvalInstancesReached returns a boolean if a field has been set.
func (o *ServiceStatus) HasMaxEvalInstancesReached() bool {
	if o != nil && o.MaxEvalInstancesReached != nil {
		return true
	}

	return false
}

// SetMaxEvalInstancesReached gets a reference to the given bool and assigns it to the MaxEvalInstancesReached field.
func (o *ServiceStatus) SetMaxEvalInstancesReached(v bool) {
	o.MaxEvalInstancesReached = &v
}


func (o ServiceStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if o.MaxEvalInstancesReached != nil {
		toSerialize["max_eval_instances_reached"] = o.MaxEvalInstancesReached
	}
    
	return json.Marshal(toSerialize)
}

type NullableServiceStatus struct {
	value *ServiceStatus
	isSet bool
}

func (v NullableServiceStatus) Get() *ServiceStatus {
	return v.value
}

func (v *NullableServiceStatus) Set(val *ServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatus(val *ServiceStatus) *NullableServiceStatus {
	return &NullableServiceStatus{value: val, isSet: true}
}

func (v NullableServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


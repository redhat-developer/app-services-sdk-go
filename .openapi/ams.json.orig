{
  "components": {
    "parameters": {
      "accountId": {
        "description": "The id of account",
        "in": "path",
        "name": "accountId",
        "required": true,
        "schema": { "type": "string" }
      },
      "acctGrpAsgnId": {
        "description": "The id of account group assignment",
        "in": "path",
        "name": "acctGrpAsgnId",
        "required": true,
        "schema": { "type": "string" }
      },
      "acctGrpId": {
        "description": "The id of account group",
        "in": "path",
        "name": "acctGrpId",
        "required": true,
        "schema": { "type": "string" }
      },
      "caseId": {
        "description": "The id of a support case",
        "in": "path",
        "name": "caseId",
        "required": true,
        "schema": { "type": "string" }
      },
      "dryRun": {
        "description": "If true, instructs API to avoid making any changes, but rather run through validations only.",
        "in": "query",
        "name": "dryRun",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "externalResourceId": {
        "description": "The external resource id of record",
        "in": "path",
        "name": "externalResourceId",
        "required": true,
        "schema": { "type": "string" }
      },
      "fetchAccounts": {
        "description": "If true, includes the account reference information in the output. Could slow request response time.",
        "in": "query",
        "name": "fetchAccounts",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "fetchCapabilities": {
        "description": "If true, includes the capabilities on a subscription in the output. Could slow request response time.",
        "in": "query",
        "name": "fetchCapabilities",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "fetchCloudAccounts": {
        "description": "If true, includes the marketplace cloud accounts in the output. Could slow request response time.",
        "in": "query",
        "name": "fetchCloudAccounts",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "fetchCpuAndSocket": {
        "description": "If true, fetches, from the clusters service, the total numbers of CPU's and sockets under an obligation, and includes in the output. Could slow request response time.",
        "in": "query",
        "name": "fetchCpuAndSocket",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "fetchLabels": {
        "description": "If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.",
        "in": "query",
        "name": "fetchLabels",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "fetchRelatedResources": {
        "description": "If true, includes the related resources in the output. Could slow request response time.",
        "in": "query",
        "name": "fetchRelatedResources",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "fetchRhit": {
        "description": "If true, includes the RHIT account_id in the output. Could slow request response time.",
        "in": "query",
        "name": "fetchRhit",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "fields": {
        "description": "Supplies a comma-separated list of fields to be returned.\nFields of sub-structures and of arrays use \u003cstructure\u003e.\u003cfield\u003e notation.\n\u003cstucture\u003e.* means all field of a structure\nExample: For each Subscription to get id, href, plan(id and kind) and labels (all fields)\n\n```\nocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true\n```",
        "in": "query",
        "name": "fields",
        "required": false,
        "schema": { "type": "string" }
      },
      "forceRecalc": {
        "description": "If true, includes that ConsumedQuota should be recalculated.",
        "in": "query",
        "name": "forceRecalc",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "id": {
        "description": "The id of record",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string" }
      },
      "key": {
        "description": "The key of the label",
        "in": "path",
        "name": "key",
        "required": true,
        "schema": { "type": "string" }
      },
      "labels": {
        "description": "Specifies the criteria to filter the subscription resource based on their labels.\nA label is represented as a `key=value` pair,\n\n```\nlabels = \"foo=bar\"\n```\n\nand multiple labels are separated by comma,\n\n```\nlabels = \"foo=bar,fooz=barz\"\n```",
        "in": "query",
        "name": "labels",
        "required": false,
        "schema": { "type": "string" }
      },
      "metricName": {
        "description": "The name of the metric",
        "in": "path",
        "name": "metric_name",
        "required": true,
        "schema": { "type": "string" }
      },
      "metricSearch": {
        "description": "The `search` paramter specifies the PromQL selector. The syntax is defined by Prometheus at\nhttps://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors.\nIt only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection.\nFor example, in order to retrieve subscription_sync_total with names starting with `managed` and with a channel = `production`:\n\n```\nname=~'managed.*',channel='production'\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the records will be returned.",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": { "type": "string" }
      },
      "orderBy": {
        "description": "Specifies the order by criteria. The syntax of this parameter is\nsimilar to the syntax of the _order by_ clause of an SQL statement,\nbut using the names of the json attributes / column of the account.\nFor example, in order to retrieve all accounts ordered by username:\n\n```sql\nusername asc\n```\n\nOr in order to retrieve all accounts ordered by username _and_ first name:\n\n```sql\nusername asc, firstName asc\n```\n\nIf the parameter isn't provided, or if the value is empty, then\nno explicit ordering will be applied.",
        "in": "query",
        "name": "orderBy",
        "required": false,
        "schema": { "type": "string" }
      },
      "orgId": {
        "description": "The id of organization",
        "in": "path",
        "name": "orgId",
        "required": true,
        "schema": { "type": "string" }
      },
      "page": {
        "description": "Page number of record list when record list exceeds specified page size",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": { "default": 1, "minimum": 1, "type": "integer" }
      },
      "product": {
        "description": "The product for self_entitlement. The supported products are [rosa].",
        "in": "path",
        "name": "product",
        "required": true,
        "schema": { "type": "string" }
      },
      "quotaId": {
        "description": "The id of quota",
        "in": "path",
        "name": "quotaId",
        "required": true,
        "schema": { "type": "string" }
      },
      "reduceClusterList": {
        "description": "If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list.",
        "in": "query",
        "name": "reduceClusterList",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "reservedResourceId": {
        "description": "The id of reserved resource",
        "in": "path",
        "name": "reservedResourceId",
        "required": true,
        "schema": { "type": "string" }
      },
      "search": {
        "description": "Specifies the search criteria. The syntax of this parameter is\nsimilar to the syntax of the _where_ clause of an SQL statement,\nusing the names of the json attributes / column names of the account.\nFor example, in order to retrieve all the accounts with a username\nstarting with `my`:\n\n```sql\nusername like 'my%'\n```\n\nThe search criteria can also be applied on related resource.\nFor example, in order to retrieve all the subscriptions labeled by `foo=bar`,\n\n```sql\nlabels.key = 'foo' and labels.value = 'bar'\n```\n\nIf the parameter isn't provided, or if the value is empty, then\nall the accounts that the user has permission to see will be\nreturned.",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": { "type": "string" }
      },
      "size": {
        "description": "Maximum number of records to return",
        "in": "query",
        "name": "size",
        "required": false,
        "schema": { "default": 100, "minimum": 0, "type": "integer" }
      },
      "subId": {
        "description": "The id of subscription",
        "in": "path",
        "name": "subId",
        "required": true,
        "schema": { "type": "string" }
      }
    },
    "schemas": {
      "AccessReview": {
        "properties": {
          "account_username": { "type": "string" },
          "action": {
            "enum": ["get", "list", "create", "delete", "update"],
            "type": "string"
          },
          "cluster_id": { "type": "string" },
          "cluster_uuid": { "type": "string" },
          "organization_id": { "type": "string" },
          "resource_type": {
            "enum": [
              "AddOn",
              "Flavour",
              "Account",
              "AccountPool",
              "Cluster",
              "Plan",
              "Subscription",
              "Organization",
              "Role",
              "Permission",
              "RoleBinding",
              "Registry",
              "RegistryCredential",
              "CurrentAccount",
              "AccessReview",
              "SelfAcccessReview",
              "ResourceReview",
              "SelfResourceReview",
              "ClusterRegistration",
              "AccessToken",
              "ClusterAuthorization",
              "SelfManagedCluster",
              "RedhatManagedCluster",
              "ExportControlReview",
              "ClusterLog",
              "ClusterCredential",
              "ClusterMetric",
              "ResourceQuota",
              "ReservedResource",
              "Dashboard",
              "ClusterProviderAndRegion",
              "ServiceLog",
              "InternalServiceLog",
              "CSLogs",
              "SubscriptionLabel",
              "OrganizationLabel",
              "SubscriptionLabelInternal",
              "SelfAccessReview",
              "SubscriptionInternal",
              "SubscriptionRoleBinding"
            ],
            "type": "string"
          },
          "subscription_id": { "type": "string" }
        },
        "required": ["action", "resource_type", "account_username"],
        "type": "object"
      },
      "AccessReviewResponse": {
        "properties": {
          "account_id": { "type": "string" },
          "action": {
            "enum": ["get", "list", "create", "delete", "update"],
            "type": "string"
          },
          "allowed": { "type": "boolean" },
          "cluster_id": { "type": "string" },
          "cluster_uuid": { "type": "string" },
          "organization_id": { "type": "string" },
          "resource_type": {
            "enum": [
              "AddOn",
              "Flavour",
              "Account",
              "AccountPool",
              "Cluster",
              "Plan",
              "Subscription",
              "Organization",
              "Role",
              "Permission",
              "RoleBinding",
              "Registry",
              "RegistryCredential",
              "CurrentAccount",
              "AccessReview",
              "SelfAcccessReview",
              "ResourceReview",
              "SelfResourceReview",
              "ClusterRegistration",
              "AccessToken",
              "ClusterAuthorization",
              "SelfManagedCluster",
              "RedhatManagedCluster",
              "ExportControlReview",
              "ClusterLog",
              "ClusterCredential",
              "ClusterMetric",
              "ResourceQuota",
              "ReservedResource",
              "Dashboard",
              "ClusterProviderAndRegion",
              "ServiceLog",
              "InternalServiceLog",
              "CSLogs",
              "SubscriptionLabel",
              "OrganizationLabel",
              "SubscriptionLabelInternal",
              "SelfAccessReview",
              "SubscriptionInternal",
              "SubscriptionRoleBinding"
            ],
            "type": "string"
          },
          "subscription_id": { "type": "string" }
        },
        "required": ["allowed"],
        "type": "object"
      },
      "AccessTokenCfg": {
        "properties": {
          "auths": { "additionalProperties": true, "type": "object" }
        },
        "required": ["auths"],
        "type": "object"
      },
      "Account": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "ban_code": { "type": "string" },
              "ban_description": { "type": "string" },
              "banned": { "default": false, "type": "boolean" },
              "capabilities": {
                "items": { "$ref": "#/components/schemas/Capability" },
                "type": "array"
              },
              "created_at": { "format": "date-time", "type": "string" },
              "email": { "format": "email", "type": "string" },
              "first_name": { "type": "string" },
              "labels": {
                "items": { "$ref": "#/components/schemas/Label" },
                "type": "array"
              },
              "last_name": { "type": "string" },
              "organization": { "$ref": "#/components/schemas/Organization" },
              "organization_id": { "type": "string" },
              "rhit_account_id": { "type": "string" },
              "rhit_web_user_id": { "type": "string" },
              "service_account": { "default": false, "type": "boolean" },
              "updated_at": { "format": "date-time", "type": "string" },
              "username": { "type": "string" }
            },
            "required": ["username"],
            "type": "object"
          }
        ]
      },
      "AccountGroup": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "created_at": { "format": "date-time", "type": "string" },
              "description": { "type": "string" },
              "managed_by": { "enum": ["SSO", "OCM"], "type": "string" },
              "name": { "type": "string" },
              "organization_id": { "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "required": [
              "name",
              "description",
              "organization_id",
              "managed_by"
            ],
            "type": "object"
          }
        ]
      },
      "AccountGroupAssignment": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "account_group_id": { "type": "string" },
              "account_id": { "type": "string" },
              "created_at": { "format": "date-time", "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "required": ["account_id", "account_group_id"],
            "type": "object"
          }
        ]
      },
      "AccountGroupAssignmentList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": {
                  "allOf": [
                    { "$ref": "#/components/schemas/AccountGroupAssignment" }
                  ]
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AccountGroupList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": {
                  "allOf": [{ "$ref": "#/components/schemas/AccountGroup" }]
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AccountGroupRequest": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "description": { "type": "string" },
              "name": { "type": "string" }
            },
            "required": ["name", "description"],
            "type": "object"
          }
        ]
      },
      "AccountList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": {
                  "allOf": [{ "$ref": "#/components/schemas/Account" }]
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AccountPatchRequest": {
        "properties": {
          "ban_code": { "type": "string" },
          "ban_description": { "type": "string" },
          "banned": { "type": "boolean" },
          "email": { "format": "email", "type": "string" },
          "first_name": { "type": "string" },
          "last_name": { "type": "string" },
          "organization_id": { "type": "string" },
          "service_account": { "type": "boolean" }
        },
        "type": "object"
      },
      "AccountReference": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "email": { "type": "string" },
              "name": { "type": "string" },
              "username": { "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "Capability": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "inherited": { "type": "boolean" },
              "name": { "type": "string" },
              "value": { "type": "string" }
            },
            "required": ["name", "value", "inherited"],
            "type": "object"
          }
        ]
      },
      "CapabilityReview": {
        "properties": { "result": { "type": "string" } },
        "required": ["result"],
        "type": "object"
      },
      "CapabilityReviewRequest": {
        "properties": {
          "account_username": { "type": "string" },
          "capability": { "enum": ["manage_cluster_admin"], "type": "string" },
          "cluster_id": { "type": "string" },
          "organization_id": { "type": "string" },
          "subscription_id": { "type": "string" },
          "type": { "enum": ["Cluster"], "type": "string" }
        },
        "required": ["account_username", "type", "capability"],
        "type": "object"
      },
      "Certificate": {
        "properties": {
          "cert": { "type": "string" },
          "id": { "type": "string" },
          "key": { "type": "string" },
          "metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object"
          },
          "organization_id": { "type": "string" },
          "serial": { "$ref": "#/components/schemas/CertificateSerial" }
        },
        "required": [
          "id",
          "organization_id",
          "metadata",
          "key",
          "cert",
          "serial"
        ],
        "type": "object"
      },
      "CertificateSerial": {
        "properties": {
          "created": { "format": "date-time", "type": "string" },
          "expiration": { "format": "date-time", "type": "string" },
          "id": { "format": "int64", "type": "integer" },
          "serial": { "format": "int64", "type": "integer" },
          "updated": { "format": "date-time", "type": "string" }
        },
        "required": ["id", "serial", "created", "updated", "expiration"],
        "type": "object"
      },
      "CertificatesRequest": {
        "properties": {
          "arch": {
            "enum": [
              "x86",
              "x86_64",
              "ppc",
              "ppc64",
              "ppc64le",
              "s390",
              "s390x",
              "ia64",
              "aarch64"
            ],
            "type": "string"
          },
          "type": { "enum": ["sca"], "type": "string" }
        },
        "required": ["type"],
        "type": "object"
      },
      "CloudAccount": {
        "properties": {
          "cloud_account_id": { "type": "string" },
          "cloud_provider_id": { "type": "string" }
        },
        "type": "object"
      },
      "CloudResource": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "active": { "default": true, "type": "boolean" },
              "category": { "type": "string" },
              "category_pretty": { "type": "string" },
              "cloud_provider": { "type": "string" },
              "cpu_cores": { "type": "integer" },
              "created_at": { "format": "date-time", "type": "string" },
              "generic_name": { "type": "string" },
              "memory": { "format": "int64", "type": "integer" },
              "memory_pretty": { "type": "string" },
              "name_pretty": { "type": "string" },
              "resource_type": {
                "enum": [
                  "addon",
                  "compute.node",
                  "cluster",
                  "network.io",
                  "network.loadbalancer",
                  "pv.storage"
                ],
                "type": "string"
              },
              "size_pretty": { "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "CloudResourceList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/CloudResource" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ClusterAuthorizationRequest": {
        "properties": {
          "account_username": { "type": "string" },
          "availability_zone": { "type": "string" },
          "byoc": { "type": "boolean" },
          "cloud_account_id": { "type": "string" },
          "cloud_provider_id": { "type": "string" },
          "cluster_id": { "type": "string" },
          "disconnected": { "type": "boolean" },
          "display_name": { "type": "string" },
          "external_cluster_id": { "type": "string" },
          "managed": { "type": "boolean" },
          "product_category": { "enum": ["assistedInstall"], "type": "string" },
          "product_id": {
            "default": "osd",
            "enum": ["ocp", "osd", "osdtrial", "moa", "rhmi"],
            "type": "string"
          },
          "quota_version": { "type": "string" },
          "reserve": { "type": "boolean" },
          "resources": {
            "items": { "$ref": "#/components/schemas/ReservedResource" },
            "type": "array"
          }
        },
        "required": ["cluster_id", "account_username"],
        "type": "object"
      },
      "ClusterAuthorizationResponse": {
        "properties": {
          "allowed": { "type": "boolean" },
          "excess_resources": {
            "items": { "$ref": "#/components/schemas/ExcessResource" },
            "type": "array"
          },
          "organization_id": { "type": "string" },
          "subscription": { "$ref": "#/components/schemas/ObjectReference" }
        },
        "required": ["allowed", "excess_resources"],
        "type": "object"
      },
      "ClusterMetricsNodes": {
        "properties": {
          "compute": { "type": "double" },
          "infra": { "type": "double" },
          "master": { "type": "double" },
          "total": { "type": "double" }
        },
        "type": "object"
      },
      "ClusterRegistrationRequest": {
        "properties": {
          "authorization_token": { "type": "string" },
          "cluster_id": { "type": "string" }
        },
        "type": "object"
      },
      "ClusterRegistrationResponse": {
        "properties": {
          "account_id": { "type": "string" },
          "authorization_token": { "type": "string" },
          "cluster_id": { "type": "string" },
          "expires_at": {
            "description": "Cluster Registration expiration in Unix time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterResource": {
        "properties": {
          "total": {
            "properties": {
              "unit": { "type": "string" },
              "value": { "type": "double" }
            },
            "required": ["value", "unit"],
            "type": "object"
          },
          "updated_timestamp": { "format": "date-time", "type": "string" },
          "used": {
            "properties": {
              "unit": { "type": "string" },
              "value": { "type": "double" }
            },
            "required": ["value", "unit"],
            "type": "object"
          }
        },
        "required": ["used", "total", "updated_timestamp"],
        "type": "object"
      },
      "ClusterTransfer": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "cluster_uuid": { "type": "string" },
              "created_at": { "format": "date-time", "type": "string" },
              "expiration_date": { "format": "date-time", "type": "string" },
              "owner": { "type": "string" },
              "recipient": { "type": "string" },
              "secret": { "type": "string" },
              "status": {
                "enum": [
                  "Pending",
                  "Accepted",
                  "Declined",
                  "Rescinded",
                  "Completed"
                ],
                "type": "string"
              },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "ClusterTransferList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": {
                  "allOf": [{ "$ref": "#/components/schemas/ClusterTransfer" }]
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ClusterTransferPatchRequest": {
        "properties": { "status": { "type": "string" } },
        "type": "object"
      },
      "ClusterTransferRequest": {
        "properties": {
          "cluster_uuid": { "type": "string" },
          "owner": { "type": "string" },
          "recipient": { "type": "string" }
        },
        "type": "object"
      },
      "ClusterUpgrade": {
        "properties": {
          "available": { "type": "boolean" },
          "state": { "type": "string" },
          "updated_timestamp": { "format": "date-time", "type": "string" },
          "version": { "type": "string" }
        },
        "type": "object"
      },
      "ConsumedQuota": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "availability_zone_type": { "type": "string" },
              "billing_model": { "type": "string" },
              "byoc": { "type": "boolean" },
              "cloud_provider_id": { "type": "string" },
              "count": { "type": "integer" },
              "organization_id": { "type": "string" },
              "plan_id": { "type": "string" },
              "resource_name": { "type": "string" },
              "resource_type": { "type": "string" },
              "version": { "type": "string" }
            },
            "required": ["byoc", "count"],
            "type": "object"
          }
        ]
      },
      "ConsumedQuotaList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/ConsumedQuota" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "DeletedSubscription": {
        "allOf": [
          { "$ref": "#/components/schemas/SubscriptionCommonFields" },
          {
            "properties": {
              "created_at": { "format": "date-time", "type": "string" },
              "id": { "type": "string" },
              "metrics": { "type": "string" },
              "query_timestamp": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "DeletedSubscriptionList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/DeletedSubscription" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "EphemeralResourceQuota": {
        "properties": {
          "availability_zone_type": { "type": "string" },
          "byoc": { "type": "boolean" },
          "resource_name": { "type": "string" },
          "resource_type": { "type": "string" },
          "sku": { "type": "string" },
          "sku_count": { "type": "integer" }
        },
        "type": "object"
      },
      "Error": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "code": { "type": "string" },
              "operation_id": { "type": "string" },
              "reason": { "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "ErrorList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Error" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ExcessResource": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "availability_zone_type": { "type": "string" },
              "billing_model": { "type": "string" },
              "byoc": { "type": "boolean" },
              "count": { "type": "integer" },
              "resource_name": { "type": "string" },
              "resource_type": { "type": "string" }
            },
            "required": ["byoc"],
            "type": "object"
          }
        ]
      },
      "ExportControlReview": {
        "properties": { "restricted": { "type": "boolean" } },
        "required": ["restricted"],
        "type": "object"
      },
      "ExportControlReviewRequest": {
        "properties": {
          "account_username": { "type": "string" },
          "ignore_cache": { "type": "boolean" }
        },
        "required": ["account_username"],
        "type": "object"
      },
      "FeatureReview": {
        "properties": {
          "account_username": { "type": "string" },
          "feature": { "type": "string" },
          "organization_id": { "type": "string" }
        },
        "required": ["feature"],
        "type": "object"
      },
      "FeatureReviewResponse": {
        "properties": {
          "enabled": { "default": false, "type": "boolean" },
          "feature_id": { "type": "string" }
        },
        "required": ["enabled", "feature_id"],
        "type": "object"
      },
      "FeatureToggle": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "enabled": { "default": false, "type": "boolean" }
            },
            "required": ["enabled"],
            "type": "object"
          }
        ]
      },
      "FeatureToggleQueryRequest": {
        "allOf": [
          {
            "properties": { "organization_id": { "type": "string" } },
            "required": ["organization_id"],
            "type": "object"
          }
        ]
      },
      "Label": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "account_id": { "type": "string" },
              "created_at": { "format": "date-time", "type": "string" },
              "internal": { "type": "boolean" },
              "key": { "type": "string" },
              "organization_id": { "type": "string" },
              "subscription_id": { "type": "string" },
              "type": { "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" },
              "value": { "type": "string" }
            },
            "required": ["key", "value", "internal"],
            "type": "object"
          }
        ]
      },
      "LabelList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Label" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "LandingPageCTLItem": {
        "properties": {
          "shape": {
            "properties": {
              "description": { "type": "string" },
              "link": { "$ref": "#/components/schemas/LandingPageLinkShape" },
              "title": { "type": "string" }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LandingPageEstateItem": {
        "properties": {
          "count": { "format": "int64", "type": "integer" },
          "id": { "type": "string" },
          "shape": { "$ref": "#/components/schemas/LandingPageLinkShape" }
        },
        "type": "object"
      },
      "LandingPageLinkShape": {
        "properties": {
          "href": { "type": "string" },
          "title": { "type": "string" }
        },
        "type": "object"
      },
      "List": {
        "properties": {
          "kind": { "type": "string" },
          "page": { "type": "integer" },
          "size": { "type": "integer" },
          "total": { "type": "integer" }
        },
        "required": ["kind", "page", "size", "total", "items"],
        "type": "object"
      },
      "Metric": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "external_id": { "type": "string" },
              "health_state": { "type": "string" },
              "id": { "type": "string" },
              "metrics": { "type": "string" },
              "query_timestamp": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "MetricsList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Metric" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "NotificationContactCreateRequest": {
        "properties": { "account_identifier": { "type": "string" } },
        "type": "object"
      },
      "NotificationRequest": {
        "properties": {
          "bcc_address": { "type": "string" },
          "cluster_id": { "type": "string" },
          "cluster_uuid": { "type": "string" },
          "include_red_hat_associates": { "type": "boolean" },
          "internal_only": { "type": "boolean" },
          "subject": { "type": "string" },
          "subscription_id": { "type": "string" },
          "template_name": { "type": "string" },
          "template_parameters": {
            "items": { "$ref": "#/components/schemas/TemplateParameter" },
            "type": "array"
          }
        },
        "required": ["template_name"],
        "type": "object"
      },
      "ObjectReference": {
        "properties": {
          "href": { "type": "string" },
          "id": { "type": "string" },
          "kind": { "type": "string" }
        },
        "type": "object"
      },
      "OneMetric": {
        "properties": {
          "arch": { "type": "string" },
          "channel_info": { "type": "string" },
          "cloud_provider": { "type": "string" },
          "cluster_type": { "type": "string" },
          "compute_nodes_cpu": {
            "$ref": "#/components/schemas/ClusterResource"
          },
          "compute_nodes_memory": {
            "$ref": "#/components/schemas/ClusterResource"
          },
          "compute_nodes_sockets": {
            "$ref": "#/components/schemas/ClusterResource"
          },
          "console_url": { "type": "string" },
          "cpu": { "$ref": "#/components/schemas/ClusterResource" },
          "critical_alerts_firing": { "type": "double" },
          "health_state": {
            "enum": ["healthy", "unhealthy", "unknown"],
            "type": "string"
          },
          "memory": { "$ref": "#/components/schemas/ClusterResource" },
          "nodes": { "$ref": "#/components/schemas/ClusterMetricsNodes" },
          "non_virt_nodes": { "type": "double" },
          "openshift_version": { "type": "string" },
          "operating_system": { "type": "string" },
          "operators_condition_failing": { "type": "double" },
          "query_timestamp": { "format": "date-time", "type": "string" },
          "region": { "type": "string" },
          "sockets": { "$ref": "#/components/schemas/ClusterResource" },
          "state": { "type": "string" },
          "state_description": { "type": "string" },
          "storage": { "$ref": "#/components/schemas/ClusterResource" },
          "subscription_cpu_total": { "type": "double" },
          "subscription_obligation_exists": { "type": "double" },
          "subscription_socket_total": { "type": "double" },
          "upgrade": { "$ref": "#/components/schemas/ClusterUpgrade" }
        },
        "required": [
          "HealthState",
          "memory",
          "cpu",
          "sockets",
          "compute_nodes_memory",
          "compute_nodes_cpu",
          "compute_nodes_sockets",
          "storage",
          "nodes",
          "operating_system",
          "upgrade",
          "state",
          "state_description",
          "openshift_version",
          "cloud_provider",
          "region",
          "console_url",
          "critical_alerts_firing",
          "operators_condition_failing",
          "subscription_cpu_total",
          "subscription_socket_total",
          "subscription_obligation_exists",
          "cluster_type",
          "non_virt_nodes"
        ],
        "type": "object"
      },
      "Organization": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "capabilities": {
                "items": { "$ref": "#/components/schemas/Capability" },
                "type": "array"
              },
              "created_at": { "format": "date-time", "type": "string" },
              "ebs_account_id": { "type": "string" },
              "external_id": { "type": "string" },
              "labels": {
                "items": { "$ref": "#/components/schemas/Label" },
                "type": "array"
              },
              "name": { "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "OrganizationList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": {
                  "allOf": [{ "$ref": "#/components/schemas/Organization" }]
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "OrganizationPatchRequest": {
        "properties": {
          "ebs_account_id": { "type": "string" },
          "external_id": { "type": "string" },
          "name": { "type": "string" }
        },
        "type": "object"
      },
      "Permission": {
        "allOf": [
          {
            "properties": {
              "action": {
                "enum": ["get", "list", "create", "delete", "update"],
                "type": "string"
              },
              "resource": { "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "PermissionList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Permission" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "Plan": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "category": { "type": "string" },
              "name": { "type": "string" },
              "type": { "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "PlanList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Plan" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "PullSecretRequest": {
        "properties": { "external_resource_id": { "type": "string" } },
        "required": ["external_resource_id"],
        "type": "object"
      },
      "Quota": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "created_at": { "format": "date-time", "type": "string" },
              "description": { "type": "string" },
              "resource_type": { "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "QuotaCost": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "allowed": { "type": "integer" },
              "cloud_accounts": {
                "items": { "$ref": "#/components/schemas/CloudAccount" },
                "type": "array"
              },
              "consumed": { "type": "integer" },
              "organization_id": { "type": "string" },
              "quota_id": { "type": "string" },
              "related_resources": {
                "items": { "$ref": "#/components/schemas/RelatedResource" },
                "type": "array"
              },
              "version": { "type": "string" }
            },
            "required": ["quota_id", "consumed", "allowed"],
            "type": "object"
          }
        ]
      },
      "QuotaCostList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/QuotaCost" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "QuotaList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Quota" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "QuotaRules": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "availability_zone": { "type": "string" },
              "billing_model": { "type": "string" },
              "byoc": { "type": "string" },
              "cloud": { "type": "string" },
              "cost": { "type": "integer" },
              "name": { "type": "string" },
              "product": { "type": "string" },
              "quota_id": { "type": "string" },
              "type": { "type": "string" }
            },
            "required": ["cost"],
            "type": "object"
          }
        ]
      },
      "QuotaRulesList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/QuotaRules" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "Registry": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "cloudAlias": { "type": "boolean" },
              "created_at": { "format": "date-time", "type": "string" },
              "name": { "type": "string" },
              "org_name": { "type": "string" },
              "team_name": { "type": "string" },
              "type": { "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" },
              "url": { "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "RegistryAddress": {
        "additionalProperties": {
          "properties": {
            "auth": { "type": "string" },
            "email": { "format": "email", "type": "string" }
          },
          "type": "object"
        },
        "type": "object"
      },
      "RegistryCreateRequest": {
        "allOf": [
          { "$ref": "#/components/schemas/RegistryRequest" },
          { "required": ["name", "url", "type"] }
        ],
        "type": "object"
      },
      "RegistryCredential": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "account": { "$ref": "#/components/schemas/ObjectReference" },
              "created_at": { "format": "date-time", "type": "string" },
              "external_resource_id": { "type": "string" },
              "registry": { "$ref": "#/components/schemas/ObjectReference" },
              "token": { "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" },
              "username": { "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "RegistryCredentialList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/RegistryCredential" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "RegistryCredentialPatchRequest": {
        "properties": {
          "account_id": { "type": "string" },
          "external_resource_id": { "type": "string" },
          "registry_id": { "type": "string" },
          "token": { "type": "string" },
          "username": { "type": "string" }
        },
        "type": "object"
      },
      "RegistryList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Registry" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "RegistryRequest": {
        "properties": {
          "cloudAlias": { "type": "boolean" },
          "name": { "type": "string" },
          "org_name": { "type": "string" },
          "team_name": { "type": "string" },
          "type": { "type": "string" },
          "url": { "type": "string" }
        },
        "type": "object"
      },
      "RelatedResource": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "availability_zone_type": { "type": "string" },
              "billing_model": { "type": "string" },
              "byoc": { "type": "string" },
              "cloud_provider": { "type": "string" },
              "cost": { "type": "integer" },
              "product": { "type": "string" },
              "product_id": { "type": "string" },
              "resource_name": { "type": "string" },
              "resource_type": { "type": "string" }
            },
            "required": [
              "resource_type",
              "resource_anme",
              "byoc",
              "availability_zone_type",
              "cloud_provider",
              "product",
              "billing_model",
              "cost"
            ],
            "type": "object"
          }
        ]
      },
      "ReservedResource": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "availability_zone_type": { "type": "string" },
              "billing_marketplace_account": { "type": "string" },
              "billing_model": { "type": "string" },
              "byoc": { "type": "boolean" },
              "cluster": { "type": "boolean" },
              "count": { "type": "integer" },
              "created_at": { "format": "date-time", "type": "string" },
              "resource_name": { "type": "string" },
              "resource_type": { "type": "string" },
              "subscription": {
                "$ref": "#/components/schemas/ObjectReference"
              },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "required": ["byoc"],
            "type": "object"
          }
        ]
      },
      "ReservedResourceList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/ReservedResource" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ReservedResourcePatchRequest": {
        "properties": { "billing_model": { "type": "string" } },
        "type": "object"
      },
      "ResourceQuota": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "created_at": { "format": "date-time", "type": "string" },
              "organization_id": { "type": "string" },
              "sku": { "type": "string" },
              "sku_count": { "type": "integer" },
              "type": {
                "enum": ["Config", "Manual", "Subscription"],
                "type": "string"
              },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "required": ["sku_count"],
            "type": "object"
          }
        ]
      },
      "ResourceQuotaList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/ResourceQuota" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ResourceQuotaRequest": {
        "properties": {
          "sku": { "type": "string" },
          "sku_count": { "type": "integer" },
          "type": {
            "enum": ["Config", "Manual", "Subscription"],
            "type": "string"
          }
        },
        "required": ["sku", "sku_count", "count"],
        "type": "object"
      },
      "ResourceReview": {
        "properties": {
          "account_username": { "type": "string" },
          "action": {
            "enum": ["get", "list", "create", "delete", "update"],
            "type": "string"
          },
          "cluster_ids": { "items": { "type": "string" }, "type": "array" },
          "cluster_uuids": { "items": { "type": "string" }, "type": "array" },
          "organization_ids": {
            "items": { "type": "string" },
            "type": "array"
          },
          "resource_type": {
            "enum": ["Cluster", "Subscription"],
            "type": "string"
          },
          "subscription_ids": { "items": { "type": "string" }, "type": "array" }
        },
        "required": [
          "action",
          "resource_type",
          "account_username",
          "cluster_uuids",
          "cluster_ids",
          "subscription_ids",
          "organization_ids"
        ],
        "type": "object"
      },
      "ResourceReviewRequest": {
        "properties": {
          "account_username": { "type": "string" },
          "action": { "enum": ["get", "delete", "update"], "type": "string" },
          "resource_type": {
            "enum": ["Cluster", "Subscription"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Role": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "name": { "type": "string" },
              "permissions": {
                "items": { "$ref": "#/components/schemas/Permission" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "RoleBinding": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "account": { "$ref": "#/components/schemas/ObjectReference" },
              "account_group": {
                "$ref": "#/components/schemas/ObjectReference"
              },
              "config_managed": { "type": "boolean" },
              "created_at": { "format": "date-time", "type": "string" },
              "managed_by": { "enum": ["Config", "User"], "type": "string" },
              "organization": {
                "$ref": "#/components/schemas/ObjectReference"
              },
              "role": { "$ref": "#/components/schemas/ObjectReference" },
              "subscription": {
                "$ref": "#/components/schemas/ObjectReference"
              },
              "type": {
                "enum": ["Application", "Subscription", "Organization"],
                "type": "string"
              },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "RoleBindingCreateRequest": {
        "allOf": [
          { "$ref": "#/components/schemas/RoleBindingRequest" },
          { "required": ["role_id", "type"] }
        ]
      },
      "RoleBindingList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/RoleBinding" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "RoleBindingRequest": {
        "properties": {
          "account_group_id": { "type": "string" },
          "account_id": { "type": "string" },
          "config_managed": { "type": "boolean" },
          "managed_by": { "type": "string" },
          "organization_id": { "type": "string" },
          "role_id": { "type": "string" },
          "subscription_id": { "type": "string" },
          "type": { "type": "string" }
        },
        "type": "object"
      },
      "RoleList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Role" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SKU": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "created_at": { "format": "date-time", "type": "string" },
              "description": { "type": "string" },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "SelfAccessReview": {
        "properties": {
          "action": {
            "enum": ["get", "list", "create", "delete", "update"],
            "type": "string"
          },
          "cluster_id": { "type": "string" },
          "cluster_uuid": { "type": "string" },
          "organization_id": { "type": "string" },
          "resource_type": {
            "enum": [
              "AddOn",
              "Flavour",
              "Account",
              "AccountPool",
              "Cluster",
              "Plan",
              "Subscription",
              "Organization",
              "Role",
              "Permission",
              "RoleBinding",
              "Registry",
              "RegistryCredential",
              "CurrentAccount",
              "AccessReview",
              "SelfAcccessReview",
              "ResourceReview",
              "SelfResourceReview",
              "ClusterRegistration",
              "AccessToken",
              "ClusterAuthorization",
              "SelfManagedCluster",
              "RedhatManagedCluster",
              "ExportControlReview",
              "ClusterLog",
              "ClusterCredential",
              "ClusterMetric",
              "ResourceQuota",
              "ReservedResource",
              "Dashboard",
              "ClusterProviderAndRegion",
              "ServiceLog",
              "InternalServiceLog",
              "CSLogs",
              "SubscriptionLabel",
              "OrganizationLabel",
              "SubscriptionLabelInternal",
              "SelfAccessReview",
              "SubscriptionInternal",
              "SubscriptionRoleBinding"
            ],
            "type": "string"
          },
          "subscription_id": { "type": "string" }
        },
        "required": ["action", "resource_type"],
        "type": "object"
      },
      "SelfEntitlementStatus": {
        "properties": {
          "product": { "type": "string" },
          "status": { "type": "string" }
        },
        "type": "object"
      },
      "SelfFeatureReview": {
        "properties": { "feature": { "type": "string" } },
        "required": ["feature"],
        "type": "object"
      },
      "SelfResourceReview": {
        "properties": {
          "action": {
            "enum": ["get", "list", "create", "delete", "update"],
            "type": "string"
          },
          "cluster_ids": { "items": { "type": "string" }, "type": "array" },
          "cluster_uuids": { "items": { "type": "string" }, "type": "array" },
          "organization_ids": {
            "items": { "type": "string" },
            "type": "array"
          },
          "resource_type": {
            "enum": ["Cluster", "Subscription"],
            "type": "string"
          },
          "subscription_ids": { "items": { "type": "string" }, "type": "array" }
        },
        "required": [
          "action",
          "resource_type",
          "cluster_uuids",
          "cluster_ids",
          "subscription_ids",
          "organization_ids"
        ],
        "type": "object"
      },
      "SelfResourceReviewRequest": {
        "properties": {
          "action": { "enum": ["get", "delete", "update"], "type": "string" },
          "resource_type": {
            "enum": ["Cluster", "Subscription"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SelfServiceLandingPageSchema": {
        "properties": {
          "configTryLearn": {
            "properties": {
              "configure": {
                "items": { "$ref": "#/components/schemas/LandingPageCTLItem" },
                "type": "array"
              },
              "try": {
                "items": { "$ref": "#/components/schemas/LandingPageCTLItem" },
                "type": "array"
              }
            },
            "type": "object"
          },
          "estate": {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LandingPageEstateItem"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SelfTermsReview": {
        "properties": {
          "check_optional_terms": { "default": true, "type": "boolean" },
          "event_code": { "type": "string" },
          "site_code": { "type": "string" }
        },
        "type": "object"
      },
      "SkuList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/SKU" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SkuRules": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "allowed": { "type": "integer" },
              "quota_id": { "type": "string" },
              "sku": { "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "SkuRulesList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/SkuRules" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "Subscription": {
        "allOf": [
          { "$ref": "#/components/schemas/SubscriptionCommonFields" },
          {
            "properties": {
              "capabilities": {
                "items": { "$ref": "#/components/schemas/Capability" },
                "type": "array"
              },
              "created_at": { "format": "date-time", "type": "string" },
              "creator": { "$ref": "#/components/schemas/AccountReference" },
              "eval_expiration_date": {
                "description": "Calulated as the subscription created date + 60 days",
                "format": "date-time",
                "type": "string"
              },
              "labels": {
                "items": { "$ref": "#/components/schemas/Label" },
                "type": "array"
              },
              "metrics": {
                "items": { "$ref": "#/components/schemas/OneMetric" },
                "maxItems": 1,
                "type": "array"
              },
              "notification_contacts": {
                "items": { "$ref": "#/components/schemas/Account" },
                "type": "array"
              },
              "plan": { "$ref": "#/components/schemas/Plan" },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "SubscriptionCommonFields": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "billing_expiration_date": {
                "description": "If set, the date the subscription expires based on the billing model",
                "format": "date-time",
                "type": "string"
              },
              "billing_marketplace_account": { "type": "string" },
              "cloud_account_id": { "type": "string" },
              "cloud_provider_id": { "type": "string" },
              "cluster_billing_model": { "type": "string" },
              "cluster_id": { "type": "string" },
              "console_url": { "type": "string" },
              "consumer_uuid": { "type": "string" },
              "cpu_total": { "type": "integer" },
              "creator_id": { "type": "string" },
              "display_name": { "type": "string" },
              "external_cluster_id": { "type": "string" },
              "last_reconcile_date": {
                "description": "Last time this subscription were reconciled about cluster usage",
                "format": "date-time",
                "type": "string"
              },
              "last_released_at": {
                "description": "Last time status was set to Released for this cluster/subscription in Unix time",
                "format": "date-time",
                "type": "string"
              },
              "last_telemetry_date": {
                "description": "Last telemetry authorization request for this cluster/subscription in Unix time",
                "format": "date-time",
                "type": "string"
              },
              "managed": { "type": "boolean" },
              "organization_id": { "type": "string" },
              "plan_id": { "type": "string" },
              "product_bundle": {
                "enum": ["Openshift", "JBoss-Middleware", "IBM-CloudPak"],
                "type": "string"
              },
              "provenance": { "type": "string" },
              "region_id": { "type": "string" },
              "released": { "type": "boolean" },
              "service_level": {
                "enum": ["L1-L3", "L3-only"],
                "type": "string"
              },
              "socket_total": { "type": "integer" },
              "status": { "type": "string" },
              "support_level": {
                "enum": ["Eval", "Standard", "Premium", "Self-Support", "None"],
                "type": "string"
              },
              "system_units": {
                "enum": ["Cores/vCPU", "Sockets"],
                "type": "string"
              },
              "trial_end_date": {
                "description": "If the subscription is a trial, date the trial ends",
                "format": "date-time",
                "type": "string"
              },
              "usage": {
                "enum": [
                  "Production",
                  "Development/Test",
                  "Disaster Recovery",
                  "Academic"
                ],
                "type": "string"
              }
            },
            "required": ["managed"],
            "type": "object"
          }
        ]
      },
      "SubscriptionCreateRequest": {
        "properties": {
          "cluster_uuid": { "type": "string" },
          "console_url": { "type": "string" },
          "display_name": { "type": "string" },
          "plan_id": { "enum": ["OCP"], "type": "string" },
          "status": { "enum": ["Disconnected"], "type": "string" }
        },
        "required": ["cluster_uuid", "status", "plan_id"],
        "type": "object"
      },
      "SubscriptionList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/Subscription" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SubscriptionMetric": {
        "allOf": [
          { "properties": { "_id": { "type": "string" } }, "type": "object" }
        ]
      },
      "SubscriptionMetricList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": { "$ref": "#/components/schemas/SubscriptionMetric" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SubscriptionPatchRequest": {
        "properties": {
          "billing_expiration_date": {
            "format": "date-time",
            "type": "string"
          },
          "cloud_account_id": { "type": "string" },
          "cloud_provider_id": { "type": "string" },
          "cluster_billing_model": {
            "enum": [
              "standard",
              "marketplace",
              "marketplace-aws",
              "marketplace-azure",
              "marketplace-rhm"
            ],
            "type": "string"
          },
          "cluster_id": { "type": "string" },
          "console_url": { "type": "string" },
          "consumer_uuid": { "type": "string" },
          "cpu_total": { "type": "integer" },
          "creator_id": { "type": "string" },
          "display_name": { "type": "string" },
          "external_cluster_id": { "type": "string" },
          "managed": { "type": "boolean" },
          "organization_id": { "type": "string" },
          "plan_id": { "type": "string" },
          "product_bundle": {
            "enum": ["Openshift", "JBoss-Middleware", "IBM-CloudPak"],
            "type": "string"
          },
          "provenance": { "type": "string" },
          "region_id": { "type": "string" },
          "released": { "type": "boolean" },
          "service_level": { "enum": ["L1-L3", "L3-only"], "type": "string" },
          "socket_total": { "type": "integer" },
          "status": { "type": "string" },
          "support_level": {
            "enum": ["Eval", "Standard", "Premium", "Self-Support", "None"],
            "type": "string"
          },
          "system_units": {
            "enum": ["Cores/vCPU", "Sockets"],
            "type": "string"
          },
          "trial_end_date": { "format": "date-time", "type": "string" },
          "usage": {
            "enum": [
              "Production",
              "Development/Test",
              "Disaster Recovery",
              "Academic"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubscriptionRoleBinding": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "account": { "$ref": "#/components/schemas/AccountReference" },
              "account_email": { "type": "string" },
              "account_username": { "type": "string" },
              "created_at": { "format": "date-time", "type": "string" },
              "role": { "$ref": "#/components/schemas/ObjectReference" },
              "subscription": {
                "$ref": "#/components/schemas/ObjectReference"
              },
              "updated_at": { "format": "date-time", "type": "string" }
            },
            "type": "object"
          }
        ]
      },
      "SubscriptionRoleBindingCreateRequest": {
        "properties": {
          "account_username": { "type": "string" },
          "role_id": { "type": "string" }
        },
        "required": ["role_id", "account_username"],
        "type": "object"
      },
      "SubscriptionRoleBindingList": {
        "allOf": [
          { "$ref": "#/components/schemas/List" },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/SubscriptionRoleBinding"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "Summary": {
        "allOf": [
          { "$ref": "#/components/schemas/ObjectReference" },
          {
            "properties": {
              "metrics": {
                "items": { "$ref": "#/components/schemas/SummaryMetrics" },
                "type": "array"
              },
              "name": { "type": "string" }
            },
            "required": ["metrics"],
            "type": "object"
          }
        ]
      },
      "SummaryMetrics": {
        "allOf": [
          {
            "properties": {
              "name": { "type": "string" },
              "vector": {
                "items": { "$ref": "#/components/schemas/SummaryVector" },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SummaryVector": {
        "allOf": [
          {
            "properties": {
              "time": { "format": "date-time", "type": "string" },
              "value": { "type": "double" }
            },
            "type": "object"
          }
        ]
      },
      "SupportCasesCreatedResponse": {
        "properties": {
          "caseNumber": { "type": "string" },
          "cluster_id": { "type": "string" },
          "cluster_uuid": { "type": "string" },
          "description": { "type": "string" },
          "severity": { "type": "string" },
          "status": { "type": "string" },
          "subscription_id": { "type": "string" },
          "summary": { "type": "string" },
          "uri": { "type": "string" }
        },
        "type": "object"
      },
      "SupportCasesRequest": {
        "properties": {
          "account_number": { "type": "string" },
          "case_language": { "type": "string" },
          "cluster_id": { "type": "string" },
          "cluster_uuid": { "type": "string" },
          "contact_sso_name": { "type": "string" },
          "description": { "type": "string" },
          "event_stream_id": { "type": "string" },
          "openshift_cluster_id": { "type": "string" },
          "product": {
            "default": "OpenShift Container Platform",
            "type": "string"
          },
          "severity": {
            "enum": ["1 (Urgent)", "2 (High)", "3 (Normal)", "4 (Low)"],
            "type": "string"
          },
          "subscription_id": { "type": "string" },
          "summary": { "type": "string" },
          "version": { "default": "4.10", "type": "string" }
        },
        "required": ["summary", "description", "severity"],
        "type": "object"
      },
      "TemplateParameter": {
        "properties": {
          "content": { "type": "string" },
          "name": { "type": "string" }
        },
        "required": ["name", "content"],
        "type": "object"
      },
      "TermsReview": {
        "properties": {
          "account_username": { "type": "string" },
          "check_optional_terms": { "default": true, "type": "boolean" },
          "event_code": { "type": "string" },
          "site_code": { "type": "string" }
        },
        "required": ["account_username"],
        "type": "object"
      },
      "TermsReviewResponse": {
        "properties": {
          "account_id": { "type": "string" },
          "organization_id": { "type": "string" },
          "redirect_url": { "type": "string" },
          "terms_available": { "type": "boolean" },
          "terms_required": { "type": "boolean" }
        },
        "required": [
          "account_id",
          "organization_id",
          "terms_available",
          "terms_required"
        ],
        "type": "object"
      },
      "TokenAuthorizationRequest": {
        "properties": { "authorization_token": { "type": "string" } },
        "type": "object"
      },
      "TokenAuthorizationResponse": {
        "properties": { "account": { "$ref": "#/components/schemas/Account" } },
        "type": "object"
      }
    },
    "securitySchemes": {
      "AccessToken": {
        "description": "Authorization: AccessToken {cluster-uuid}:{access-token}",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      },
      "Bearer": { "bearerFormat": "JWT", "scheme": "bearer", "type": "http" }
    }
  },
  "info": {
    "description": "Manage user subscriptions and clusters",
    "title": "Account Management Service API",
    "version": "0.0.1"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/accounts_mgmt/v1/access_token": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessTokenCfg" }
              }
            },
            "description": "access token from registries in docker format"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Cannot find registry"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Return access token generated from registries in docker format"
      }
    },
    "/api/accounts_mgmt/v1/accounts": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/fields" },
          { "$ref": "#/components/parameters/fetchLabels" },
          { "$ref": "#/components/parameters/fetchCapabilities" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountList" }
              }
            },
            "description": "A JSON array of account objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of accounts"
      },
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/dryRun" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Account" }
            }
          },
          "description": "Account data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            },
            "description": "Account can be created without dryRun parameter"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Account already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the account"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new account"
      }
    },
    "/api/accounts_mgmt/v1/accounts/{id}": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/fetchLabels" },
          { "$ref": "#/components/parameters/fetchCapabilities" },
          { "$ref": "#/components/parameters/fetchRhit" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            },
            "description": "Account found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No account with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get an account by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AccountPatchRequest" }
            }
          },
          "description": "Updated account data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            },
            "description": "Account updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No account with specified id exists"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Account already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating account"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update an account"
      }
    },
    "/api/accounts_mgmt/v1/accounts/{id}/labels": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/id" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LabelList" }
              }
            },
            "description": "A JSON array of label"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of labels"
      },
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Label" }
            }
          },
          "description": "Label data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Created or updated label successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new label or update an existing label"
      }
    },
    "/api/accounts_mgmt/v1/accounts/{id}/labels/{key}": {
      "delete": {
        "responses": {
          "204": { "description": "Label successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No label with specified key on specified organizations id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a label"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Labels found by key"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No label with specified key on specified organizations id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get subscription labels by label key"
      },
      "parameters": [
        { "$ref": "#/components/parameters/id" },
        { "$ref": "#/components/parameters/key" }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Label" }
            }
          },
          "description": "Label data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Created or updated label successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Label already exists and cannot be updated"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating organizations label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new label or update an existing label"
      }
    },
    "/api/accounts_mgmt/v1/certificates": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CertificatesRequest" }
            }
          },
          "description": "# The payload depends on the type of the requested certificate\nThe examples for supported types:\n* {\"type\": \"sca\", \"arch\": \"x86_64\"}\n",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Certificate" }
              }
            },
            "description": "The certificate associated with the organization"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "The certificate is not avaialbe for the organization"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }, { "AccessToken": [] }],
        "summary": "Fetch certificates of a particular type"
      }
    },
    "/api/accounts_mgmt/v1/cloud_resources": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CloudResourceList" }
              }
            },
            "description": "A JSON array of cloud resource objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of cloud resources"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CloudResource" }
            }
          },
          "description": "Cloud resource data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CloudResource" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Resource already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new cloud resource"
      }
    },
    "/api/accounts_mgmt/v1/cloud_resources/{id}": {
      "delete": {
        "responses": {
          "204": { "description": "Cloud resource successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No resource with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a cloud resource"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CloudResource" }
              }
            },
            "description": "Cloud resource found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No cloud resource with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a cloud resource"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CloudResource" }
            }
          },
          "description": "Updated cloud resource data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CloudResource" }
              }
            },
            "description": "Cloud resource updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No resource with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a cloud resource"
      }
    },
    "/api/accounts_mgmt/v1/cluster_authorizations": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterAuthorizationRequest"
              }
            }
          },
          "description": "Cluster and authorization data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterAuthorizationResponse"
                }
              }
            },
            "description": "The authorization is successful, the requested cluster has a valid subscription and is within resource limits."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "AMS subscription exists but is associated with another account"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "The limits for this subscription are exceeded."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Other cluster authorization error"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Authorizes new cluster creation against an exsiting RH Subscription."
      }
    },
    "/api/accounts_mgmt/v1/cluster_registrations": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRegistrationRequest"
              }
            }
          },
          "description": "Cluster and authorization data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterRegistrationResponse"
                }
              }
            },
            "description": "A cluster with the specified cluster_id exists and belongs to the user with the specified registry credential token"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterRegistrationResponse"
                }
              }
            },
            "description": "No cluster with the specified cluster exists, one was successfully created and associated with the account with the specified registry credential token"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Registry credential token is invalid"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Cluster with specified cluster_id already associated with another user"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "cluster_id provided is invalid"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Too many clusters have been associated with this user recently"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Other cluster registration error"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Finds or creates a cluster registration with a registy credential token and cluster ID"
      }
    },
    "/api/accounts_mgmt/v1/cluster_transfers": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClusterTransferList" }
              }
            },
            "description": "cluster transfer detected"
          },
          "204": {
            "description": "ClusterTransfer does not exist for a specific cluster"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }, { "AccessToken": [] }],
        "summary": "List cluster transfers - returns either an empty result set or a valid ClusterTransfer instance that is within a valid transfer window."
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterTransferRequest"
              }
            }
          },
          "description": "The contents of the cluster transfer creation request",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClusterTransfer" }
              }
            },
            "description": "the cluster transfer has been created"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Initiate cluster transfer."
      }
    },
    "/api/accounts_mgmt/v1/cluster_transfers/{id}": {
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterTransferPatchRequest"
              }
            }
          },
          "description": "Updated cluster transfer",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClusterTransfer" }
              }
            },
            "description": "Cluster transfer updated successfully"
          },
          "204": {
            "description": "ClusterTransfer does not exist for a specific cluster"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Conflict during cluster transfer update"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating cluster transfer"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update specific cluster transfer"
      }
    },
    "/api/accounts_mgmt/v1/config/skus": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SkuList" }
              }
            },
            "description": "A JSON array of sku objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of skus"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SKU" }
            }
          },
          "description": "Sku data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SKU" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Sku already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating sku"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new sku"
      }
    },
    "/api/accounts_mgmt/v1/config/skus/{id}": {
      "delete": {
        "responses": {
          "204": { "description": "Sku successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No sku with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the sku"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a sku"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SKU" }
              }
            },
            "description": "Sku found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No SKU with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a sku"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SKU" }
            }
          },
          "description": "Updated sku data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SKU" }
              }
            },
            "description": "Sku updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No sku with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating sku"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a Sku"
      }
    },
    "/api/accounts_mgmt/v1/current_account": {
      "get": {
        "parameters": [{ "$ref": "#/components/parameters/fetchLabels" }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            },
            "description": "Account found via JWT"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }, { "AccessToken": [] }],
        "summary": "Get the authenticated account"
      }
    },
    "/api/accounts_mgmt/v1/deleted_subscriptions": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedSubscriptionList"
                }
              }
            },
            "description": "A JSON array of deleted subscription objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }, { "AccessToken": [] }],
        "summary": "Returns a list of deleted subscriptions"
      }
    },
    "/api/accounts_mgmt/v1/errors": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorList" }
              }
            },
            "description": "A JSON array or errors"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "summary": "Returns a list of errors"
      },
      "parameters": [
        { "$ref": "#/components/parameters/page" },
        { "$ref": "#/components/parameters/size" },
        { "$ref": "#/components/parameters/search" }
      ]
    },
    "/api/accounts_mgmt/v1/errors/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Error found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No error with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "summary": "Get an error by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }]
    },
    "/api/accounts_mgmt/v1/feature_toggles/{id}/query": {
      "post": {
        "deprecated": true,
        "parameters": [{ "$ref": "#/components/parameters/id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureToggleQueryRequest"
              }
            }
          },
          "description": "The context of the query",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FeatureToggle" }
              }
            },
            "description": "Feature toggle found by id"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Query a feature toggle by id"
      }
    },
    "/api/accounts_mgmt/v1/labels": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LabelList" }
              }
            },
            "description": "A JSON array of label objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of labels"
      }
    },
    "/api/accounts_mgmt/v1/landing_page/self_service": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfServiceLandingPageSchema"
                }
              }
            },
            "description": "self service schema created"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a console.redhat.com landing page content JSON schema"
      }
    },
    "/api/accounts_mgmt/v1/metrics": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MetricsList" }
              }
            },
            "description": "A JSON array of metrics objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of metrics"
      },
      "parameters": [{ "$ref": "#/components/parameters/search" }]
    },
    "/api/accounts_mgmt/v1/notify": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NotificationRequest" }
            }
          },
          "description": "The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Notification created and queued to be sent soon"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Notify the owner of cluster/subscription"
      }
    },
    "/api/accounts_mgmt/v1/organizations": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/fetchLabels" },
          { "$ref": "#/components/parameters/fetchCapabilities" },
          { "$ref": "#/components/parameters/fields" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrganizationList" }
              }
            },
            "description": "A JSON array of organization objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of organizations"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Organization" }
            }
          },
          "description": "Organization data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Organization already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the organization"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new organization"
      }
    },
    "/api/accounts_mgmt/v1/organizations/{id}": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/id" },
          { "$ref": "#/components/parameters/fetchLabels" },
          { "$ref": "#/components/parameters/fetchCapabilities" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            },
            "description": "Organization found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get an organization by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationPatchRequest"
              }
            }
          },
          "description": "Updated organization data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Organization" }
              }
            },
            "description": "Organization updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating organization"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update an organization"
      }
    },
    "/api/accounts_mgmt/v1/organizations/{id}/labels": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/id" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LabelList" }
              }
            },
            "description": "A JSON array of label"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of labels"
      },
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Label" }
            }
          },
          "description": "Label data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Created or updated label successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new label or update an existing label"
      }
    },
    "/api/accounts_mgmt/v1/organizations/{id}/labels/{key}": {
      "delete": {
        "responses": {
          "204": { "description": "Label successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No label with specified key on specified organizations id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a label"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Labels found by key"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No label with specified key on specified organizations id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get subscription labels by label key"
      },
      "parameters": [
        { "$ref": "#/components/parameters/id" },
        { "$ref": "#/components/parameters/key" }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Label" }
            }
          },
          "description": "Label data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Created or updated label successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Label already exists and cannot be updated"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating organizations label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new label or update an existing label"
      }
    },
    "/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Summary" }
              }
            },
            "description": "A JSON array of metrics objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a summary of organizations clusters based on metrics"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }]
    },
    "/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/orgId" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupAssignmentList"
                }
              }
            },
            "description": "A JSON array of account groups"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of account group assignments for the given org"
      },
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/orgId" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupAssignment"
              }
            }
          },
          "description": "New AccountGroup data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupAssignment"
                }
              }
            },
            "description": "Created AccountGroupAssignment successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new AccountGroupAssignment"
      }
    },
    "/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments/{acctGrpAsgnId}": {
      "delete": {
        "responses": {
          "204": {
            "description": "Account group assignment successfully deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization or account group assignment with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the account group assignment"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete an account group assignment"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupAssignment"
                }
              }
            },
            "description": "Account group assignment found"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get account group assignment by id"
      },
      "parameters": [
        { "$ref": "#/components/parameters/orgId" },
        { "$ref": "#/components/parameters/acctGrpAsgnId" }
      ]
    },
    "/api/accounts_mgmt/v1/organizations/{orgId}/account_groups": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/orgId" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountGroupList" }
              }
            },
            "description": "A JSON array of account groups"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of account groups for the given org"
      },
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/orgId" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AccountGroupRequest" }
            }
          },
          "description": "New AccountGroup data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountGroup" }
              }
            },
            "description": "Created AccountGroup successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new AccountGroup"
      }
    },
    "/api/accounts_mgmt/v1/organizations/{orgId}/account_groups/{acctGrpId}": {
      "delete": {
        "responses": {
          "204": { "description": "Account group successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization or account group with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the account group"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete an account group"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountGroup" }
              }
            },
            "description": "Account group found"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization or account group with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get account group by id"
      },
      "parameters": [
        { "$ref": "#/components/parameters/orgId" },
        { "$ref": "#/components/parameters/acctGrpId" }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AccountGroupRequest" }
            }
          },
          "description": "Updated account group data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountGroup" }
              }
            },
            "description": "Account group updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No account group with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating account group"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update an account group"
      }
    },
    "/api/accounts_mgmt/v1/organizations/{orgId}/consumed_quota": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsumedQuotaList" }
              }
            },
            "description": "A JSON array of ConsumedQuota objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred when getting this resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of consumed quota for an organization"
      },
      "parameters": [
        { "$ref": "#/components/parameters/orgId" },
        { "$ref": "#/components/parameters/forceRecalc" }
      ]
    },
    "/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuotaCostList" }
              }
            },
            "description": "A JSON array of QuotaCost objects"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred when getting this resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a summary of quota cost"
      },
      "parameters": [
        { "$ref": "#/components/parameters/orgId" },
        { "$ref": "#/components/parameters/search" },
        { "$ref": "#/components/parameters/fetchRelatedResources" },
        { "$ref": "#/components/parameters/forceRecalc" },
        { "$ref": "#/components/parameters/fetchCloudAccounts" }
      ]
    },
    "/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/orgId" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResourceQuotaList" }
              }
            },
            "description": "A JSON array of ResourceQuota objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No organization with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred when getting this resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of resource quota objects"
      },
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/orgId" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResourceQuotaRequest" }
            }
          },
          "description": "Resource quota data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResourceQuota" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "ResourceQuota already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the resource quota"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new resource quota"
      }
    },
    "/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}": {
      "delete": {
        "responses": {
          "204": { "description": "Resource Quota successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No Resource Quota with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the Resource Quota"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a resource quota"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResourceQuota" }
              }
            },
            "description": "Resource quota found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No resource quota with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred when getting this resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a resource quota by id"
      },
      "parameters": [
        { "$ref": "#/components/parameters/orgId" },
        { "$ref": "#/components/parameters/quotaId" }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResourceQuotaRequest" }
            }
          },
          "description": "Updated resource quota data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResourceQuota" }
              }
            },
            "description": "Resource Quota updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No resource quota with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating resource quota"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a resource quota"
      }
    },
    "/api/accounts_mgmt/v1/plans": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PlanList" }
              }
            },
            "description": "Plans list"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get all plans"
      },
      "parameters": [
        { "$ref": "#/components/parameters/page" },
        { "$ref": "#/components/parameters/size" },
        { "$ref": "#/components/parameters/search" }
      ]
    },
    "/api/accounts_mgmt/v1/plans/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Plan" }
              }
            },
            "description": "Plan found"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No plan with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a plan by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }]
    },
    "/api/accounts_mgmt/v1/pull_secrets": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PullSecretRequest" }
            }
          },
          "description": "Identifier of the resource in the external service that this pull secret relates to",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessTokenCfg" }
              }
            },
            "description": "access token from registries in docker format"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Cannot find registry"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Return access token generated from registries in docker format"
      }
    },
    "/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}": {
      "delete": {
        "responses": {
          "204": { "description": "Pull secret successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to delete pull secret"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No Pull secret with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the pull secret"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a pull secret"
      },
      "parameters": [{ "$ref": "#/components/parameters/externalResourceId" }]
    },
    "/api/accounts_mgmt/v1/quota_cost": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuotaCostList" }
              }
            },
            "description": "A JSON array of QuotaCost objects"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred when getting this resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a summary of quota cost for the authenticated user"
      },
      "parameters": [
        { "$ref": "#/components/parameters/search" },
        { "$ref": "#/components/parameters/fetchRelatedResources" },
        { "$ref": "#/components/parameters/fetchCloudAccounts" }
      ]
    },
    "/api/accounts_mgmt/v1/quota_rules": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuotaRulesList" }
              }
            },
            "description": "A JSON array of quota rules objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of UHC product Quota Rules"
      },
      "parameters": [
        { "$ref": "#/components/parameters/page" },
        { "$ref": "#/components/parameters/size" },
        { "$ref": "#/components/parameters/search" }
      ]
    },
    "/api/accounts_mgmt/v1/quotas": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuotaList" }
              }
            },
            "description": "A JSON array of quota objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of quotas"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Quota" }
            }
          },
          "description": "Quota data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Quota" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Quota already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating quota"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new quota"
      }
    },
    "/api/accounts_mgmt/v1/quotas/{id}": {
      "delete": {
        "responses": {
          "204": { "description": "Quota successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No quota with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the quota"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a quota"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Quota" }
              }
            },
            "description": "Quota found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No quota with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a quota"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Quota" }
            }
          },
          "description": "Updated quota data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Quota" }
              }
            },
            "description": "Quota updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No quota with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating quota"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a quota"
      }
    },
    "/api/accounts_mgmt/v1/registries": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegistryList" }
              }
            },
            "description": "A JSON array of registry objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of registries"
      }
    },
    "/api/accounts_mgmt/v1/registries/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Registry" }
              }
            },
            "description": "Registry found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No registry with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get an registry by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }]
    },
    "/api/accounts_mgmt/v1/registry_credentials": {
      "get": {
        "description": "List Registry Credentials",
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryCredentialList"
                }
              }
            },
            "description": "A JSON array of RegistryCredential objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Not allowed to list RegistryCredentials"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        }
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegistryCredential" }
            }
          },
          "description": "Registry credential data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegistryCredential" }
              }
            },
            "description": "Registry credential created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Not allowed to create RegistryCredentials"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "A RegistryCredential with this type already exists for this user"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unable to create Registry Credential"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Request the creation of a registry credential"
      }
    },
    "/api/accounts_mgmt/v1/registry_credentials/{id}": {
      "delete": {
        "responses": {
          "204": { "description": "Registry credential successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No registry credential with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the registry credential"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a registry credential by id"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegistryCredential" }
              }
            },
            "description": "Registry credential found"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No registry credential with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a registry credentials by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryCredentialPatchRequest"
              }
            }
          },
          "description": "Updated registry credential data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegistryCredential" }
              }
            },
            "description": "Registry credential updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Not allowed to update registry credential or the specified field(s)"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No registry credential with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating registry credential"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a registry credential"
      }
    },
    "/api/accounts_mgmt/v1/reserved_resources": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservedResourceList"
                }
              }
            },
            "description": "A JSON array of reserved resource objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of reserved resources"
      },
      "parameters": [
        { "$ref": "#/components/parameters/page" },
        { "$ref": "#/components/parameters/size" },
        { "$ref": "#/components/parameters/search" },
        { "$ref": "#/components/parameters/orderBy" }
      ]
    },
    "/api/accounts_mgmt/v1/resource_quota": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResourceQuotaList" }
              }
            },
            "description": "A JSON array of ResourceQuota objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred when getting this resource"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of resource quota objects"
      },
      "parameters": [
        { "$ref": "#/components/parameters/page" },
        { "$ref": "#/components/parameters/size" },
        { "$ref": "#/components/parameters/search" },
        { "$ref": "#/components/parameters/orderBy" }
      ]
    },
    "/api/accounts_mgmt/v1/role_bindings": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleBindingList" }
              }
            },
            "description": "A JSON array of role binding objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of role bindings"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleBindingCreateRequest"
              }
            }
          },
          "description": "Role binding data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleBinding" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Role binding already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating role binding"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new role binding"
      }
    },
    "/api/accounts_mgmt/v1/role_bindings/{id}": {
      "delete": {
        "responses": {
          "204": { "description": "Role binding successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No role binding with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the role binding"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a role binding"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleBinding" }
              }
            },
            "description": "Role binding found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No role binding with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a role binding"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoleBindingRequest" }
            }
          },
          "description": "Updated role binding data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleBinding" }
              }
            },
            "description": "Role Binding updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No role binding with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating role binding"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a role binding"
      }
    },
    "/api/accounts_mgmt/v1/roles": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleList" }
              }
            },
            "description": "A JSON array of role objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of roles"
      },
      "parameters": [
        { "$ref": "#/components/parameters/page" },
        { "$ref": "#/components/parameters/size" },
        { "$ref": "#/components/parameters/search" }
      ]
    },
    "/api/accounts_mgmt/v1/roles/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Role" }
              }
            },
            "description": "Role found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No role with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a role by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }]
    },
    "/api/accounts_mgmt/v1/self_entitlement/{product}": {
      "parameters": [{ "$ref": "#/components/parameters/product" }],
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfEntitlementStatus"
                }
              }
            },
            "description": "the requested entitlement already exists"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfEntitlementStatus"
                }
              }
            },
            "description": "the requested entitlement has been created or renewed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Cannot find account or organization"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create or renew the entitlement to support a product for the user's organization."
      }
    },
    "/api/accounts_mgmt/v1/sku_rules": {
      "get": {
        "parameters": [{ "$ref": "#/components/parameters/search" }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SkuRulesList" }
              }
            },
            "description": "A JSON array of sku rules objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of UHC product SKU Rules"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SkuRules" }
            }
          },
          "description": "Sku rule data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SkuRules" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Sku rule already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating sku rule"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new sku rule"
      }
    },
    "/api/accounts_mgmt/v1/sku_rules/{id}": {
      "delete": {
        "responses": {
          "204": { "description": "Sku rule successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No sku rule with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the sku rule"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a sku rule"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SkuRules" }
              }
            },
            "description": "sku rules found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No sku rules with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a sku rules by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SkuRules" }
            }
          },
          "description": "Updated sku rule data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SkuRules" }
              }
            },
            "description": "Sku rule updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No sku rule with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating sku rule"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a sku rule"
      }
    },
    "/api/accounts_mgmt/v1/skus": {
      "get": {
        "deprecated": true,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SkuList" }
              }
            },
            "description": "A JSON array of sku objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of UHC product SKUs"
      },
      "parameters": [{ "$ref": "#/components/parameters/search" }]
    },
    "/api/accounts_mgmt/v1/skus/{id}": {
      "get": {
        "deprecated": true,
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SKU" }
              }
            },
            "description": "sku found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No sku with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a sku by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }]
    },
    "/api/accounts_mgmt/v1/subscriptions": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/fetchAccounts" },
          { "$ref": "#/components/parameters/fetchLabels" },
          { "$ref": "#/components/parameters/fetchCapabilities" },
          { "$ref": "#/components/parameters/fields" },
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/labels" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SubscriptionList" }
              }
            },
            "description": "A JSON array of subscription objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }, { "AccessToken": [] }],
        "summary": "Returns a list of subscriptions"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCreateRequest"
              }
            }
          },
          "description": "Subscription Creation data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Subscription" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Subscription already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating subscription"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new subscription"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{id}": {
      "delete": {
        "parameters": [{ "$ref": "#/components/parameters/id" }],
        "responses": {
          "200": { "description": "Subscription deprovisioned by id" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No subscription with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Deletes a subscription by id"
      },
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/id" },
          { "$ref": "#/components/parameters/fetchAccounts" },
          { "$ref": "#/components/parameters/fetchLabels" },
          { "$ref": "#/components/parameters/fetchCapabilities" },
          { "$ref": "#/components/parameters/fetchCpuAndSocket" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Subscription" }
              }
            },
            "description": "Subscription found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No subscription with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a subscription by id"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPatchRequest"
              }
            }
          },
          "description": "Updated subscription data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Subscription" }
              }
            },
            "description": "Subscription updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Not allowed to update subscriptions or the specified field(s)"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No subscription with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating subscription"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a subscription"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{id}/labels": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/id" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LabelList" }
              }
            },
            "description": "A JSON array of label"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of labels"
      },
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Label" }
            }
          },
          "description": "Label data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Created or updated label successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new label or update an existing label"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}": {
      "delete": {
        "responses": {
          "204": { "description": "Label successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No label with specified key on specified subscription id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a label"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Labels found by key"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No label with specified key on specified subscription id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get subscription labels by label key"
      },
      "parameters": [
        { "$ref": "#/components/parameters/id" },
        { "$ref": "#/components/parameters/key" }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Label" }
            }
          },
          "description": "Label data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            },
            "description": "Created or updated label successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Label already exists and cannot be updated"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error updating subscription label"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new label or update an existing label"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{id}/metrics/{metric_name}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionMetricList"
                }
              }
            },
            "description": "Metrics' data"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Metric name is invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get subscription's metrics by metric name"
      },
      "parameters": [
        { "$ref": "#/components/parameters/id" },
        { "$ref": "#/components/parameters/metricName" },
        { "$ref": "#/components/parameters/metricSearch" },
        { "$ref": "#/components/parameters/fields" }
      ]
    },
    "/api/accounts_mgmt/v1/subscriptions/{id}/notify": {
      "parameters": [{ "$ref": "#/components/parameters/id" }],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NotificationRequest" }
            }
          },
          "description": "The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Notification created and queued to be sent soon"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Notify the owner of a subscription"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/id" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservedResourceList"
                }
              }
            },
            "description": "A JSON array of reserved resource objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of reserved resources"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{id}/support_cases": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" }
        ],
        "responses": {
          "200": { "description": "A JSON array of support cases objects" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of open support creates opened against the external cluster id of this subscrption"
      },
      "parameters": [{ "$ref": "#/components/parameters/id" }]
    },
    "/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/subId" },
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/fields" },
          { "$ref": "#/components/parameters/orderBy" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountList" }
              }
            },
            "description": "A JSON array of account objects that are notification contacts for this subscription"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Returns a list of notification contacts for the given subscription"
      },
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/subId" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationContactCreateRequest"
              }
            }
          },
          "description": "Add a notification contact by an account's username",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Account" }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Notification contact already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating notification contact"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Add an account as a notification contact to this subscription"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}": {
      "delete": {
        "parameters": [
          { "$ref": "#/components/parameters/subId" },
          { "$ref": "#/components/parameters/accountId" }
        ],
        "responses": {
          "200": {
            "description": "Notification contact deleted by subscription and account id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No notification contact with specified subscription and account id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Deletes a notification contact by subscription and account id"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}": {
      "delete": {
        "responses": {
          "204": { "description": "Reserved resources deleted by id" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No reserved resources with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete reserved resources by id"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReservedResource" }
              }
            },
            "description": "Reserved resources found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No reserved resources with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get reserved resources by id"
      },
      "parameters": [
        { "$ref": "#/components/parameters/subId" },
        { "$ref": "#/components/parameters/reservedResourceId" }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservedResourcePatchRequest"
              }
            }
          },
          "description": "Updated reserved resource data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReservedResource" }
              }
            },
            "description": "Reserved resources updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No reserved resources with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Update a reserved resource"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings": {
      "get": {
        "parameters": [
          { "$ref": "#/components/parameters/page" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/search" },
          { "$ref": "#/components/parameters/orderBy" },
          { "$ref": "#/components/parameters/fetchAccounts" }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionRoleBindingList"
                }
              }
            },
            "description": "Subscription role bindings found, or none exist"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get subscription role bindings"
      },
      "parameters": [{ "$ref": "#/components/parameters/subId" }],
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionRoleBindingCreateRequest"
              }
            }
          },
          "description": "Subscription role binding data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionRoleBinding"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Subscription role binding already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred creating the subscription role binding"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Create a new subscription role binding"
      }
    },
    "/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings/{id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "Subscription role binding successfully deleted"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No Subscription Role Binding with specified Id is accessible"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the Subscription Role Binding"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a subscription role binding"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionRoleBinding"
                }
              }
            },
            "description": "Subscription Role Binding found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No Subscription Role Binding with the specified id is accessible"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Get a Subscription Role Binding by id"
      },
      "parameters": [
        { "$ref": "#/components/parameters/id" },
        { "$ref": "#/components/parameters/subId" }
      ]
    },
    "/api/accounts_mgmt/v1/support_cases": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SupportCasesRequest" }
            }
          },
          "description": "The contents of the support case to be created",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportCasesCreatedResponse"
                }
              }
            },
            "description": "Support case created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "create a support case for the subscription"
      }
    },
    "/api/accounts_mgmt/v1/support_cases/{caseId}": {
      "delete": {
        "responses": {
          "204": { "description": "Support case successfully deleted" },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "No support case with specified case id on specified subscription id exists"
          },
          "405": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Not allowed to close a case that is already closed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "An unexpected error occurred deleting the support case"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Delete a support case"
      },
      "parameters": [{ "$ref": "#/components/parameters/caseId" }]
    },
    "/api/accounts_mgmt/v1/token_authorization": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenAuthorizationRequest"
              }
            }
          },
          "description": "Token authorization data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenAuthorizationResponse"
                }
              }
            },
            "description": "The account belongs to the user with the specified registry credential token"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Registry credential token is invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Other token authorization error"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Finds the account owner of the provided token"
      }
    },
    "/api/authorizations/v1/access_review": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AccessReview" }
            }
          },
          "description": "Access review data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessReviewResponse"
                }
              }
            },
            "description": "Review successfully generated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unsupported action, non-existent resource type, or non-existent account"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating access review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Review an account's access to perform an action on a particular resource or resource type"
      }
    },
    "/api/authorizations/v1/capability_review": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CapabilityReviewRequest"
              }
            }
          },
          "description": "Capability review data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CapabilityReview" }
              }
            },
            "description": "Successful review"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform capability reviews"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating capability review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Review an account's capabilities"
      }
    },
    "/api/authorizations/v1/export_control_review": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportControlReviewRequest"
              }
            }
          },
          "description": "Export control review data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExportControlReview" }
              }
            },
            "description": "Successful review"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating access review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n"
      }
    },
    "/api/authorizations/v1/feature_review": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FeatureReview" }
            }
          },
          "description": "Feature review data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureReviewResponse"
                }
              }
            },
            "description": "Review successfully generated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating feature review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Review feature to perform an action on it such as toggle a feature on/off"
      }
    },
    "/api/authorizations/v1/resource_review": {
      "post": {
        "deprecated": true,
        "parameters": [{ "$ref": "#/components/parameters/reduceClusterList" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResourceReviewRequest" }
            }
          },
          "description": "Resource review data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResourceReview" }
              }
            },
            "description": "Successful review"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform resource reviews"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unsupported action or non-existent resource type"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating access review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids."
      }
    },
    "/api/authorizations/v1/self_access_review": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SelfAccessReview" }
            }
          },
          "description": "Self access review data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessReviewResponse"
                }
              }
            },
            "description": "Review successfully generated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unsupported action or non-existent resource type"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating access review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Review your ability to perform an action on a particular resource or resource type"
      }
    },
    "/api/authorizations/v1/self_feature_review": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SelfFeatureReview" }
            }
          },
          "description": "Self feature review data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureReviewResponse"
                }
              }
            },
            "description": "Review successfully generated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating feature review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Review your ability to toggle a feature"
      }
    },
    "/api/authorizations/v1/self_resource_review": {
      "post": {
        "parameters": [{ "$ref": "#/components/parameters/reduceClusterList" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfResourceReviewRequest"
              }
            }
          },
          "description": "Self resource review data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SelfResourceReview" }
              }
            },
            "description": "Successful review"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform self resource reviews"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unsupported action or non-existent resource type"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating access review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids."
      }
    },
    "/api/authorizations/v1/self_terms_review": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SelfTermsReview" }
            }
          },
          "description": "Data to check self terms for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TermsReviewResponse" }
              }
            },
            "description": "Review successfully generated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unsupported action or non-existent resource type"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating terms review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Review your status of Terms"
      }
    },
    "/api/authorizations/v1/terms_review": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TermsReview" }
            }
          },
          "description": "Data to check terms for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TermsReviewResponse" }
              }
            },
            "description": "Review successfully generated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unsupported action, non-existent resource type, or non-existent account"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            },
            "description": "Unexpected error occurred while generating terms review"
          }
        },
        "security": [{ "Bearer": [] }],
        "summary": "Review an account's status of Terms"
      }
    }
  },
  "servers": [
    { "description": "current domain", "url": "http://localhost:14321" },
    {
      "description": "Main (production) server",
      "url": "https://api.openshift.com"
    },
    {
      "description": "Staging server",
      "url": "https://api.stage.openshift.com"
    }
  ]
}

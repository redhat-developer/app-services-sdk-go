// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package petstoremgmtclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that PetsApiMock does implement PetsApi.
// If this is not the case, regenerate this file with moq.
var _ PetsApi = &PetsApiMock{}

// PetsApiMock is a mock implementation of PetsApi.
//
// 	func TestSomethingThatUsesPetsApi(t *testing.T) {
//
// 		// make and configure a mocked PetsApi
// 		mockedPetsApi := &PetsApiMock{
// 			CreatePetsFunc: func(ctx _context.Context) ApiCreatePetsRequest {
// 				panic("mock out the CreatePets method")
// 			},
// 			CreatePetsExecuteFunc: func(r ApiCreatePetsRequest) (*_nethttp.Response, error) {
// 				panic("mock out the CreatePetsExecute method")
// 			},
// 			ListPetsFunc: func(ctx _context.Context) ApiListPetsRequest {
// 				panic("mock out the ListPets method")
// 			},
// 			ListPetsExecuteFunc: func(r ApiListPetsRequest) ([]Pet, *_nethttp.Response, error) {
// 				panic("mock out the ListPetsExecute method")
// 			},
// 			ShowPetByIdFunc: func(ctx _context.Context, petId string) ApiShowPetByIdRequest {
// 				panic("mock out the ShowPetById method")
// 			},
// 			ShowPetByIdExecuteFunc: func(r ApiShowPetByIdRequest) (Pet, *_nethttp.Response, error) {
// 				panic("mock out the ShowPetByIdExecute method")
// 			},
// 		}
//
// 		// use mockedPetsApi in code that requires PetsApi
// 		// and then make assertions.
//
// 	}
type PetsApiMock struct {
	// CreatePetsFunc mocks the CreatePets method.
	CreatePetsFunc func(ctx _context.Context) ApiCreatePetsRequest

	// CreatePetsExecuteFunc mocks the CreatePetsExecute method.
	CreatePetsExecuteFunc func(r ApiCreatePetsRequest) (*_nethttp.Response, error)

	// ListPetsFunc mocks the ListPets method.
	ListPetsFunc func(ctx _context.Context) ApiListPetsRequest

	// ListPetsExecuteFunc mocks the ListPetsExecute method.
	ListPetsExecuteFunc func(r ApiListPetsRequest) ([]Pet, *_nethttp.Response, error)

	// ShowPetByIdFunc mocks the ShowPetById method.
	ShowPetByIdFunc func(ctx _context.Context, petId string) ApiShowPetByIdRequest

	// ShowPetByIdExecuteFunc mocks the ShowPetByIdExecute method.
	ShowPetByIdExecuteFunc func(r ApiShowPetByIdRequest) (Pet, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreatePets holds details about calls to the CreatePets method.
		CreatePets []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreatePetsExecute holds details about calls to the CreatePetsExecute method.
		CreatePetsExecute []struct {
			// R is the r argument value.
			R ApiCreatePetsRequest
		}
		// ListPets holds details about calls to the ListPets method.
		ListPets []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListPetsExecute holds details about calls to the ListPetsExecute method.
		ListPetsExecute []struct {
			// R is the r argument value.
			R ApiListPetsRequest
		}
		// ShowPetById holds details about calls to the ShowPetById method.
		ShowPetById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// PetId is the petId argument value.
			PetId string
		}
		// ShowPetByIdExecute holds details about calls to the ShowPetByIdExecute method.
		ShowPetByIdExecute []struct {
			// R is the r argument value.
			R ApiShowPetByIdRequest
		}
	}
	lockCreatePets         sync.RWMutex
	lockCreatePetsExecute  sync.RWMutex
	lockListPets           sync.RWMutex
	lockListPetsExecute    sync.RWMutex
	lockShowPetById        sync.RWMutex
	lockShowPetByIdExecute sync.RWMutex
}

// CreatePets calls CreatePetsFunc.
func (mock *PetsApiMock) CreatePets(ctx _context.Context) ApiCreatePetsRequest {
	if mock.CreatePetsFunc == nil {
		panic("PetsApiMock.CreatePetsFunc: method is nil but PetsApi.CreatePets was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreatePets.Lock()
	mock.calls.CreatePets = append(mock.calls.CreatePets, callInfo)
	mock.lockCreatePets.Unlock()
	return mock.CreatePetsFunc(ctx)
}

// CreatePetsCalls gets all the calls that were made to CreatePets.
// Check the length with:
//     len(mockedPetsApi.CreatePetsCalls())
func (mock *PetsApiMock) CreatePetsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreatePets.RLock()
	calls = mock.calls.CreatePets
	mock.lockCreatePets.RUnlock()
	return calls
}

// CreatePetsExecute calls CreatePetsExecuteFunc.
func (mock *PetsApiMock) CreatePetsExecute(r ApiCreatePetsRequest) (*_nethttp.Response, error) {
	if mock.CreatePetsExecuteFunc == nil {
		panic("PetsApiMock.CreatePetsExecuteFunc: method is nil but PetsApi.CreatePetsExecute was just called")
	}
	callInfo := struct {
		R ApiCreatePetsRequest
	}{
		R: r,
	}
	mock.lockCreatePetsExecute.Lock()
	mock.calls.CreatePetsExecute = append(mock.calls.CreatePetsExecute, callInfo)
	mock.lockCreatePetsExecute.Unlock()
	return mock.CreatePetsExecuteFunc(r)
}

// CreatePetsExecuteCalls gets all the calls that were made to CreatePetsExecute.
// Check the length with:
//     len(mockedPetsApi.CreatePetsExecuteCalls())
func (mock *PetsApiMock) CreatePetsExecuteCalls() []struct {
	R ApiCreatePetsRequest
} {
	var calls []struct {
		R ApiCreatePetsRequest
	}
	mock.lockCreatePetsExecute.RLock()
	calls = mock.calls.CreatePetsExecute
	mock.lockCreatePetsExecute.RUnlock()
	return calls
}

// ListPets calls ListPetsFunc.
func (mock *PetsApiMock) ListPets(ctx _context.Context) ApiListPetsRequest {
	if mock.ListPetsFunc == nil {
		panic("PetsApiMock.ListPetsFunc: method is nil but PetsApi.ListPets was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListPets.Lock()
	mock.calls.ListPets = append(mock.calls.ListPets, callInfo)
	mock.lockListPets.Unlock()
	return mock.ListPetsFunc(ctx)
}

// ListPetsCalls gets all the calls that were made to ListPets.
// Check the length with:
//     len(mockedPetsApi.ListPetsCalls())
func (mock *PetsApiMock) ListPetsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListPets.RLock()
	calls = mock.calls.ListPets
	mock.lockListPets.RUnlock()
	return calls
}

// ListPetsExecute calls ListPetsExecuteFunc.
func (mock *PetsApiMock) ListPetsExecute(r ApiListPetsRequest) ([]Pet, *_nethttp.Response, error) {
	if mock.ListPetsExecuteFunc == nil {
		panic("PetsApiMock.ListPetsExecuteFunc: method is nil but PetsApi.ListPetsExecute was just called")
	}
	callInfo := struct {
		R ApiListPetsRequest
	}{
		R: r,
	}
	mock.lockListPetsExecute.Lock()
	mock.calls.ListPetsExecute = append(mock.calls.ListPetsExecute, callInfo)
	mock.lockListPetsExecute.Unlock()
	return mock.ListPetsExecuteFunc(r)
}

// ListPetsExecuteCalls gets all the calls that were made to ListPetsExecute.
// Check the length with:
//     len(mockedPetsApi.ListPetsExecuteCalls())
func (mock *PetsApiMock) ListPetsExecuteCalls() []struct {
	R ApiListPetsRequest
} {
	var calls []struct {
		R ApiListPetsRequest
	}
	mock.lockListPetsExecute.RLock()
	calls = mock.calls.ListPetsExecute
	mock.lockListPetsExecute.RUnlock()
	return calls
}

// ShowPetById calls ShowPetByIdFunc.
func (mock *PetsApiMock) ShowPetById(ctx _context.Context, petId string) ApiShowPetByIdRequest {
	if mock.ShowPetByIdFunc == nil {
		panic("PetsApiMock.ShowPetByIdFunc: method is nil but PetsApi.ShowPetById was just called")
	}
	callInfo := struct {
		Ctx   _context.Context
		PetId string
	}{
		Ctx:   ctx,
		PetId: petId,
	}
	mock.lockShowPetById.Lock()
	mock.calls.ShowPetById = append(mock.calls.ShowPetById, callInfo)
	mock.lockShowPetById.Unlock()
	return mock.ShowPetByIdFunc(ctx, petId)
}

// ShowPetByIdCalls gets all the calls that were made to ShowPetById.
// Check the length with:
//     len(mockedPetsApi.ShowPetByIdCalls())
func (mock *PetsApiMock) ShowPetByIdCalls() []struct {
	Ctx   _context.Context
	PetId string
} {
	var calls []struct {
		Ctx   _context.Context
		PetId string
	}
	mock.lockShowPetById.RLock()
	calls = mock.calls.ShowPetById
	mock.lockShowPetById.RUnlock()
	return calls
}

// ShowPetByIdExecute calls ShowPetByIdExecuteFunc.
func (mock *PetsApiMock) ShowPetByIdExecute(r ApiShowPetByIdRequest) (Pet, *_nethttp.Response, error) {
	if mock.ShowPetByIdExecuteFunc == nil {
		panic("PetsApiMock.ShowPetByIdExecuteFunc: method is nil but PetsApi.ShowPetByIdExecute was just called")
	}
	callInfo := struct {
		R ApiShowPetByIdRequest
	}{
		R: r,
	}
	mock.lockShowPetByIdExecute.Lock()
	mock.calls.ShowPetByIdExecute = append(mock.calls.ShowPetByIdExecute, callInfo)
	mock.lockShowPetByIdExecute.Unlock()
	return mock.ShowPetByIdExecuteFunc(r)
}

// ShowPetByIdExecuteCalls gets all the calls that were made to ShowPetByIdExecute.
// Check the length with:
//     len(mockedPetsApi.ShowPetByIdExecuteCalls())
func (mock *PetsApiMock) ShowPetByIdExecuteCalls() []struct {
	R ApiShowPetByIdRequest
} {
	var calls []struct {
		R ApiShowPetByIdRequest
	}
	mock.lockShowPetByIdExecute.RLock()
	calls = mock.calls.ShowPetByIdExecute
	mock.lockShowPetByIdExecute.RUnlock()
	return calls
}

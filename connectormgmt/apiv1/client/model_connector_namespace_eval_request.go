/*
 * Connector Service Fleet Manager
 *
 * Connector Service Fleet Manager is a Rest API to manage connectors.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorNamespaceEvalRequest An evaluation connector namespace create request
type ConnectorNamespaceEvalRequest struct {

	Name string `json:"name"`

	Annotations *[]ConnectorNamespaceRequestMetaAnnotations `json:"annotations,omitempty"`

}

// NewConnectorNamespaceEvalRequest instantiates a new ConnectorNamespaceEvalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorNamespaceEvalRequest(name string) *ConnectorNamespaceEvalRequest {
	this := ConnectorNamespaceEvalRequest{}
	this.Name = name
	return &this
}

// NewConnectorNamespaceEvalRequestWithDefaults instantiates a new ConnectorNamespaceEvalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorNamespaceEvalRequestWithDefaults() *ConnectorNamespaceEvalRequest {
	this := ConnectorNamespaceEvalRequest{}



	return &this
}


// GetName returns the Name field value
func (o *ConnectorNamespaceEvalRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectorNamespaceEvalRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectorNamespaceEvalRequest) SetName(v string) {
	o.Name = v
}


// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *ConnectorNamespaceEvalRequest) GetAnnotations() []ConnectorNamespaceRequestMetaAnnotations {
	if o == nil || o.Annotations == nil {
		var ret []ConnectorNamespaceRequestMetaAnnotations
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNamespaceEvalRequest) GetAnnotationsOk() (*[]ConnectorNamespaceRequestMetaAnnotations, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *ConnectorNamespaceEvalRequest) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []ConnectorNamespaceRequestMetaAnnotations and assigns it to the Annotations field.
func (o *ConnectorNamespaceEvalRequest) SetAnnotations(v []ConnectorNamespaceRequestMetaAnnotations) {
	o.Annotations = &v
}


func (o ConnectorNamespaceEvalRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if true {
		toSerialize["name"] = o.Name
	}
    
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
    
	return json.Marshal(toSerialize)
}

type NullableConnectorNamespaceEvalRequest struct {
	value *ConnectorNamespaceEvalRequest
	isSet bool
}

func (v NullableConnectorNamespaceEvalRequest) Get() *ConnectorNamespaceEvalRequest {
	return v.value
}

func (v *NullableConnectorNamespaceEvalRequest) Set(val *ConnectorNamespaceEvalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorNamespaceEvalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorNamespaceEvalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorNamespaceEvalRequest(val *ConnectorNamespaceEvalRequest) *NullableConnectorNamespaceEvalRequest {
	return &NullableConnectorNamespaceEvalRequest{value: val, isSet: true}
}

func (v NullableConnectorNamespaceEvalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorNamespaceEvalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


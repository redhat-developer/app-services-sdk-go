/*
 * Connector Service Fleet Manager
 *
 * Connector Service Fleet Manager is a Rest API to manage connectors.
 *
 * API version: 0.0.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorCluster Schema for the request to update a data plane cluster's status
type ConnectorCluster struct {

	Id *string `json:"id,omitempty"`

	Kind *string `json:"kind,omitempty"`

	Href *string `json:"href,omitempty"`

	Metadata *ConnectorClusterAllOfMetadata `json:"metadata,omitempty"`

	Status *string `json:"status,omitempty"`

}

// NewConnectorCluster instantiates a new ConnectorCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorCluster() *ConnectorCluster {
	this := ConnectorCluster{}
	return &this
}

// NewConnectorClusterWithDefaults instantiates a new ConnectorCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorClusterWithDefaults() *ConnectorCluster {
	this := ConnectorCluster{}






	return &this
}


// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectorCluster) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorCluster) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectorCluster) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectorCluster) SetId(v string) {
	o.Id = &v
}


// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ConnectorCluster) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorCluster) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ConnectorCluster) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ConnectorCluster) SetKind(v string) {
	o.Kind = &v
}


// GetHref returns the Href field value if set, zero value otherwise.
func (o *ConnectorCluster) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorCluster) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ConnectorCluster) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ConnectorCluster) SetHref(v string) {
	o.Href = &v
}


// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ConnectorCluster) GetMetadata() ConnectorClusterAllOfMetadata {
	if o == nil || o.Metadata == nil {
		var ret ConnectorClusterAllOfMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorCluster) GetMetadataOk() (*ConnectorClusterAllOfMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ConnectorCluster) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConnectorClusterAllOfMetadata and assigns it to the Metadata field.
func (o *ConnectorCluster) SetMetadata(v ConnectorClusterAllOfMetadata) {
	o.Metadata = &v
}


// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectorCluster) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorCluster) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectorCluster) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectorCluster) SetStatus(v string) {
	o.Status = &v
}


func (o ConnectorCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
    
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
    
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
    
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
    
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
    
	return json.Marshal(toSerialize)
}

type NullableConnectorCluster struct {
	value *ConnectorCluster
	isSet bool
}

func (v NullableConnectorCluster) Get() *ConnectorCluster {
	return v.value
}

func (v *NullableConnectorCluster) Set(val *ConnectorCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorCluster(val *ConnectorCluster) *NullableConnectorCluster {
	return &NullableConnectorCluster{value: val, isSet: true}
}

func (v NullableConnectorCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


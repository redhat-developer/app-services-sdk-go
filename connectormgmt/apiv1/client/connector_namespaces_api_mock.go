// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package connectormgmtclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that ConnectorNamespacesApiMock does implement ConnectorNamespacesApi.
// If this is not the case, regenerate this file with moq.
var _ ConnectorNamespacesApi = &ConnectorNamespacesApiMock{}

// ConnectorNamespacesApiMock is a mock implementation of ConnectorNamespacesApi.
//
// 	func TestSomethingThatUsesConnectorNamespacesApi(t *testing.T) {
//
// 		// make and configure a mocked ConnectorNamespacesApi
// 		mockedConnectorNamespacesApi := &ConnectorNamespacesApiMock{
// 			CreateConnectorNamespaceFunc: func(ctx _context.Context) ApiCreateConnectorNamespaceRequest {
// 				panic("mock out the CreateConnectorNamespace method")
// 			},
// 			CreateConnectorNamespaceExecuteFunc: func(r ApiCreateConnectorNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error) {
// 				panic("mock out the CreateConnectorNamespaceExecute method")
// 			},
// 			CreateEvaluationNamespaceFunc: func(ctx _context.Context) ApiCreateEvaluationNamespaceRequest {
// 				panic("mock out the CreateEvaluationNamespace method")
// 			},
// 			CreateEvaluationNamespaceExecuteFunc: func(r ApiCreateEvaluationNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error) {
// 				panic("mock out the CreateEvaluationNamespaceExecute method")
// 			},
// 			DeleteConnectorNamespaceFunc: func(ctx _context.Context, connectorNamespaceId string) ApiDeleteConnectorNamespaceRequest {
// 				panic("mock out the DeleteConnectorNamespace method")
// 			},
// 			DeleteConnectorNamespaceExecuteFunc: func(r ApiDeleteConnectorNamespaceRequest) (Error, *_nethttp.Response, error) {
// 				panic("mock out the DeleteConnectorNamespaceExecute method")
// 			},
// 			GetConnectorNamespaceFunc: func(ctx _context.Context, connectorNamespaceId string) ApiGetConnectorNamespaceRequest {
// 				panic("mock out the GetConnectorNamespace method")
// 			},
// 			GetConnectorNamespaceExecuteFunc: func(r ApiGetConnectorNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error) {
// 				panic("mock out the GetConnectorNamespaceExecute method")
// 			},
// 			ListConnectorNamespacesFunc: func(ctx _context.Context) ApiListConnectorNamespacesRequest {
// 				panic("mock out the ListConnectorNamespaces method")
// 			},
// 			ListConnectorNamespacesExecuteFunc: func(r ApiListConnectorNamespacesRequest) (ConnectorNamespaceList, *_nethttp.Response, error) {
// 				panic("mock out the ListConnectorNamespacesExecute method")
// 			},
// 			UpdateConnectorNamespaceByIdFunc: func(ctx _context.Context, connectorNamespaceId string) ApiUpdateConnectorNamespaceByIdRequest {
// 				panic("mock out the UpdateConnectorNamespaceById method")
// 			},
// 			UpdateConnectorNamespaceByIdExecuteFunc: func(r ApiUpdateConnectorNamespaceByIdRequest) (*_nethttp.Response, error) {
// 				panic("mock out the UpdateConnectorNamespaceByIdExecute method")
// 			},
// 		}
//
// 		// use mockedConnectorNamespacesApi in code that requires ConnectorNamespacesApi
// 		// and then make assertions.
//
// 	}
type ConnectorNamespacesApiMock struct {
	// CreateConnectorNamespaceFunc mocks the CreateConnectorNamespace method.
	CreateConnectorNamespaceFunc func(ctx _context.Context) ApiCreateConnectorNamespaceRequest

	// CreateConnectorNamespaceExecuteFunc mocks the CreateConnectorNamespaceExecute method.
	CreateConnectorNamespaceExecuteFunc func(r ApiCreateConnectorNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error)

	// CreateEvaluationNamespaceFunc mocks the CreateEvaluationNamespace method.
	CreateEvaluationNamespaceFunc func(ctx _context.Context) ApiCreateEvaluationNamespaceRequest

	// CreateEvaluationNamespaceExecuteFunc mocks the CreateEvaluationNamespaceExecute method.
	CreateEvaluationNamespaceExecuteFunc func(r ApiCreateEvaluationNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error)

	// DeleteConnectorNamespaceFunc mocks the DeleteConnectorNamespace method.
	DeleteConnectorNamespaceFunc func(ctx _context.Context, connectorNamespaceId string) ApiDeleteConnectorNamespaceRequest

	// DeleteConnectorNamespaceExecuteFunc mocks the DeleteConnectorNamespaceExecute method.
	DeleteConnectorNamespaceExecuteFunc func(r ApiDeleteConnectorNamespaceRequest) (Error, *_nethttp.Response, error)

	// GetConnectorNamespaceFunc mocks the GetConnectorNamespace method.
	GetConnectorNamespaceFunc func(ctx _context.Context, connectorNamespaceId string) ApiGetConnectorNamespaceRequest

	// GetConnectorNamespaceExecuteFunc mocks the GetConnectorNamespaceExecute method.
	GetConnectorNamespaceExecuteFunc func(r ApiGetConnectorNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error)

	// ListConnectorNamespacesFunc mocks the ListConnectorNamespaces method.
	ListConnectorNamespacesFunc func(ctx _context.Context) ApiListConnectorNamespacesRequest

	// ListConnectorNamespacesExecuteFunc mocks the ListConnectorNamespacesExecute method.
	ListConnectorNamespacesExecuteFunc func(r ApiListConnectorNamespacesRequest) (ConnectorNamespaceList, *_nethttp.Response, error)

	// UpdateConnectorNamespaceByIdFunc mocks the UpdateConnectorNamespaceById method.
	UpdateConnectorNamespaceByIdFunc func(ctx _context.Context, connectorNamespaceId string) ApiUpdateConnectorNamespaceByIdRequest

	// UpdateConnectorNamespaceByIdExecuteFunc mocks the UpdateConnectorNamespaceByIdExecute method.
	UpdateConnectorNamespaceByIdExecuteFunc func(r ApiUpdateConnectorNamespaceByIdRequest) (*_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateConnectorNamespace holds details about calls to the CreateConnectorNamespace method.
		CreateConnectorNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateConnectorNamespaceExecute holds details about calls to the CreateConnectorNamespaceExecute method.
		CreateConnectorNamespaceExecute []struct {
			// R is the r argument value.
			R ApiCreateConnectorNamespaceRequest
		}
		// CreateEvaluationNamespace holds details about calls to the CreateEvaluationNamespace method.
		CreateEvaluationNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateEvaluationNamespaceExecute holds details about calls to the CreateEvaluationNamespaceExecute method.
		CreateEvaluationNamespaceExecute []struct {
			// R is the r argument value.
			R ApiCreateEvaluationNamespaceRequest
		}
		// DeleteConnectorNamespace holds details about calls to the DeleteConnectorNamespace method.
		DeleteConnectorNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorNamespaceId is the connectorNamespaceId argument value.
			ConnectorNamespaceId string
		}
		// DeleteConnectorNamespaceExecute holds details about calls to the DeleteConnectorNamespaceExecute method.
		DeleteConnectorNamespaceExecute []struct {
			// R is the r argument value.
			R ApiDeleteConnectorNamespaceRequest
		}
		// GetConnectorNamespace holds details about calls to the GetConnectorNamespace method.
		GetConnectorNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorNamespaceId is the connectorNamespaceId argument value.
			ConnectorNamespaceId string
		}
		// GetConnectorNamespaceExecute holds details about calls to the GetConnectorNamespaceExecute method.
		GetConnectorNamespaceExecute []struct {
			// R is the r argument value.
			R ApiGetConnectorNamespaceRequest
		}
		// ListConnectorNamespaces holds details about calls to the ListConnectorNamespaces method.
		ListConnectorNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListConnectorNamespacesExecute holds details about calls to the ListConnectorNamespacesExecute method.
		ListConnectorNamespacesExecute []struct {
			// R is the r argument value.
			R ApiListConnectorNamespacesRequest
		}
		// UpdateConnectorNamespaceById holds details about calls to the UpdateConnectorNamespaceById method.
		UpdateConnectorNamespaceById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorNamespaceId is the connectorNamespaceId argument value.
			ConnectorNamespaceId string
		}
		// UpdateConnectorNamespaceByIdExecute holds details about calls to the UpdateConnectorNamespaceByIdExecute method.
		UpdateConnectorNamespaceByIdExecute []struct {
			// R is the r argument value.
			R ApiUpdateConnectorNamespaceByIdRequest
		}
	}
	lockCreateConnectorNamespace            sync.RWMutex
	lockCreateConnectorNamespaceExecute     sync.RWMutex
	lockCreateEvaluationNamespace           sync.RWMutex
	lockCreateEvaluationNamespaceExecute    sync.RWMutex
	lockDeleteConnectorNamespace            sync.RWMutex
	lockDeleteConnectorNamespaceExecute     sync.RWMutex
	lockGetConnectorNamespace               sync.RWMutex
	lockGetConnectorNamespaceExecute        sync.RWMutex
	lockListConnectorNamespaces             sync.RWMutex
	lockListConnectorNamespacesExecute      sync.RWMutex
	lockUpdateConnectorNamespaceById        sync.RWMutex
	lockUpdateConnectorNamespaceByIdExecute sync.RWMutex
}

// CreateConnectorNamespace calls CreateConnectorNamespaceFunc.
func (mock *ConnectorNamespacesApiMock) CreateConnectorNamespace(ctx _context.Context) ApiCreateConnectorNamespaceRequest {
	if mock.CreateConnectorNamespaceFunc == nil {
		panic("ConnectorNamespacesApiMock.CreateConnectorNamespaceFunc: method is nil but ConnectorNamespacesApi.CreateConnectorNamespace was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateConnectorNamespace.Lock()
	mock.calls.CreateConnectorNamespace = append(mock.calls.CreateConnectorNamespace, callInfo)
	mock.lockCreateConnectorNamespace.Unlock()
	return mock.CreateConnectorNamespaceFunc(ctx)
}

// CreateConnectorNamespaceCalls gets all the calls that were made to CreateConnectorNamespace.
// Check the length with:
//     len(mockedConnectorNamespacesApi.CreateConnectorNamespaceCalls())
func (mock *ConnectorNamespacesApiMock) CreateConnectorNamespaceCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateConnectorNamespace.RLock()
	calls = mock.calls.CreateConnectorNamespace
	mock.lockCreateConnectorNamespace.RUnlock()
	return calls
}

// CreateConnectorNamespaceExecute calls CreateConnectorNamespaceExecuteFunc.
func (mock *ConnectorNamespacesApiMock) CreateConnectorNamespaceExecute(r ApiCreateConnectorNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error) {
	if mock.CreateConnectorNamespaceExecuteFunc == nil {
		panic("ConnectorNamespacesApiMock.CreateConnectorNamespaceExecuteFunc: method is nil but ConnectorNamespacesApi.CreateConnectorNamespaceExecute was just called")
	}
	callInfo := struct {
		R ApiCreateConnectorNamespaceRequest
	}{
		R: r,
	}
	mock.lockCreateConnectorNamespaceExecute.Lock()
	mock.calls.CreateConnectorNamespaceExecute = append(mock.calls.CreateConnectorNamespaceExecute, callInfo)
	mock.lockCreateConnectorNamespaceExecute.Unlock()
	return mock.CreateConnectorNamespaceExecuteFunc(r)
}

// CreateConnectorNamespaceExecuteCalls gets all the calls that were made to CreateConnectorNamespaceExecute.
// Check the length with:
//     len(mockedConnectorNamespacesApi.CreateConnectorNamespaceExecuteCalls())
func (mock *ConnectorNamespacesApiMock) CreateConnectorNamespaceExecuteCalls() []struct {
	R ApiCreateConnectorNamespaceRequest
} {
	var calls []struct {
		R ApiCreateConnectorNamespaceRequest
	}
	mock.lockCreateConnectorNamespaceExecute.RLock()
	calls = mock.calls.CreateConnectorNamespaceExecute
	mock.lockCreateConnectorNamespaceExecute.RUnlock()
	return calls
}

// CreateEvaluationNamespace calls CreateEvaluationNamespaceFunc.
func (mock *ConnectorNamespacesApiMock) CreateEvaluationNamespace(ctx _context.Context) ApiCreateEvaluationNamespaceRequest {
	if mock.CreateEvaluationNamespaceFunc == nil {
		panic("ConnectorNamespacesApiMock.CreateEvaluationNamespaceFunc: method is nil but ConnectorNamespacesApi.CreateEvaluationNamespace was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateEvaluationNamespace.Lock()
	mock.calls.CreateEvaluationNamespace = append(mock.calls.CreateEvaluationNamespace, callInfo)
	mock.lockCreateEvaluationNamespace.Unlock()
	return mock.CreateEvaluationNamespaceFunc(ctx)
}

// CreateEvaluationNamespaceCalls gets all the calls that were made to CreateEvaluationNamespace.
// Check the length with:
//     len(mockedConnectorNamespacesApi.CreateEvaluationNamespaceCalls())
func (mock *ConnectorNamespacesApiMock) CreateEvaluationNamespaceCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateEvaluationNamespace.RLock()
	calls = mock.calls.CreateEvaluationNamespace
	mock.lockCreateEvaluationNamespace.RUnlock()
	return calls
}

// CreateEvaluationNamespaceExecute calls CreateEvaluationNamespaceExecuteFunc.
func (mock *ConnectorNamespacesApiMock) CreateEvaluationNamespaceExecute(r ApiCreateEvaluationNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error) {
	if mock.CreateEvaluationNamespaceExecuteFunc == nil {
		panic("ConnectorNamespacesApiMock.CreateEvaluationNamespaceExecuteFunc: method is nil but ConnectorNamespacesApi.CreateEvaluationNamespaceExecute was just called")
	}
	callInfo := struct {
		R ApiCreateEvaluationNamespaceRequest
	}{
		R: r,
	}
	mock.lockCreateEvaluationNamespaceExecute.Lock()
	mock.calls.CreateEvaluationNamespaceExecute = append(mock.calls.CreateEvaluationNamespaceExecute, callInfo)
	mock.lockCreateEvaluationNamespaceExecute.Unlock()
	return mock.CreateEvaluationNamespaceExecuteFunc(r)
}

// CreateEvaluationNamespaceExecuteCalls gets all the calls that were made to CreateEvaluationNamespaceExecute.
// Check the length with:
//     len(mockedConnectorNamespacesApi.CreateEvaluationNamespaceExecuteCalls())
func (mock *ConnectorNamespacesApiMock) CreateEvaluationNamespaceExecuteCalls() []struct {
	R ApiCreateEvaluationNamespaceRequest
} {
	var calls []struct {
		R ApiCreateEvaluationNamespaceRequest
	}
	mock.lockCreateEvaluationNamespaceExecute.RLock()
	calls = mock.calls.CreateEvaluationNamespaceExecute
	mock.lockCreateEvaluationNamespaceExecute.RUnlock()
	return calls
}

// DeleteConnectorNamespace calls DeleteConnectorNamespaceFunc.
func (mock *ConnectorNamespacesApiMock) DeleteConnectorNamespace(ctx _context.Context, connectorNamespaceId string) ApiDeleteConnectorNamespaceRequest {
	if mock.DeleteConnectorNamespaceFunc == nil {
		panic("ConnectorNamespacesApiMock.DeleteConnectorNamespaceFunc: method is nil but ConnectorNamespacesApi.DeleteConnectorNamespace was just called")
	}
	callInfo := struct {
		Ctx                  _context.Context
		ConnectorNamespaceId string
	}{
		Ctx:                  ctx,
		ConnectorNamespaceId: connectorNamespaceId,
	}
	mock.lockDeleteConnectorNamespace.Lock()
	mock.calls.DeleteConnectorNamespace = append(mock.calls.DeleteConnectorNamespace, callInfo)
	mock.lockDeleteConnectorNamespace.Unlock()
	return mock.DeleteConnectorNamespaceFunc(ctx, connectorNamespaceId)
}

// DeleteConnectorNamespaceCalls gets all the calls that were made to DeleteConnectorNamespace.
// Check the length with:
//     len(mockedConnectorNamespacesApi.DeleteConnectorNamespaceCalls())
func (mock *ConnectorNamespacesApiMock) DeleteConnectorNamespaceCalls() []struct {
	Ctx                  _context.Context
	ConnectorNamespaceId string
} {
	var calls []struct {
		Ctx                  _context.Context
		ConnectorNamespaceId string
	}
	mock.lockDeleteConnectorNamespace.RLock()
	calls = mock.calls.DeleteConnectorNamespace
	mock.lockDeleteConnectorNamespace.RUnlock()
	return calls
}

// DeleteConnectorNamespaceExecute calls DeleteConnectorNamespaceExecuteFunc.
func (mock *ConnectorNamespacesApiMock) DeleteConnectorNamespaceExecute(r ApiDeleteConnectorNamespaceRequest) (Error, *_nethttp.Response, error) {
	if mock.DeleteConnectorNamespaceExecuteFunc == nil {
		panic("ConnectorNamespacesApiMock.DeleteConnectorNamespaceExecuteFunc: method is nil but ConnectorNamespacesApi.DeleteConnectorNamespaceExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteConnectorNamespaceRequest
	}{
		R: r,
	}
	mock.lockDeleteConnectorNamespaceExecute.Lock()
	mock.calls.DeleteConnectorNamespaceExecute = append(mock.calls.DeleteConnectorNamespaceExecute, callInfo)
	mock.lockDeleteConnectorNamespaceExecute.Unlock()
	return mock.DeleteConnectorNamespaceExecuteFunc(r)
}

// DeleteConnectorNamespaceExecuteCalls gets all the calls that were made to DeleteConnectorNamespaceExecute.
// Check the length with:
//     len(mockedConnectorNamespacesApi.DeleteConnectorNamespaceExecuteCalls())
func (mock *ConnectorNamespacesApiMock) DeleteConnectorNamespaceExecuteCalls() []struct {
	R ApiDeleteConnectorNamespaceRequest
} {
	var calls []struct {
		R ApiDeleteConnectorNamespaceRequest
	}
	mock.lockDeleteConnectorNamespaceExecute.RLock()
	calls = mock.calls.DeleteConnectorNamespaceExecute
	mock.lockDeleteConnectorNamespaceExecute.RUnlock()
	return calls
}

// GetConnectorNamespace calls GetConnectorNamespaceFunc.
func (mock *ConnectorNamespacesApiMock) GetConnectorNamespace(ctx _context.Context, connectorNamespaceId string) ApiGetConnectorNamespaceRequest {
	if mock.GetConnectorNamespaceFunc == nil {
		panic("ConnectorNamespacesApiMock.GetConnectorNamespaceFunc: method is nil but ConnectorNamespacesApi.GetConnectorNamespace was just called")
	}
	callInfo := struct {
		Ctx                  _context.Context
		ConnectorNamespaceId string
	}{
		Ctx:                  ctx,
		ConnectorNamespaceId: connectorNamespaceId,
	}
	mock.lockGetConnectorNamespace.Lock()
	mock.calls.GetConnectorNamespace = append(mock.calls.GetConnectorNamespace, callInfo)
	mock.lockGetConnectorNamespace.Unlock()
	return mock.GetConnectorNamespaceFunc(ctx, connectorNamespaceId)
}

// GetConnectorNamespaceCalls gets all the calls that were made to GetConnectorNamespace.
// Check the length with:
//     len(mockedConnectorNamespacesApi.GetConnectorNamespaceCalls())
func (mock *ConnectorNamespacesApiMock) GetConnectorNamespaceCalls() []struct {
	Ctx                  _context.Context
	ConnectorNamespaceId string
} {
	var calls []struct {
		Ctx                  _context.Context
		ConnectorNamespaceId string
	}
	mock.lockGetConnectorNamespace.RLock()
	calls = mock.calls.GetConnectorNamespace
	mock.lockGetConnectorNamespace.RUnlock()
	return calls
}

// GetConnectorNamespaceExecute calls GetConnectorNamespaceExecuteFunc.
func (mock *ConnectorNamespacesApiMock) GetConnectorNamespaceExecute(r ApiGetConnectorNamespaceRequest) (ConnectorNamespace, *_nethttp.Response, error) {
	if mock.GetConnectorNamespaceExecuteFunc == nil {
		panic("ConnectorNamespacesApiMock.GetConnectorNamespaceExecuteFunc: method is nil but ConnectorNamespacesApi.GetConnectorNamespaceExecute was just called")
	}
	callInfo := struct {
		R ApiGetConnectorNamespaceRequest
	}{
		R: r,
	}
	mock.lockGetConnectorNamespaceExecute.Lock()
	mock.calls.GetConnectorNamespaceExecute = append(mock.calls.GetConnectorNamespaceExecute, callInfo)
	mock.lockGetConnectorNamespaceExecute.Unlock()
	return mock.GetConnectorNamespaceExecuteFunc(r)
}

// GetConnectorNamespaceExecuteCalls gets all the calls that were made to GetConnectorNamespaceExecute.
// Check the length with:
//     len(mockedConnectorNamespacesApi.GetConnectorNamespaceExecuteCalls())
func (mock *ConnectorNamespacesApiMock) GetConnectorNamespaceExecuteCalls() []struct {
	R ApiGetConnectorNamespaceRequest
} {
	var calls []struct {
		R ApiGetConnectorNamespaceRequest
	}
	mock.lockGetConnectorNamespaceExecute.RLock()
	calls = mock.calls.GetConnectorNamespaceExecute
	mock.lockGetConnectorNamespaceExecute.RUnlock()
	return calls
}

// ListConnectorNamespaces calls ListConnectorNamespacesFunc.
func (mock *ConnectorNamespacesApiMock) ListConnectorNamespaces(ctx _context.Context) ApiListConnectorNamespacesRequest {
	if mock.ListConnectorNamespacesFunc == nil {
		panic("ConnectorNamespacesApiMock.ListConnectorNamespacesFunc: method is nil but ConnectorNamespacesApi.ListConnectorNamespaces was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListConnectorNamespaces.Lock()
	mock.calls.ListConnectorNamespaces = append(mock.calls.ListConnectorNamespaces, callInfo)
	mock.lockListConnectorNamespaces.Unlock()
	return mock.ListConnectorNamespacesFunc(ctx)
}

// ListConnectorNamespacesCalls gets all the calls that were made to ListConnectorNamespaces.
// Check the length with:
//     len(mockedConnectorNamespacesApi.ListConnectorNamespacesCalls())
func (mock *ConnectorNamespacesApiMock) ListConnectorNamespacesCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListConnectorNamespaces.RLock()
	calls = mock.calls.ListConnectorNamespaces
	mock.lockListConnectorNamespaces.RUnlock()
	return calls
}

// ListConnectorNamespacesExecute calls ListConnectorNamespacesExecuteFunc.
func (mock *ConnectorNamespacesApiMock) ListConnectorNamespacesExecute(r ApiListConnectorNamespacesRequest) (ConnectorNamespaceList, *_nethttp.Response, error) {
	if mock.ListConnectorNamespacesExecuteFunc == nil {
		panic("ConnectorNamespacesApiMock.ListConnectorNamespacesExecuteFunc: method is nil but ConnectorNamespacesApi.ListConnectorNamespacesExecute was just called")
	}
	callInfo := struct {
		R ApiListConnectorNamespacesRequest
	}{
		R: r,
	}
	mock.lockListConnectorNamespacesExecute.Lock()
	mock.calls.ListConnectorNamespacesExecute = append(mock.calls.ListConnectorNamespacesExecute, callInfo)
	mock.lockListConnectorNamespacesExecute.Unlock()
	return mock.ListConnectorNamespacesExecuteFunc(r)
}

// ListConnectorNamespacesExecuteCalls gets all the calls that were made to ListConnectorNamespacesExecute.
// Check the length with:
//     len(mockedConnectorNamespacesApi.ListConnectorNamespacesExecuteCalls())
func (mock *ConnectorNamespacesApiMock) ListConnectorNamespacesExecuteCalls() []struct {
	R ApiListConnectorNamespacesRequest
} {
	var calls []struct {
		R ApiListConnectorNamespacesRequest
	}
	mock.lockListConnectorNamespacesExecute.RLock()
	calls = mock.calls.ListConnectorNamespacesExecute
	mock.lockListConnectorNamespacesExecute.RUnlock()
	return calls
}

// UpdateConnectorNamespaceById calls UpdateConnectorNamespaceByIdFunc.
func (mock *ConnectorNamespacesApiMock) UpdateConnectorNamespaceById(ctx _context.Context, connectorNamespaceId string) ApiUpdateConnectorNamespaceByIdRequest {
	if mock.UpdateConnectorNamespaceByIdFunc == nil {
		panic("ConnectorNamespacesApiMock.UpdateConnectorNamespaceByIdFunc: method is nil but ConnectorNamespacesApi.UpdateConnectorNamespaceById was just called")
	}
	callInfo := struct {
		Ctx                  _context.Context
		ConnectorNamespaceId string
	}{
		Ctx:                  ctx,
		ConnectorNamespaceId: connectorNamespaceId,
	}
	mock.lockUpdateConnectorNamespaceById.Lock()
	mock.calls.UpdateConnectorNamespaceById = append(mock.calls.UpdateConnectorNamespaceById, callInfo)
	mock.lockUpdateConnectorNamespaceById.Unlock()
	return mock.UpdateConnectorNamespaceByIdFunc(ctx, connectorNamespaceId)
}

// UpdateConnectorNamespaceByIdCalls gets all the calls that were made to UpdateConnectorNamespaceById.
// Check the length with:
//     len(mockedConnectorNamespacesApi.UpdateConnectorNamespaceByIdCalls())
func (mock *ConnectorNamespacesApiMock) UpdateConnectorNamespaceByIdCalls() []struct {
	Ctx                  _context.Context
	ConnectorNamespaceId string
} {
	var calls []struct {
		Ctx                  _context.Context
		ConnectorNamespaceId string
	}
	mock.lockUpdateConnectorNamespaceById.RLock()
	calls = mock.calls.UpdateConnectorNamespaceById
	mock.lockUpdateConnectorNamespaceById.RUnlock()
	return calls
}

// UpdateConnectorNamespaceByIdExecute calls UpdateConnectorNamespaceByIdExecuteFunc.
func (mock *ConnectorNamespacesApiMock) UpdateConnectorNamespaceByIdExecute(r ApiUpdateConnectorNamespaceByIdRequest) (*_nethttp.Response, error) {
	if mock.UpdateConnectorNamespaceByIdExecuteFunc == nil {
		panic("ConnectorNamespacesApiMock.UpdateConnectorNamespaceByIdExecuteFunc: method is nil but ConnectorNamespacesApi.UpdateConnectorNamespaceByIdExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateConnectorNamespaceByIdRequest
	}{
		R: r,
	}
	mock.lockUpdateConnectorNamespaceByIdExecute.Lock()
	mock.calls.UpdateConnectorNamespaceByIdExecute = append(mock.calls.UpdateConnectorNamespaceByIdExecute, callInfo)
	mock.lockUpdateConnectorNamespaceByIdExecute.Unlock()
	return mock.UpdateConnectorNamespaceByIdExecuteFunc(r)
}

// UpdateConnectorNamespaceByIdExecuteCalls gets all the calls that were made to UpdateConnectorNamespaceByIdExecute.
// Check the length with:
//     len(mockedConnectorNamespacesApi.UpdateConnectorNamespaceByIdExecuteCalls())
func (mock *ConnectorNamespacesApiMock) UpdateConnectorNamespaceByIdExecuteCalls() []struct {
	R ApiUpdateConnectorNamespaceByIdRequest
} {
	var calls []struct {
		R ApiUpdateConnectorNamespaceByIdRequest
	}
	mock.lockUpdateConnectorNamespaceByIdExecute.RLock()
	calls = mock.calls.UpdateConnectorNamespaceByIdExecute
	mock.lockUpdateConnectorNamespaceByIdExecute.RUnlock()
	return calls
}

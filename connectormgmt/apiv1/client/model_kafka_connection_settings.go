/*
 * Connector Service Fleet Manager
 *
 * Connector Service Fleet Manager is a Rest API to manage connectors.
 *
 * API version: 0.0.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// KafkaConnectionSettings struct for KafkaConnectionSettings
type KafkaConnectionSettings struct {

	BootstrapServer *string `json:"bootstrap_server,omitempty"`

	ClientId *string `json:"client_id,omitempty"`

	ClientSecret *string `json:"client_secret,omitempty"`

}

// NewKafkaConnectionSettings instantiates a new KafkaConnectionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaConnectionSettings() *KafkaConnectionSettings {
	this := KafkaConnectionSettings{}
	return &this
}

// NewKafkaConnectionSettingsWithDefaults instantiates a new KafkaConnectionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaConnectionSettingsWithDefaults() *KafkaConnectionSettings {
	this := KafkaConnectionSettings{}




	return &this
}


// GetBootstrapServer returns the BootstrapServer field value if set, zero value otherwise.
func (o *KafkaConnectionSettings) GetBootstrapServer() string {
	if o == nil || o.BootstrapServer == nil {
		var ret string
		return ret
	}
	return *o.BootstrapServer
}

// GetBootstrapServerOk returns a tuple with the BootstrapServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaConnectionSettings) GetBootstrapServerOk() (*string, bool) {
	if o == nil || o.BootstrapServer == nil {
		return nil, false
	}
	return o.BootstrapServer, true
}

// HasBootstrapServer returns a boolean if a field has been set.
func (o *KafkaConnectionSettings) HasBootstrapServer() bool {
	if o != nil && o.BootstrapServer != nil {
		return true
	}

	return false
}

// SetBootstrapServer gets a reference to the given string and assigns it to the BootstrapServer field.
func (o *KafkaConnectionSettings) SetBootstrapServer(v string) {
	o.BootstrapServer = &v
}


// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *KafkaConnectionSettings) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaConnectionSettings) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *KafkaConnectionSettings) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *KafkaConnectionSettings) SetClientId(v string) {
	o.ClientId = &v
}


// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *KafkaConnectionSettings) GetClientSecret() string {
	if o == nil || o.ClientSecret == nil {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaConnectionSettings) GetClientSecretOk() (*string, bool) {
	if o == nil || o.ClientSecret == nil {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *KafkaConnectionSettings) HasClientSecret() bool {
	if o != nil && o.ClientSecret != nil {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *KafkaConnectionSettings) SetClientSecret(v string) {
	o.ClientSecret = &v
}


func (o KafkaConnectionSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if o.BootstrapServer != nil {
		toSerialize["bootstrap_server"] = o.BootstrapServer
	}
    
	if o.ClientId != nil {
		toSerialize["client_id"] = o.ClientId
	}
    
	if o.ClientSecret != nil {
		toSerialize["client_secret"] = o.ClientSecret
	}
    
	return json.Marshal(toSerialize)
}

type NullableKafkaConnectionSettings struct {
	value *KafkaConnectionSettings
	isSet bool
}

func (v NullableKafkaConnectionSettings) Get() *KafkaConnectionSettings {
	return v.value
}

func (v *NullableKafkaConnectionSettings) Set(val *KafkaConnectionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaConnectionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaConnectionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaConnectionSettings(val *KafkaConnectionSettings) *NullableKafkaConnectionSettings {
	return &NullableKafkaConnectionSettings{value: val, isSet: true}
}

func (v NullableKafkaConnectionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaConnectionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


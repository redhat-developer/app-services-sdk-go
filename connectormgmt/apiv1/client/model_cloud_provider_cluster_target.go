/*
 * Connector Service Fleet Manager
 *
 * Connector Service Fleet Manager is a Rest API to manage connectors.
 *
 * API version: 0.0.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// CloudProviderClusterTarget Targets workloads to a cloud provider
type CloudProviderClusterTarget struct {

	Kind string `json:"kind"`

	CloudProvider *string `json:"cloud_provider,omitempty"`

	Region *string `json:"region,omitempty"`

	MultiAz *bool `json:"multi_az,omitempty"`

}

// NewCloudProviderClusterTarget instantiates a new CloudProviderClusterTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudProviderClusterTarget(kind string) *CloudProviderClusterTarget {
	this := CloudProviderClusterTarget{}
	this.Kind = kind
	return &this
}

// NewCloudProviderClusterTargetWithDefaults instantiates a new CloudProviderClusterTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudProviderClusterTargetWithDefaults() *CloudProviderClusterTarget {
	this := CloudProviderClusterTarget{}





	return &this
}


// GetKind returns the Kind field value
func (o *CloudProviderClusterTarget) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CloudProviderClusterTarget) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CloudProviderClusterTarget) SetKind(v string) {
	o.Kind = v
}


// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *CloudProviderClusterTarget) GetCloudProvider() string {
	if o == nil || o.CloudProvider == nil {
		var ret string
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudProviderClusterTarget) GetCloudProviderOk() (*string, bool) {
	if o == nil || o.CloudProvider == nil {
		return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *CloudProviderClusterTarget) HasCloudProvider() bool {
	if o != nil && o.CloudProvider != nil {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given string and assigns it to the CloudProvider field.
func (o *CloudProviderClusterTarget) SetCloudProvider(v string) {
	o.CloudProvider = &v
}


// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CloudProviderClusterTarget) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudProviderClusterTarget) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CloudProviderClusterTarget) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CloudProviderClusterTarget) SetRegion(v string) {
	o.Region = &v
}


// GetMultiAz returns the MultiAz field value if set, zero value otherwise.
func (o *CloudProviderClusterTarget) GetMultiAz() bool {
	if o == nil || o.MultiAz == nil {
		var ret bool
		return ret
	}
	return *o.MultiAz
}

// GetMultiAzOk returns a tuple with the MultiAz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudProviderClusterTarget) GetMultiAzOk() (*bool, bool) {
	if o == nil || o.MultiAz == nil {
		return nil, false
	}
	return o.MultiAz, true
}

// HasMultiAz returns a boolean if a field has been set.
func (o *CloudProviderClusterTarget) HasMultiAz() bool {
	if o != nil && o.MultiAz != nil {
		return true
	}

	return false
}

// SetMultiAz gets a reference to the given bool and assigns it to the MultiAz field.
func (o *CloudProviderClusterTarget) SetMultiAz(v bool) {
	o.MultiAz = &v
}


func (o CloudProviderClusterTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if true {
		toSerialize["kind"] = o.Kind
	}
    
	if o.CloudProvider != nil {
		toSerialize["cloud_provider"] = o.CloudProvider
	}
    
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
    
	if o.MultiAz != nil {
		toSerialize["multi_az"] = o.MultiAz
	}
    
	return json.Marshal(toSerialize)
}

type NullableCloudProviderClusterTarget struct {
	value *CloudProviderClusterTarget
	isSet bool
}

func (v NullableCloudProviderClusterTarget) Get() *CloudProviderClusterTarget {
	return v.value
}

func (v *NullableCloudProviderClusterTarget) Set(val *CloudProviderClusterTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProviderClusterTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProviderClusterTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProviderClusterTarget(val *CloudProviderClusterTarget) *NullableCloudProviderClusterTarget {
	return &NullableCloudProviderClusterTarget{value: val, isSet: true}
}

func (v NullableCloudProviderClusterTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProviderClusterTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


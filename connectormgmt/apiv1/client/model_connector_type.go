/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
	"fmt"
)

// ConnectorType - Represents a connector type supported by the API
type ConnectorType struct {
	ConnectorTypeAllOf *ConnectorTypeAllOf
	ObjectReference *ObjectReference
}

// ConnectorTypeAllOfAsConnectorType is a convenience function that returns ConnectorTypeAllOf wrapped in ConnectorType
func ConnectorTypeAllOfAsConnectorType(v *ConnectorTypeAllOf) ConnectorType {
	return ConnectorType{ ConnectorTypeAllOf: v}
}

// ObjectReferenceAsConnectorType is a convenience function that returns ObjectReference wrapped in ConnectorType
func ObjectReferenceAsConnectorType(v *ObjectReference) ConnectorType {
	return ConnectorType{ ObjectReference: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectorType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConnectorTypeAllOf
	err = json.Unmarshal(data, &dst.ConnectorTypeAllOf)
	if err == nil {
		jsonConnectorTypeAllOf, _ := json.Marshal(dst.ConnectorTypeAllOf)
		if string(jsonConnectorTypeAllOf) == "{}" { // empty struct
			dst.ConnectorTypeAllOf = nil
		} else {
			match++
		}
	} else {
		dst.ConnectorTypeAllOf = nil
	}

	// try to unmarshal data into ObjectReference
	err = json.Unmarshal(data, &dst.ObjectReference)
	if err == nil {
		jsonObjectReference, _ := json.Marshal(dst.ObjectReference)
		if string(jsonObjectReference) == "{}" { // empty struct
			dst.ObjectReference = nil
		} else {
			match++
		}
	} else {
		dst.ObjectReference = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConnectorTypeAllOf = nil
		dst.ObjectReference = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ConnectorType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ConnectorType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectorType) MarshalJSON() ([]byte, error) {
	if src.ConnectorTypeAllOf != nil {
		return json.Marshal(&src.ConnectorTypeAllOf)
	}

	if src.ObjectReference != nil {
		return json.Marshal(&src.ObjectReference)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectorType) GetActualInstance() (interface{}) {
	if obj.ConnectorTypeAllOf != nil {
		return obj.ConnectorTypeAllOf
	}

	if obj.ObjectReference != nil {
		return obj.ObjectReference
	}

	// all schemas are nil
	return nil
}

type NullableConnectorType struct {
	value *ConnectorType
	isSet bool
}

func (v NullableConnectorType) Get() *ConnectorType {
	return v.value
}

func (v *NullableConnectorType) Set(val *ConnectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorType(val *ConnectorType) *NullableConnectorType {
	return &NullableConnectorType{value: val, isSet: true}
}

func (v NullableConnectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



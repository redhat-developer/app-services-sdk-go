/*
 * Connector Service Fleet Manager
 *
 * Connector Service Fleet Manager is a Rest API to manage connectors.
 *
 * API version: 0.0.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorClusterAllOf struct for ConnectorClusterAllOf
type ConnectorClusterAllOf struct {

	Metadata *ConnectorClusterAllOfMetadata `json:"metadata,omitempty"`

	Status *string `json:"status,omitempty"`

}

// NewConnectorClusterAllOf instantiates a new ConnectorClusterAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorClusterAllOf() *ConnectorClusterAllOf {
	this := ConnectorClusterAllOf{}
	return &this
}

// NewConnectorClusterAllOfWithDefaults instantiates a new ConnectorClusterAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorClusterAllOfWithDefaults() *ConnectorClusterAllOf {
	this := ConnectorClusterAllOf{}



	return &this
}


// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ConnectorClusterAllOf) GetMetadata() ConnectorClusterAllOfMetadata {
	if o == nil || o.Metadata == nil {
		var ret ConnectorClusterAllOfMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorClusterAllOf) GetMetadataOk() (*ConnectorClusterAllOfMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ConnectorClusterAllOf) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConnectorClusterAllOfMetadata and assigns it to the Metadata field.
func (o *ConnectorClusterAllOf) SetMetadata(v ConnectorClusterAllOfMetadata) {
	o.Metadata = &v
}


// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectorClusterAllOf) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorClusterAllOf) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectorClusterAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectorClusterAllOf) SetStatus(v string) {
	o.Status = &v
}


func (o ConnectorClusterAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
    
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
    
	return json.Marshal(toSerialize)
}

type NullableConnectorClusterAllOf struct {
	value *ConnectorClusterAllOf
	isSet bool
}

func (v NullableConnectorClusterAllOf) Get() *ConnectorClusterAllOf {
	return v.value
}

func (v *NullableConnectorClusterAllOf) Set(val *ConnectorClusterAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorClusterAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorClusterAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorClusterAllOf(val *ConnectorClusterAllOf) *NullableConnectorClusterAllOf {
	return &NullableConnectorClusterAllOf{value: val, isSet: true}
}

func (v NullableConnectorClusterAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorClusterAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kafkamgmtclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that ErrorsApiMock does implement ErrorsApi.
// If this is not the case, regenerate this file with moq.
var _ ErrorsApi = &ErrorsApiMock{}

// ErrorsApiMock is a mock implementation of ErrorsApi.
//
// 	func TestSomethingThatUsesErrorsApi(t *testing.T) {
//
// 		// make and configure a mocked ErrorsApi
// 		mockedErrorsApi := &ErrorsApiMock{
// 			GetErrorByIdFunc: func(ctx _context.Context, id string) ApiGetErrorByIdRequest {
// 				panic("mock out the GetErrorById method")
// 			},
// 			GetErrorByIdExecuteFunc: func(r ApiGetErrorByIdRequest) (Error, *_nethttp.Response, error) {
// 				panic("mock out the GetErrorByIdExecute method")
// 			},
// 			GetErrorsFunc: func(ctx _context.Context) ApiGetErrorsRequest {
// 				panic("mock out the GetErrors method")
// 			},
// 			GetErrorsExecuteFunc: func(r ApiGetErrorsRequest) (ErrorList, *_nethttp.Response, error) {
// 				panic("mock out the GetErrorsExecute method")
// 			},
// 		}
//
// 		// use mockedErrorsApi in code that requires ErrorsApi
// 		// and then make assertions.
//
// 	}
type ErrorsApiMock struct {
	// GetErrorByIdFunc mocks the GetErrorById method.
	GetErrorByIdFunc func(ctx _context.Context, id string) ApiGetErrorByIdRequest

	// GetErrorByIdExecuteFunc mocks the GetErrorByIdExecute method.
	GetErrorByIdExecuteFunc func(r ApiGetErrorByIdRequest) (Error, *_nethttp.Response, error)

	// GetErrorsFunc mocks the GetErrors method.
	GetErrorsFunc func(ctx _context.Context) ApiGetErrorsRequest

	// GetErrorsExecuteFunc mocks the GetErrorsExecute method.
	GetErrorsExecuteFunc func(r ApiGetErrorsRequest) (ErrorList, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetErrorById holds details about calls to the GetErrorById method.
		GetErrorById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetErrorByIdExecute holds details about calls to the GetErrorByIdExecute method.
		GetErrorByIdExecute []struct {
			// R is the r argument value.
			R ApiGetErrorByIdRequest
		}
		// GetErrors holds details about calls to the GetErrors method.
		GetErrors []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// GetErrorsExecute holds details about calls to the GetErrorsExecute method.
		GetErrorsExecute []struct {
			// R is the r argument value.
			R ApiGetErrorsRequest
		}
	}
	lockGetErrorById        sync.RWMutex
	lockGetErrorByIdExecute sync.RWMutex
	lockGetErrors           sync.RWMutex
	lockGetErrorsExecute    sync.RWMutex
}

// GetErrorById calls GetErrorByIdFunc.
func (mock *ErrorsApiMock) GetErrorById(ctx _context.Context, id string) ApiGetErrorByIdRequest {
	if mock.GetErrorByIdFunc == nil {
		panic("ErrorsApiMock.GetErrorByIdFunc: method is nil but ErrorsApi.GetErrorById was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetErrorById.Lock()
	mock.calls.GetErrorById = append(mock.calls.GetErrorById, callInfo)
	mock.lockGetErrorById.Unlock()
	return mock.GetErrorByIdFunc(ctx, id)
}

// GetErrorByIdCalls gets all the calls that were made to GetErrorById.
// Check the length with:
//     len(mockedErrorsApi.GetErrorByIdCalls())
func (mock *ErrorsApiMock) GetErrorByIdCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetErrorById.RLock()
	calls = mock.calls.GetErrorById
	mock.lockGetErrorById.RUnlock()
	return calls
}

// GetErrorByIdExecute calls GetErrorByIdExecuteFunc.
func (mock *ErrorsApiMock) GetErrorByIdExecute(r ApiGetErrorByIdRequest) (Error, *_nethttp.Response, error) {
	if mock.GetErrorByIdExecuteFunc == nil {
		panic("ErrorsApiMock.GetErrorByIdExecuteFunc: method is nil but ErrorsApi.GetErrorByIdExecute was just called")
	}
	callInfo := struct {
		R ApiGetErrorByIdRequest
	}{
		R: r,
	}
	mock.lockGetErrorByIdExecute.Lock()
	mock.calls.GetErrorByIdExecute = append(mock.calls.GetErrorByIdExecute, callInfo)
	mock.lockGetErrorByIdExecute.Unlock()
	return mock.GetErrorByIdExecuteFunc(r)
}

// GetErrorByIdExecuteCalls gets all the calls that were made to GetErrorByIdExecute.
// Check the length with:
//     len(mockedErrorsApi.GetErrorByIdExecuteCalls())
func (mock *ErrorsApiMock) GetErrorByIdExecuteCalls() []struct {
	R ApiGetErrorByIdRequest
} {
	var calls []struct {
		R ApiGetErrorByIdRequest
	}
	mock.lockGetErrorByIdExecute.RLock()
	calls = mock.calls.GetErrorByIdExecute
	mock.lockGetErrorByIdExecute.RUnlock()
	return calls
}

// GetErrors calls GetErrorsFunc.
func (mock *ErrorsApiMock) GetErrors(ctx _context.Context) ApiGetErrorsRequest {
	if mock.GetErrorsFunc == nil {
		panic("ErrorsApiMock.GetErrorsFunc: method is nil but ErrorsApi.GetErrors was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetErrors.Lock()
	mock.calls.GetErrors = append(mock.calls.GetErrors, callInfo)
	mock.lockGetErrors.Unlock()
	return mock.GetErrorsFunc(ctx)
}

// GetErrorsCalls gets all the calls that were made to GetErrors.
// Check the length with:
//     len(mockedErrorsApi.GetErrorsCalls())
func (mock *ErrorsApiMock) GetErrorsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockGetErrors.RLock()
	calls = mock.calls.GetErrors
	mock.lockGetErrors.RUnlock()
	return calls
}

// GetErrorsExecute calls GetErrorsExecuteFunc.
func (mock *ErrorsApiMock) GetErrorsExecute(r ApiGetErrorsRequest) (ErrorList, *_nethttp.Response, error) {
	if mock.GetErrorsExecuteFunc == nil {
		panic("ErrorsApiMock.GetErrorsExecuteFunc: method is nil but ErrorsApi.GetErrorsExecute was just called")
	}
	callInfo := struct {
		R ApiGetErrorsRequest
	}{
		R: r,
	}
	mock.lockGetErrorsExecute.Lock()
	mock.calls.GetErrorsExecute = append(mock.calls.GetErrorsExecute, callInfo)
	mock.lockGetErrorsExecute.Unlock()
	return mock.GetErrorsExecuteFunc(r)
}

// GetErrorsExecuteCalls gets all the calls that were made to GetErrorsExecute.
// Check the length with:
//     len(mockedErrorsApi.GetErrorsExecuteCalls())
func (mock *ErrorsApiMock) GetErrorsExecuteCalls() []struct {
	R ApiGetErrorsRequest
} {
	var calls []struct {
		R ApiGetErrorsRequest
	}
	mock.lockGetErrorsExecute.RLock()
	calls = mock.calls.GetErrorsExecute
	mock.lockGetErrorsExecute.RUnlock()
	return calls
}

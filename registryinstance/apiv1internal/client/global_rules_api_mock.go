// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package registryinstanceclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that GlobalRulesApiMock does implement GlobalRulesApi.
// If this is not the case, regenerate this file with moq.
var _ GlobalRulesApi = &GlobalRulesApiMock{}

// GlobalRulesApiMock is a mock implementation of GlobalRulesApi.
//
// 	func TestSomethingThatUsesGlobalRulesApi(t *testing.T) {
//
// 		// make and configure a mocked GlobalRulesApi
// 		mockedGlobalRulesApi := &GlobalRulesApiMock{
// 			DeleteGlobalRuleFunc: func(ctx _context.Context, rule RuleType) ApiDeleteGlobalRuleRequest {
// 				panic("mock out the DeleteGlobalRule method")
// 			},
// 			DeleteGlobalRuleExecuteFunc: func(r ApiDeleteGlobalRuleRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteGlobalRuleExecute method")
// 			},
// 			ListGlobalRulesFunc: func(ctx _context.Context) ApiListGlobalRulesRequest {
// 				panic("mock out the ListGlobalRules method")
// 			},
// 			ListGlobalRulesExecuteFunc: func(r ApiListGlobalRulesRequest) ([]RuleType, *_nethttp.Response, error) {
// 				panic("mock out the ListGlobalRulesExecute method")
// 			},
// 		}
//
// 		// use mockedGlobalRulesApi in code that requires GlobalRulesApi
// 		// and then make assertions.
//
// 	}
type GlobalRulesApiMock struct {
	// DeleteGlobalRuleFunc mocks the DeleteGlobalRule method.
	DeleteGlobalRuleFunc func(ctx _context.Context, rule RuleType) ApiDeleteGlobalRuleRequest

	// DeleteGlobalRuleExecuteFunc mocks the DeleteGlobalRuleExecute method.
	DeleteGlobalRuleExecuteFunc func(r ApiDeleteGlobalRuleRequest) (*_nethttp.Response, error)

	// ListGlobalRulesFunc mocks the ListGlobalRules method.
	ListGlobalRulesFunc func(ctx _context.Context) ApiListGlobalRulesRequest

	// ListGlobalRulesExecuteFunc mocks the ListGlobalRulesExecute method.
	ListGlobalRulesExecuteFunc func(r ApiListGlobalRulesRequest) ([]RuleType, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteGlobalRule holds details about calls to the DeleteGlobalRule method.
		DeleteGlobalRule []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// Rule is the rule argument value.
			Rule RuleType
		}
		// DeleteGlobalRuleExecute holds details about calls to the DeleteGlobalRuleExecute method.
		DeleteGlobalRuleExecute []struct {
			// R is the r argument value.
			R ApiDeleteGlobalRuleRequest
		}
		// ListGlobalRules holds details about calls to the ListGlobalRules method.
		ListGlobalRules []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListGlobalRulesExecute holds details about calls to the ListGlobalRulesExecute method.
		ListGlobalRulesExecute []struct {
			// R is the r argument value.
			R ApiListGlobalRulesRequest
		}
	}
	lockDeleteGlobalRule        sync.RWMutex
	lockDeleteGlobalRuleExecute sync.RWMutex
	lockListGlobalRules         sync.RWMutex
	lockListGlobalRulesExecute  sync.RWMutex
}

// DeleteGlobalRule calls DeleteGlobalRuleFunc.
func (mock *GlobalRulesApiMock) DeleteGlobalRule(ctx _context.Context, rule RuleType) ApiDeleteGlobalRuleRequest {
	if mock.DeleteGlobalRuleFunc == nil {
		panic("GlobalRulesApiMock.DeleteGlobalRuleFunc: method is nil but GlobalRulesApi.DeleteGlobalRule was just called")
	}
	callInfo := struct {
		Ctx  _context.Context
		Rule RuleType
	}{
		Ctx:  ctx,
		Rule: rule,
	}
	mock.lockDeleteGlobalRule.Lock()
	mock.calls.DeleteGlobalRule = append(mock.calls.DeleteGlobalRule, callInfo)
	mock.lockDeleteGlobalRule.Unlock()
	return mock.DeleteGlobalRuleFunc(ctx, rule)
}

// DeleteGlobalRuleCalls gets all the calls that were made to DeleteGlobalRule.
// Check the length with:
//     len(mockedGlobalRulesApi.DeleteGlobalRuleCalls())
func (mock *GlobalRulesApiMock) DeleteGlobalRuleCalls() []struct {
	Ctx  _context.Context
	Rule RuleType
} {
	var calls []struct {
		Ctx  _context.Context
		Rule RuleType
	}
	mock.lockDeleteGlobalRule.RLock()
	calls = mock.calls.DeleteGlobalRule
	mock.lockDeleteGlobalRule.RUnlock()
	return calls
}

// DeleteGlobalRuleExecute calls DeleteGlobalRuleExecuteFunc.
func (mock *GlobalRulesApiMock) DeleteGlobalRuleExecute(r ApiDeleteGlobalRuleRequest) (*_nethttp.Response, error) {
	if mock.DeleteGlobalRuleExecuteFunc == nil {
		panic("GlobalRulesApiMock.DeleteGlobalRuleExecuteFunc: method is nil but GlobalRulesApi.DeleteGlobalRuleExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteGlobalRuleRequest
	}{
		R: r,
	}
	mock.lockDeleteGlobalRuleExecute.Lock()
	mock.calls.DeleteGlobalRuleExecute = append(mock.calls.DeleteGlobalRuleExecute, callInfo)
	mock.lockDeleteGlobalRuleExecute.Unlock()
	return mock.DeleteGlobalRuleExecuteFunc(r)
}

// DeleteGlobalRuleExecuteCalls gets all the calls that were made to DeleteGlobalRuleExecute.
// Check the length with:
//     len(mockedGlobalRulesApi.DeleteGlobalRuleExecuteCalls())
func (mock *GlobalRulesApiMock) DeleteGlobalRuleExecuteCalls() []struct {
	R ApiDeleteGlobalRuleRequest
} {
	var calls []struct {
		R ApiDeleteGlobalRuleRequest
	}
	mock.lockDeleteGlobalRuleExecute.RLock()
	calls = mock.calls.DeleteGlobalRuleExecute
	mock.lockDeleteGlobalRuleExecute.RUnlock()
	return calls
}

// ListGlobalRules calls ListGlobalRulesFunc.
func (mock *GlobalRulesApiMock) ListGlobalRules(ctx _context.Context) ApiListGlobalRulesRequest {
	if mock.ListGlobalRulesFunc == nil {
		panic("GlobalRulesApiMock.ListGlobalRulesFunc: method is nil but GlobalRulesApi.ListGlobalRules was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListGlobalRules.Lock()
	mock.calls.ListGlobalRules = append(mock.calls.ListGlobalRules, callInfo)
	mock.lockListGlobalRules.Unlock()
	return mock.ListGlobalRulesFunc(ctx)
}

// ListGlobalRulesCalls gets all the calls that were made to ListGlobalRules.
// Check the length with:
//     len(mockedGlobalRulesApi.ListGlobalRulesCalls())
func (mock *GlobalRulesApiMock) ListGlobalRulesCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListGlobalRules.RLock()
	calls = mock.calls.ListGlobalRules
	mock.lockListGlobalRules.RUnlock()
	return calls
}

// ListGlobalRulesExecute calls ListGlobalRulesExecuteFunc.
func (mock *GlobalRulesApiMock) ListGlobalRulesExecute(r ApiListGlobalRulesRequest) ([]RuleType, *_nethttp.Response, error) {
	if mock.ListGlobalRulesExecuteFunc == nil {
		panic("GlobalRulesApiMock.ListGlobalRulesExecuteFunc: method is nil but GlobalRulesApi.ListGlobalRulesExecute was just called")
	}
	callInfo := struct {
		R ApiListGlobalRulesRequest
	}{
		R: r,
	}
	mock.lockListGlobalRulesExecute.Lock()
	mock.calls.ListGlobalRulesExecute = append(mock.calls.ListGlobalRulesExecute, callInfo)
	mock.lockListGlobalRulesExecute.Unlock()
	return mock.ListGlobalRulesExecuteFunc(r)
}

// ListGlobalRulesExecuteCalls gets all the calls that were made to ListGlobalRulesExecute.
// Check the length with:
//     len(mockedGlobalRulesApi.ListGlobalRulesExecuteCalls())
func (mock *GlobalRulesApiMock) ListGlobalRulesExecuteCalls() []struct {
	R ApiListGlobalRulesRequest
} {
	var calls []struct {
		R ApiListGlobalRulesRequest
	}
	mock.lockListGlobalRulesExecute.RLock()
	calls = mock.calls.ListGlobalRulesExecute
	mock.lockListGlobalRulesExecute.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package registryinstanceclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that MetadataApiMock does implement MetadataApi.
// If this is not the case, regenerate this file with moq.
var _ MetadataApi = &MetadataApiMock{}

// MetadataApiMock is a mock implementation of MetadataApi.
//
// 	func TestSomethingThatUsesMetadataApi(t *testing.T) {
//
// 		// make and configure a mocked MetadataApi
// 		mockedMetadataApi := &MetadataApiMock{
// 			DeleteArtifactVersionMetaDataFunc: func(ctx _context.Context, groupId string, artifactId string, version string) ApiDeleteArtifactVersionMetaDataRequest {
// 				panic("mock out the DeleteArtifactVersionMetaData method")
// 			},
// 			DeleteArtifactVersionMetaDataExecuteFunc: func(r ApiDeleteArtifactVersionMetaDataRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteArtifactVersionMetaDataExecute method")
// 			},
// 			GetArtifactMetaDataFunc: func(ctx _context.Context, groupId string, artifactId string) ApiGetArtifactMetaDataRequest {
// 				panic("mock out the GetArtifactMetaData method")
// 			},
// 			GetArtifactMetaDataExecuteFunc: func(r ApiGetArtifactMetaDataRequest) (ArtifactMetaData, *_nethttp.Response, error) {
// 				panic("mock out the GetArtifactMetaDataExecute method")
// 			},
// 			GetArtifactVersionMetaDataFunc: func(ctx _context.Context, groupId string, artifactId string, version string) ApiGetArtifactVersionMetaDataRequest {
// 				panic("mock out the GetArtifactVersionMetaData method")
// 			},
// 			GetArtifactVersionMetaDataByContentFunc: func(ctx _context.Context, groupId string, artifactId string) ApiGetArtifactVersionMetaDataByContentRequest {
// 				panic("mock out the GetArtifactVersionMetaDataByContent method")
// 			},
// 			GetArtifactVersionMetaDataByContentExecuteFunc: func(r ApiGetArtifactVersionMetaDataByContentRequest) (VersionMetaData, *_nethttp.Response, error) {
// 				panic("mock out the GetArtifactVersionMetaDataByContentExecute method")
// 			},
// 			GetArtifactVersionMetaDataExecuteFunc: func(r ApiGetArtifactVersionMetaDataRequest) (VersionMetaData, *_nethttp.Response, error) {
// 				panic("mock out the GetArtifactVersionMetaDataExecute method")
// 			},
// 			UpdateArtifactMetaDataFunc: func(ctx _context.Context, groupId string, artifactId string) ApiUpdateArtifactMetaDataRequest {
// 				panic("mock out the UpdateArtifactMetaData method")
// 			},
// 			UpdateArtifactMetaDataExecuteFunc: func(r ApiUpdateArtifactMetaDataRequest) (*_nethttp.Response, error) {
// 				panic("mock out the UpdateArtifactMetaDataExecute method")
// 			},
// 			UpdateArtifactVersionMetaDataFunc: func(ctx _context.Context, groupId string, artifactId string, version string) ApiUpdateArtifactVersionMetaDataRequest {
// 				panic("mock out the UpdateArtifactVersionMetaData method")
// 			},
// 			UpdateArtifactVersionMetaDataExecuteFunc: func(r ApiUpdateArtifactVersionMetaDataRequest) (*_nethttp.Response, error) {
// 				panic("mock out the UpdateArtifactVersionMetaDataExecute method")
// 			},
// 		}
//
// 		// use mockedMetadataApi in code that requires MetadataApi
// 		// and then make assertions.
//
// 	}
type MetadataApiMock struct {
	// DeleteArtifactVersionMetaDataFunc mocks the DeleteArtifactVersionMetaData method.
	DeleteArtifactVersionMetaDataFunc func(ctx _context.Context, groupId string, artifactId string, version string) ApiDeleteArtifactVersionMetaDataRequest

	// DeleteArtifactVersionMetaDataExecuteFunc mocks the DeleteArtifactVersionMetaDataExecute method.
	DeleteArtifactVersionMetaDataExecuteFunc func(r ApiDeleteArtifactVersionMetaDataRequest) (*_nethttp.Response, error)

	// GetArtifactMetaDataFunc mocks the GetArtifactMetaData method.
	GetArtifactMetaDataFunc func(ctx _context.Context, groupId string, artifactId string) ApiGetArtifactMetaDataRequest

	// GetArtifactMetaDataExecuteFunc mocks the GetArtifactMetaDataExecute method.
	GetArtifactMetaDataExecuteFunc func(r ApiGetArtifactMetaDataRequest) (ArtifactMetaData, *_nethttp.Response, error)

	// GetArtifactVersionMetaDataFunc mocks the GetArtifactVersionMetaData method.
	GetArtifactVersionMetaDataFunc func(ctx _context.Context, groupId string, artifactId string, version string) ApiGetArtifactVersionMetaDataRequest

	// GetArtifactVersionMetaDataByContentFunc mocks the GetArtifactVersionMetaDataByContent method.
	GetArtifactVersionMetaDataByContentFunc func(ctx _context.Context, groupId string, artifactId string) ApiGetArtifactVersionMetaDataByContentRequest

	// GetArtifactVersionMetaDataByContentExecuteFunc mocks the GetArtifactVersionMetaDataByContentExecute method.
	GetArtifactVersionMetaDataByContentExecuteFunc func(r ApiGetArtifactVersionMetaDataByContentRequest) (VersionMetaData, *_nethttp.Response, error)

	// GetArtifactVersionMetaDataExecuteFunc mocks the GetArtifactVersionMetaDataExecute method.
	GetArtifactVersionMetaDataExecuteFunc func(r ApiGetArtifactVersionMetaDataRequest) (VersionMetaData, *_nethttp.Response, error)

	// UpdateArtifactMetaDataFunc mocks the UpdateArtifactMetaData method.
	UpdateArtifactMetaDataFunc func(ctx _context.Context, groupId string, artifactId string) ApiUpdateArtifactMetaDataRequest

	// UpdateArtifactMetaDataExecuteFunc mocks the UpdateArtifactMetaDataExecute method.
	UpdateArtifactMetaDataExecuteFunc func(r ApiUpdateArtifactMetaDataRequest) (*_nethttp.Response, error)

	// UpdateArtifactVersionMetaDataFunc mocks the UpdateArtifactVersionMetaData method.
	UpdateArtifactVersionMetaDataFunc func(ctx _context.Context, groupId string, artifactId string, version string) ApiUpdateArtifactVersionMetaDataRequest

	// UpdateArtifactVersionMetaDataExecuteFunc mocks the UpdateArtifactVersionMetaDataExecute method.
	UpdateArtifactVersionMetaDataExecuteFunc func(r ApiUpdateArtifactVersionMetaDataRequest) (*_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteArtifactVersionMetaData holds details about calls to the DeleteArtifactVersionMetaData method.
		DeleteArtifactVersionMetaData []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
			// Version is the version argument value.
			Version string
		}
		// DeleteArtifactVersionMetaDataExecute holds details about calls to the DeleteArtifactVersionMetaDataExecute method.
		DeleteArtifactVersionMetaDataExecute []struct {
			// R is the r argument value.
			R ApiDeleteArtifactVersionMetaDataRequest
		}
		// GetArtifactMetaData holds details about calls to the GetArtifactMetaData method.
		GetArtifactMetaData []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// GetArtifactMetaDataExecute holds details about calls to the GetArtifactMetaDataExecute method.
		GetArtifactMetaDataExecute []struct {
			// R is the r argument value.
			R ApiGetArtifactMetaDataRequest
		}
		// GetArtifactVersionMetaData holds details about calls to the GetArtifactVersionMetaData method.
		GetArtifactVersionMetaData []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
			// Version is the version argument value.
			Version string
		}
		// GetArtifactVersionMetaDataByContent holds details about calls to the GetArtifactVersionMetaDataByContent method.
		GetArtifactVersionMetaDataByContent []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// GetArtifactVersionMetaDataByContentExecute holds details about calls to the GetArtifactVersionMetaDataByContentExecute method.
		GetArtifactVersionMetaDataByContentExecute []struct {
			// R is the r argument value.
			R ApiGetArtifactVersionMetaDataByContentRequest
		}
		// GetArtifactVersionMetaDataExecute holds details about calls to the GetArtifactVersionMetaDataExecute method.
		GetArtifactVersionMetaDataExecute []struct {
			// R is the r argument value.
			R ApiGetArtifactVersionMetaDataRequest
		}
		// UpdateArtifactMetaData holds details about calls to the UpdateArtifactMetaData method.
		UpdateArtifactMetaData []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// UpdateArtifactMetaDataExecute holds details about calls to the UpdateArtifactMetaDataExecute method.
		UpdateArtifactMetaDataExecute []struct {
			// R is the r argument value.
			R ApiUpdateArtifactMetaDataRequest
		}
		// UpdateArtifactVersionMetaData holds details about calls to the UpdateArtifactVersionMetaData method.
		UpdateArtifactVersionMetaData []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
			// Version is the version argument value.
			Version string
		}
		// UpdateArtifactVersionMetaDataExecute holds details about calls to the UpdateArtifactVersionMetaDataExecute method.
		UpdateArtifactVersionMetaDataExecute []struct {
			// R is the r argument value.
			R ApiUpdateArtifactVersionMetaDataRequest
		}
	}
	lockDeleteArtifactVersionMetaData              sync.RWMutex
	lockDeleteArtifactVersionMetaDataExecute       sync.RWMutex
	lockGetArtifactMetaData                        sync.RWMutex
	lockGetArtifactMetaDataExecute                 sync.RWMutex
	lockGetArtifactVersionMetaData                 sync.RWMutex
	lockGetArtifactVersionMetaDataByContent        sync.RWMutex
	lockGetArtifactVersionMetaDataByContentExecute sync.RWMutex
	lockGetArtifactVersionMetaDataExecute          sync.RWMutex
	lockUpdateArtifactMetaData                     sync.RWMutex
	lockUpdateArtifactMetaDataExecute              sync.RWMutex
	lockUpdateArtifactVersionMetaData              sync.RWMutex
	lockUpdateArtifactVersionMetaDataExecute       sync.RWMutex
}

// DeleteArtifactVersionMetaData calls DeleteArtifactVersionMetaDataFunc.
func (mock *MetadataApiMock) DeleteArtifactVersionMetaData(ctx _context.Context, groupId string, artifactId string, version string) ApiDeleteArtifactVersionMetaDataRequest {
	if mock.DeleteArtifactVersionMetaDataFunc == nil {
		panic("MetadataApiMock.DeleteArtifactVersionMetaDataFunc: method is nil but MetadataApi.DeleteArtifactVersionMetaData was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
		Version:    version,
	}
	mock.lockDeleteArtifactVersionMetaData.Lock()
	mock.calls.DeleteArtifactVersionMetaData = append(mock.calls.DeleteArtifactVersionMetaData, callInfo)
	mock.lockDeleteArtifactVersionMetaData.Unlock()
	return mock.DeleteArtifactVersionMetaDataFunc(ctx, groupId, artifactId, version)
}

// DeleteArtifactVersionMetaDataCalls gets all the calls that were made to DeleteArtifactVersionMetaData.
// Check the length with:
//     len(mockedMetadataApi.DeleteArtifactVersionMetaDataCalls())
func (mock *MetadataApiMock) DeleteArtifactVersionMetaDataCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
	Version    string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}
	mock.lockDeleteArtifactVersionMetaData.RLock()
	calls = mock.calls.DeleteArtifactVersionMetaData
	mock.lockDeleteArtifactVersionMetaData.RUnlock()
	return calls
}

// DeleteArtifactVersionMetaDataExecute calls DeleteArtifactVersionMetaDataExecuteFunc.
func (mock *MetadataApiMock) DeleteArtifactVersionMetaDataExecute(r ApiDeleteArtifactVersionMetaDataRequest) (*_nethttp.Response, error) {
	if mock.DeleteArtifactVersionMetaDataExecuteFunc == nil {
		panic("MetadataApiMock.DeleteArtifactVersionMetaDataExecuteFunc: method is nil but MetadataApi.DeleteArtifactVersionMetaDataExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteArtifactVersionMetaDataRequest
	}{
		R: r,
	}
	mock.lockDeleteArtifactVersionMetaDataExecute.Lock()
	mock.calls.DeleteArtifactVersionMetaDataExecute = append(mock.calls.DeleteArtifactVersionMetaDataExecute, callInfo)
	mock.lockDeleteArtifactVersionMetaDataExecute.Unlock()
	return mock.DeleteArtifactVersionMetaDataExecuteFunc(r)
}

// DeleteArtifactVersionMetaDataExecuteCalls gets all the calls that were made to DeleteArtifactVersionMetaDataExecute.
// Check the length with:
//     len(mockedMetadataApi.DeleteArtifactVersionMetaDataExecuteCalls())
func (mock *MetadataApiMock) DeleteArtifactVersionMetaDataExecuteCalls() []struct {
	R ApiDeleteArtifactVersionMetaDataRequest
} {
	var calls []struct {
		R ApiDeleteArtifactVersionMetaDataRequest
	}
	mock.lockDeleteArtifactVersionMetaDataExecute.RLock()
	calls = mock.calls.DeleteArtifactVersionMetaDataExecute
	mock.lockDeleteArtifactVersionMetaDataExecute.RUnlock()
	return calls
}

// GetArtifactMetaData calls GetArtifactMetaDataFunc.
func (mock *MetadataApiMock) GetArtifactMetaData(ctx _context.Context, groupId string, artifactId string) ApiGetArtifactMetaDataRequest {
	if mock.GetArtifactMetaDataFunc == nil {
		panic("MetadataApiMock.GetArtifactMetaDataFunc: method is nil but MetadataApi.GetArtifactMetaData was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockGetArtifactMetaData.Lock()
	mock.calls.GetArtifactMetaData = append(mock.calls.GetArtifactMetaData, callInfo)
	mock.lockGetArtifactMetaData.Unlock()
	return mock.GetArtifactMetaDataFunc(ctx, groupId, artifactId)
}

// GetArtifactMetaDataCalls gets all the calls that were made to GetArtifactMetaData.
// Check the length with:
//     len(mockedMetadataApi.GetArtifactMetaDataCalls())
func (mock *MetadataApiMock) GetArtifactMetaDataCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockGetArtifactMetaData.RLock()
	calls = mock.calls.GetArtifactMetaData
	mock.lockGetArtifactMetaData.RUnlock()
	return calls
}

// GetArtifactMetaDataExecute calls GetArtifactMetaDataExecuteFunc.
func (mock *MetadataApiMock) GetArtifactMetaDataExecute(r ApiGetArtifactMetaDataRequest) (ArtifactMetaData, *_nethttp.Response, error) {
	if mock.GetArtifactMetaDataExecuteFunc == nil {
		panic("MetadataApiMock.GetArtifactMetaDataExecuteFunc: method is nil but MetadataApi.GetArtifactMetaDataExecute was just called")
	}
	callInfo := struct {
		R ApiGetArtifactMetaDataRequest
	}{
		R: r,
	}
	mock.lockGetArtifactMetaDataExecute.Lock()
	mock.calls.GetArtifactMetaDataExecute = append(mock.calls.GetArtifactMetaDataExecute, callInfo)
	mock.lockGetArtifactMetaDataExecute.Unlock()
	return mock.GetArtifactMetaDataExecuteFunc(r)
}

// GetArtifactMetaDataExecuteCalls gets all the calls that were made to GetArtifactMetaDataExecute.
// Check the length with:
//     len(mockedMetadataApi.GetArtifactMetaDataExecuteCalls())
func (mock *MetadataApiMock) GetArtifactMetaDataExecuteCalls() []struct {
	R ApiGetArtifactMetaDataRequest
} {
	var calls []struct {
		R ApiGetArtifactMetaDataRequest
	}
	mock.lockGetArtifactMetaDataExecute.RLock()
	calls = mock.calls.GetArtifactMetaDataExecute
	mock.lockGetArtifactMetaDataExecute.RUnlock()
	return calls
}

// GetArtifactVersionMetaData calls GetArtifactVersionMetaDataFunc.
func (mock *MetadataApiMock) GetArtifactVersionMetaData(ctx _context.Context, groupId string, artifactId string, version string) ApiGetArtifactVersionMetaDataRequest {
	if mock.GetArtifactVersionMetaDataFunc == nil {
		panic("MetadataApiMock.GetArtifactVersionMetaDataFunc: method is nil but MetadataApi.GetArtifactVersionMetaData was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
		Version:    version,
	}
	mock.lockGetArtifactVersionMetaData.Lock()
	mock.calls.GetArtifactVersionMetaData = append(mock.calls.GetArtifactVersionMetaData, callInfo)
	mock.lockGetArtifactVersionMetaData.Unlock()
	return mock.GetArtifactVersionMetaDataFunc(ctx, groupId, artifactId, version)
}

// GetArtifactVersionMetaDataCalls gets all the calls that were made to GetArtifactVersionMetaData.
// Check the length with:
//     len(mockedMetadataApi.GetArtifactVersionMetaDataCalls())
func (mock *MetadataApiMock) GetArtifactVersionMetaDataCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
	Version    string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}
	mock.lockGetArtifactVersionMetaData.RLock()
	calls = mock.calls.GetArtifactVersionMetaData
	mock.lockGetArtifactVersionMetaData.RUnlock()
	return calls
}

// GetArtifactVersionMetaDataByContent calls GetArtifactVersionMetaDataByContentFunc.
func (mock *MetadataApiMock) GetArtifactVersionMetaDataByContent(ctx _context.Context, groupId string, artifactId string) ApiGetArtifactVersionMetaDataByContentRequest {
	if mock.GetArtifactVersionMetaDataByContentFunc == nil {
		panic("MetadataApiMock.GetArtifactVersionMetaDataByContentFunc: method is nil but MetadataApi.GetArtifactVersionMetaDataByContent was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockGetArtifactVersionMetaDataByContent.Lock()
	mock.calls.GetArtifactVersionMetaDataByContent = append(mock.calls.GetArtifactVersionMetaDataByContent, callInfo)
	mock.lockGetArtifactVersionMetaDataByContent.Unlock()
	return mock.GetArtifactVersionMetaDataByContentFunc(ctx, groupId, artifactId)
}

// GetArtifactVersionMetaDataByContentCalls gets all the calls that were made to GetArtifactVersionMetaDataByContent.
// Check the length with:
//     len(mockedMetadataApi.GetArtifactVersionMetaDataByContentCalls())
func (mock *MetadataApiMock) GetArtifactVersionMetaDataByContentCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockGetArtifactVersionMetaDataByContent.RLock()
	calls = mock.calls.GetArtifactVersionMetaDataByContent
	mock.lockGetArtifactVersionMetaDataByContent.RUnlock()
	return calls
}

// GetArtifactVersionMetaDataByContentExecute calls GetArtifactVersionMetaDataByContentExecuteFunc.
func (mock *MetadataApiMock) GetArtifactVersionMetaDataByContentExecute(r ApiGetArtifactVersionMetaDataByContentRequest) (VersionMetaData, *_nethttp.Response, error) {
	if mock.GetArtifactVersionMetaDataByContentExecuteFunc == nil {
		panic("MetadataApiMock.GetArtifactVersionMetaDataByContentExecuteFunc: method is nil but MetadataApi.GetArtifactVersionMetaDataByContentExecute was just called")
	}
	callInfo := struct {
		R ApiGetArtifactVersionMetaDataByContentRequest
	}{
		R: r,
	}
	mock.lockGetArtifactVersionMetaDataByContentExecute.Lock()
	mock.calls.GetArtifactVersionMetaDataByContentExecute = append(mock.calls.GetArtifactVersionMetaDataByContentExecute, callInfo)
	mock.lockGetArtifactVersionMetaDataByContentExecute.Unlock()
	return mock.GetArtifactVersionMetaDataByContentExecuteFunc(r)
}

// GetArtifactVersionMetaDataByContentExecuteCalls gets all the calls that were made to GetArtifactVersionMetaDataByContentExecute.
// Check the length with:
//     len(mockedMetadataApi.GetArtifactVersionMetaDataByContentExecuteCalls())
func (mock *MetadataApiMock) GetArtifactVersionMetaDataByContentExecuteCalls() []struct {
	R ApiGetArtifactVersionMetaDataByContentRequest
} {
	var calls []struct {
		R ApiGetArtifactVersionMetaDataByContentRequest
	}
	mock.lockGetArtifactVersionMetaDataByContentExecute.RLock()
	calls = mock.calls.GetArtifactVersionMetaDataByContentExecute
	mock.lockGetArtifactVersionMetaDataByContentExecute.RUnlock()
	return calls
}

// GetArtifactVersionMetaDataExecute calls GetArtifactVersionMetaDataExecuteFunc.
func (mock *MetadataApiMock) GetArtifactVersionMetaDataExecute(r ApiGetArtifactVersionMetaDataRequest) (VersionMetaData, *_nethttp.Response, error) {
	if mock.GetArtifactVersionMetaDataExecuteFunc == nil {
		panic("MetadataApiMock.GetArtifactVersionMetaDataExecuteFunc: method is nil but MetadataApi.GetArtifactVersionMetaDataExecute was just called")
	}
	callInfo := struct {
		R ApiGetArtifactVersionMetaDataRequest
	}{
		R: r,
	}
	mock.lockGetArtifactVersionMetaDataExecute.Lock()
	mock.calls.GetArtifactVersionMetaDataExecute = append(mock.calls.GetArtifactVersionMetaDataExecute, callInfo)
	mock.lockGetArtifactVersionMetaDataExecute.Unlock()
	return mock.GetArtifactVersionMetaDataExecuteFunc(r)
}

// GetArtifactVersionMetaDataExecuteCalls gets all the calls that were made to GetArtifactVersionMetaDataExecute.
// Check the length with:
//     len(mockedMetadataApi.GetArtifactVersionMetaDataExecuteCalls())
func (mock *MetadataApiMock) GetArtifactVersionMetaDataExecuteCalls() []struct {
	R ApiGetArtifactVersionMetaDataRequest
} {
	var calls []struct {
		R ApiGetArtifactVersionMetaDataRequest
	}
	mock.lockGetArtifactVersionMetaDataExecute.RLock()
	calls = mock.calls.GetArtifactVersionMetaDataExecute
	mock.lockGetArtifactVersionMetaDataExecute.RUnlock()
	return calls
}

// UpdateArtifactMetaData calls UpdateArtifactMetaDataFunc.
func (mock *MetadataApiMock) UpdateArtifactMetaData(ctx _context.Context, groupId string, artifactId string) ApiUpdateArtifactMetaDataRequest {
	if mock.UpdateArtifactMetaDataFunc == nil {
		panic("MetadataApiMock.UpdateArtifactMetaDataFunc: method is nil but MetadataApi.UpdateArtifactMetaData was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockUpdateArtifactMetaData.Lock()
	mock.calls.UpdateArtifactMetaData = append(mock.calls.UpdateArtifactMetaData, callInfo)
	mock.lockUpdateArtifactMetaData.Unlock()
	return mock.UpdateArtifactMetaDataFunc(ctx, groupId, artifactId)
}

// UpdateArtifactMetaDataCalls gets all the calls that were made to UpdateArtifactMetaData.
// Check the length with:
//     len(mockedMetadataApi.UpdateArtifactMetaDataCalls())
func (mock *MetadataApiMock) UpdateArtifactMetaDataCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockUpdateArtifactMetaData.RLock()
	calls = mock.calls.UpdateArtifactMetaData
	mock.lockUpdateArtifactMetaData.RUnlock()
	return calls
}

// UpdateArtifactMetaDataExecute calls UpdateArtifactMetaDataExecuteFunc.
func (mock *MetadataApiMock) UpdateArtifactMetaDataExecute(r ApiUpdateArtifactMetaDataRequest) (*_nethttp.Response, error) {
	if mock.UpdateArtifactMetaDataExecuteFunc == nil {
		panic("MetadataApiMock.UpdateArtifactMetaDataExecuteFunc: method is nil but MetadataApi.UpdateArtifactMetaDataExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateArtifactMetaDataRequest
	}{
		R: r,
	}
	mock.lockUpdateArtifactMetaDataExecute.Lock()
	mock.calls.UpdateArtifactMetaDataExecute = append(mock.calls.UpdateArtifactMetaDataExecute, callInfo)
	mock.lockUpdateArtifactMetaDataExecute.Unlock()
	return mock.UpdateArtifactMetaDataExecuteFunc(r)
}

// UpdateArtifactMetaDataExecuteCalls gets all the calls that were made to UpdateArtifactMetaDataExecute.
// Check the length with:
//     len(mockedMetadataApi.UpdateArtifactMetaDataExecuteCalls())
func (mock *MetadataApiMock) UpdateArtifactMetaDataExecuteCalls() []struct {
	R ApiUpdateArtifactMetaDataRequest
} {
	var calls []struct {
		R ApiUpdateArtifactMetaDataRequest
	}
	mock.lockUpdateArtifactMetaDataExecute.RLock()
	calls = mock.calls.UpdateArtifactMetaDataExecute
	mock.lockUpdateArtifactMetaDataExecute.RUnlock()
	return calls
}

// UpdateArtifactVersionMetaData calls UpdateArtifactVersionMetaDataFunc.
func (mock *MetadataApiMock) UpdateArtifactVersionMetaData(ctx _context.Context, groupId string, artifactId string, version string) ApiUpdateArtifactVersionMetaDataRequest {
	if mock.UpdateArtifactVersionMetaDataFunc == nil {
		panic("MetadataApiMock.UpdateArtifactVersionMetaDataFunc: method is nil but MetadataApi.UpdateArtifactVersionMetaData was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
		Version:    version,
	}
	mock.lockUpdateArtifactVersionMetaData.Lock()
	mock.calls.UpdateArtifactVersionMetaData = append(mock.calls.UpdateArtifactVersionMetaData, callInfo)
	mock.lockUpdateArtifactVersionMetaData.Unlock()
	return mock.UpdateArtifactVersionMetaDataFunc(ctx, groupId, artifactId, version)
}

// UpdateArtifactVersionMetaDataCalls gets all the calls that were made to UpdateArtifactVersionMetaData.
// Check the length with:
//     len(mockedMetadataApi.UpdateArtifactVersionMetaDataCalls())
func (mock *MetadataApiMock) UpdateArtifactVersionMetaDataCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
	Version    string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}
	mock.lockUpdateArtifactVersionMetaData.RLock()
	calls = mock.calls.UpdateArtifactVersionMetaData
	mock.lockUpdateArtifactVersionMetaData.RUnlock()
	return calls
}

// UpdateArtifactVersionMetaDataExecute calls UpdateArtifactVersionMetaDataExecuteFunc.
func (mock *MetadataApiMock) UpdateArtifactVersionMetaDataExecute(r ApiUpdateArtifactVersionMetaDataRequest) (*_nethttp.Response, error) {
	if mock.UpdateArtifactVersionMetaDataExecuteFunc == nil {
		panic("MetadataApiMock.UpdateArtifactVersionMetaDataExecuteFunc: method is nil but MetadataApi.UpdateArtifactVersionMetaDataExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateArtifactVersionMetaDataRequest
	}{
		R: r,
	}
	mock.lockUpdateArtifactVersionMetaDataExecute.Lock()
	mock.calls.UpdateArtifactVersionMetaDataExecute = append(mock.calls.UpdateArtifactVersionMetaDataExecute, callInfo)
	mock.lockUpdateArtifactVersionMetaDataExecute.Unlock()
	return mock.UpdateArtifactVersionMetaDataExecuteFunc(r)
}

// UpdateArtifactVersionMetaDataExecuteCalls gets all the calls that were made to UpdateArtifactVersionMetaDataExecute.
// Check the length with:
//     len(mockedMetadataApi.UpdateArtifactVersionMetaDataExecuteCalls())
func (mock *MetadataApiMock) UpdateArtifactVersionMetaDataExecuteCalls() []struct {
	R ApiUpdateArtifactVersionMetaDataRequest
} {
	var calls []struct {
		R ApiUpdateArtifactVersionMetaDataRequest
	}
	mock.lockUpdateArtifactVersionMetaDataExecute.RLock()
	calls = mock.calls.UpdateArtifactVersionMetaDataExecute
	mock.lockUpdateArtifactVersionMetaDataExecute.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package registryinstanceclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that ArtifactRulesApiMock does implement ArtifactRulesApi.
// If this is not the case, regenerate this file with moq.
var _ ArtifactRulesApi = &ArtifactRulesApiMock{}

// ArtifactRulesApiMock is a mock implementation of ArtifactRulesApi.
//
// 	func TestSomethingThatUsesArtifactRulesApi(t *testing.T) {
//
// 		// make and configure a mocked ArtifactRulesApi
// 		mockedArtifactRulesApi := &ArtifactRulesApiMock{
// 			CreateArtifactRuleFunc: func(ctx _context.Context, groupId string, artifactId string) ApiCreateArtifactRuleRequest {
// 				panic("mock out the CreateArtifactRule method")
// 			},
// 			CreateArtifactRuleExecuteFunc: func(r ApiCreateArtifactRuleRequest) (*_nethttp.Response, error) {
// 				panic("mock out the CreateArtifactRuleExecute method")
// 			},
// 			DeleteArtifactRuleFunc: func(ctx _context.Context, groupId string, artifactId string, rule string) ApiDeleteArtifactRuleRequest {
// 				panic("mock out the DeleteArtifactRule method")
// 			},
// 			DeleteArtifactRuleExecuteFunc: func(r ApiDeleteArtifactRuleRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteArtifactRuleExecute method")
// 			},
// 			DeleteArtifactRulesFunc: func(ctx _context.Context, groupId string, artifactId string) ApiDeleteArtifactRulesRequest {
// 				panic("mock out the DeleteArtifactRules method")
// 			},
// 			DeleteArtifactRulesExecuteFunc: func(r ApiDeleteArtifactRulesRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteArtifactRulesExecute method")
// 			},
// 			GetArtifactRuleConfigFunc: func(ctx _context.Context, groupId string, artifactId string, rule string) ApiGetArtifactRuleConfigRequest {
// 				panic("mock out the GetArtifactRuleConfig method")
// 			},
// 			GetArtifactRuleConfigExecuteFunc: func(r ApiGetArtifactRuleConfigRequest) (Rule, *_nethttp.Response, error) {
// 				panic("mock out the GetArtifactRuleConfigExecute method")
// 			},
// 			ListArtifactRulesFunc: func(ctx _context.Context, groupId string, artifactId string) ApiListArtifactRulesRequest {
// 				panic("mock out the ListArtifactRules method")
// 			},
// 			ListArtifactRulesExecuteFunc: func(r ApiListArtifactRulesRequest) ([]RuleType, *_nethttp.Response, error) {
// 				panic("mock out the ListArtifactRulesExecute method")
// 			},
// 			TestUpdateArtifactFunc: func(ctx _context.Context, groupId string, artifactId string) ApiTestUpdateArtifactRequest {
// 				panic("mock out the TestUpdateArtifact method")
// 			},
// 			TestUpdateArtifactExecuteFunc: func(r ApiTestUpdateArtifactRequest) (*_nethttp.Response, error) {
// 				panic("mock out the TestUpdateArtifactExecute method")
// 			},
// 			UpdateArtifactRuleConfigFunc: func(ctx _context.Context, groupId string, artifactId string, rule string) ApiUpdateArtifactRuleConfigRequest {
// 				panic("mock out the UpdateArtifactRuleConfig method")
// 			},
// 			UpdateArtifactRuleConfigExecuteFunc: func(r ApiUpdateArtifactRuleConfigRequest) (Rule, *_nethttp.Response, error) {
// 				panic("mock out the UpdateArtifactRuleConfigExecute method")
// 			},
// 		}
//
// 		// use mockedArtifactRulesApi in code that requires ArtifactRulesApi
// 		// and then make assertions.
//
// 	}
type ArtifactRulesApiMock struct {
	// CreateArtifactRuleFunc mocks the CreateArtifactRule method.
	CreateArtifactRuleFunc func(ctx _context.Context, groupId string, artifactId string) ApiCreateArtifactRuleRequest

	// CreateArtifactRuleExecuteFunc mocks the CreateArtifactRuleExecute method.
	CreateArtifactRuleExecuteFunc func(r ApiCreateArtifactRuleRequest) (*_nethttp.Response, error)

	// DeleteArtifactRuleFunc mocks the DeleteArtifactRule method.
	DeleteArtifactRuleFunc func(ctx _context.Context, groupId string, artifactId string, rule string) ApiDeleteArtifactRuleRequest

	// DeleteArtifactRuleExecuteFunc mocks the DeleteArtifactRuleExecute method.
	DeleteArtifactRuleExecuteFunc func(r ApiDeleteArtifactRuleRequest) (*_nethttp.Response, error)

	// DeleteArtifactRulesFunc mocks the DeleteArtifactRules method.
	DeleteArtifactRulesFunc func(ctx _context.Context, groupId string, artifactId string) ApiDeleteArtifactRulesRequest

	// DeleteArtifactRulesExecuteFunc mocks the DeleteArtifactRulesExecute method.
	DeleteArtifactRulesExecuteFunc func(r ApiDeleteArtifactRulesRequest) (*_nethttp.Response, error)

	// GetArtifactRuleConfigFunc mocks the GetArtifactRuleConfig method.
	GetArtifactRuleConfigFunc func(ctx _context.Context, groupId string, artifactId string, rule string) ApiGetArtifactRuleConfigRequest

	// GetArtifactRuleConfigExecuteFunc mocks the GetArtifactRuleConfigExecute method.
	GetArtifactRuleConfigExecuteFunc func(r ApiGetArtifactRuleConfigRequest) (Rule, *_nethttp.Response, error)

	// ListArtifactRulesFunc mocks the ListArtifactRules method.
	ListArtifactRulesFunc func(ctx _context.Context, groupId string, artifactId string) ApiListArtifactRulesRequest

	// ListArtifactRulesExecuteFunc mocks the ListArtifactRulesExecute method.
	ListArtifactRulesExecuteFunc func(r ApiListArtifactRulesRequest) ([]RuleType, *_nethttp.Response, error)

	// TestUpdateArtifactFunc mocks the TestUpdateArtifact method.
	TestUpdateArtifactFunc func(ctx _context.Context, groupId string, artifactId string) ApiTestUpdateArtifactRequest

	// TestUpdateArtifactExecuteFunc mocks the TestUpdateArtifactExecute method.
	TestUpdateArtifactExecuteFunc func(r ApiTestUpdateArtifactRequest) (*_nethttp.Response, error)

	// UpdateArtifactRuleConfigFunc mocks the UpdateArtifactRuleConfig method.
	UpdateArtifactRuleConfigFunc func(ctx _context.Context, groupId string, artifactId string, rule string) ApiUpdateArtifactRuleConfigRequest

	// UpdateArtifactRuleConfigExecuteFunc mocks the UpdateArtifactRuleConfigExecute method.
	UpdateArtifactRuleConfigExecuteFunc func(r ApiUpdateArtifactRuleConfigRequest) (Rule, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateArtifactRule holds details about calls to the CreateArtifactRule method.
		CreateArtifactRule []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// CreateArtifactRuleExecute holds details about calls to the CreateArtifactRuleExecute method.
		CreateArtifactRuleExecute []struct {
			// R is the r argument value.
			R ApiCreateArtifactRuleRequest
		}
		// DeleteArtifactRule holds details about calls to the DeleteArtifactRule method.
		DeleteArtifactRule []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
			// Rule is the rule argument value.
			Rule string
		}
		// DeleteArtifactRuleExecute holds details about calls to the DeleteArtifactRuleExecute method.
		DeleteArtifactRuleExecute []struct {
			// R is the r argument value.
			R ApiDeleteArtifactRuleRequest
		}
		// DeleteArtifactRules holds details about calls to the DeleteArtifactRules method.
		DeleteArtifactRules []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// DeleteArtifactRulesExecute holds details about calls to the DeleteArtifactRulesExecute method.
		DeleteArtifactRulesExecute []struct {
			// R is the r argument value.
			R ApiDeleteArtifactRulesRequest
		}
		// GetArtifactRuleConfig holds details about calls to the GetArtifactRuleConfig method.
		GetArtifactRuleConfig []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
			// Rule is the rule argument value.
			Rule string
		}
		// GetArtifactRuleConfigExecute holds details about calls to the GetArtifactRuleConfigExecute method.
		GetArtifactRuleConfigExecute []struct {
			// R is the r argument value.
			R ApiGetArtifactRuleConfigRequest
		}
		// ListArtifactRules holds details about calls to the ListArtifactRules method.
		ListArtifactRules []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// ListArtifactRulesExecute holds details about calls to the ListArtifactRulesExecute method.
		ListArtifactRulesExecute []struct {
			// R is the r argument value.
			R ApiListArtifactRulesRequest
		}
		// TestUpdateArtifact holds details about calls to the TestUpdateArtifact method.
		TestUpdateArtifact []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// TestUpdateArtifactExecute holds details about calls to the TestUpdateArtifactExecute method.
		TestUpdateArtifactExecute []struct {
			// R is the r argument value.
			R ApiTestUpdateArtifactRequest
		}
		// UpdateArtifactRuleConfig holds details about calls to the UpdateArtifactRuleConfig method.
		UpdateArtifactRuleConfig []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
			// Rule is the rule argument value.
			Rule string
		}
		// UpdateArtifactRuleConfigExecute holds details about calls to the UpdateArtifactRuleConfigExecute method.
		UpdateArtifactRuleConfigExecute []struct {
			// R is the r argument value.
			R ApiUpdateArtifactRuleConfigRequest
		}
	}
	lockCreateArtifactRule              sync.RWMutex
	lockCreateArtifactRuleExecute       sync.RWMutex
	lockDeleteArtifactRule              sync.RWMutex
	lockDeleteArtifactRuleExecute       sync.RWMutex
	lockDeleteArtifactRules             sync.RWMutex
	lockDeleteArtifactRulesExecute      sync.RWMutex
	lockGetArtifactRuleConfig           sync.RWMutex
	lockGetArtifactRuleConfigExecute    sync.RWMutex
	lockListArtifactRules               sync.RWMutex
	lockListArtifactRulesExecute        sync.RWMutex
	lockTestUpdateArtifact              sync.RWMutex
	lockTestUpdateArtifactExecute       sync.RWMutex
	lockUpdateArtifactRuleConfig        sync.RWMutex
	lockUpdateArtifactRuleConfigExecute sync.RWMutex
}

// CreateArtifactRule calls CreateArtifactRuleFunc.
func (mock *ArtifactRulesApiMock) CreateArtifactRule(ctx _context.Context, groupId string, artifactId string) ApiCreateArtifactRuleRequest {
	if mock.CreateArtifactRuleFunc == nil {
		panic("ArtifactRulesApiMock.CreateArtifactRuleFunc: method is nil but ArtifactRulesApi.CreateArtifactRule was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockCreateArtifactRule.Lock()
	mock.calls.CreateArtifactRule = append(mock.calls.CreateArtifactRule, callInfo)
	mock.lockCreateArtifactRule.Unlock()
	return mock.CreateArtifactRuleFunc(ctx, groupId, artifactId)
}

// CreateArtifactRuleCalls gets all the calls that were made to CreateArtifactRule.
// Check the length with:
//     len(mockedArtifactRulesApi.CreateArtifactRuleCalls())
func (mock *ArtifactRulesApiMock) CreateArtifactRuleCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockCreateArtifactRule.RLock()
	calls = mock.calls.CreateArtifactRule
	mock.lockCreateArtifactRule.RUnlock()
	return calls
}

// CreateArtifactRuleExecute calls CreateArtifactRuleExecuteFunc.
func (mock *ArtifactRulesApiMock) CreateArtifactRuleExecute(r ApiCreateArtifactRuleRequest) (*_nethttp.Response, error) {
	if mock.CreateArtifactRuleExecuteFunc == nil {
		panic("ArtifactRulesApiMock.CreateArtifactRuleExecuteFunc: method is nil but ArtifactRulesApi.CreateArtifactRuleExecute was just called")
	}
	callInfo := struct {
		R ApiCreateArtifactRuleRequest
	}{
		R: r,
	}
	mock.lockCreateArtifactRuleExecute.Lock()
	mock.calls.CreateArtifactRuleExecute = append(mock.calls.CreateArtifactRuleExecute, callInfo)
	mock.lockCreateArtifactRuleExecute.Unlock()
	return mock.CreateArtifactRuleExecuteFunc(r)
}

// CreateArtifactRuleExecuteCalls gets all the calls that were made to CreateArtifactRuleExecute.
// Check the length with:
//     len(mockedArtifactRulesApi.CreateArtifactRuleExecuteCalls())
func (mock *ArtifactRulesApiMock) CreateArtifactRuleExecuteCalls() []struct {
	R ApiCreateArtifactRuleRequest
} {
	var calls []struct {
		R ApiCreateArtifactRuleRequest
	}
	mock.lockCreateArtifactRuleExecute.RLock()
	calls = mock.calls.CreateArtifactRuleExecute
	mock.lockCreateArtifactRuleExecute.RUnlock()
	return calls
}

// DeleteArtifactRule calls DeleteArtifactRuleFunc.
func (mock *ArtifactRulesApiMock) DeleteArtifactRule(ctx _context.Context, groupId string, artifactId string, rule string) ApiDeleteArtifactRuleRequest {
	if mock.DeleteArtifactRuleFunc == nil {
		panic("ArtifactRulesApiMock.DeleteArtifactRuleFunc: method is nil but ArtifactRulesApi.DeleteArtifactRule was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Rule       string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
		Rule:       rule,
	}
	mock.lockDeleteArtifactRule.Lock()
	mock.calls.DeleteArtifactRule = append(mock.calls.DeleteArtifactRule, callInfo)
	mock.lockDeleteArtifactRule.Unlock()
	return mock.DeleteArtifactRuleFunc(ctx, groupId, artifactId, rule)
}

// DeleteArtifactRuleCalls gets all the calls that were made to DeleteArtifactRule.
// Check the length with:
//     len(mockedArtifactRulesApi.DeleteArtifactRuleCalls())
func (mock *ArtifactRulesApiMock) DeleteArtifactRuleCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
	Rule       string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Rule       string
	}
	mock.lockDeleteArtifactRule.RLock()
	calls = mock.calls.DeleteArtifactRule
	mock.lockDeleteArtifactRule.RUnlock()
	return calls
}

// DeleteArtifactRuleExecute calls DeleteArtifactRuleExecuteFunc.
func (mock *ArtifactRulesApiMock) DeleteArtifactRuleExecute(r ApiDeleteArtifactRuleRequest) (*_nethttp.Response, error) {
	if mock.DeleteArtifactRuleExecuteFunc == nil {
		panic("ArtifactRulesApiMock.DeleteArtifactRuleExecuteFunc: method is nil but ArtifactRulesApi.DeleteArtifactRuleExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteArtifactRuleRequest
	}{
		R: r,
	}
	mock.lockDeleteArtifactRuleExecute.Lock()
	mock.calls.DeleteArtifactRuleExecute = append(mock.calls.DeleteArtifactRuleExecute, callInfo)
	mock.lockDeleteArtifactRuleExecute.Unlock()
	return mock.DeleteArtifactRuleExecuteFunc(r)
}

// DeleteArtifactRuleExecuteCalls gets all the calls that were made to DeleteArtifactRuleExecute.
// Check the length with:
//     len(mockedArtifactRulesApi.DeleteArtifactRuleExecuteCalls())
func (mock *ArtifactRulesApiMock) DeleteArtifactRuleExecuteCalls() []struct {
	R ApiDeleteArtifactRuleRequest
} {
	var calls []struct {
		R ApiDeleteArtifactRuleRequest
	}
	mock.lockDeleteArtifactRuleExecute.RLock()
	calls = mock.calls.DeleteArtifactRuleExecute
	mock.lockDeleteArtifactRuleExecute.RUnlock()
	return calls
}

// DeleteArtifactRules calls DeleteArtifactRulesFunc.
func (mock *ArtifactRulesApiMock) DeleteArtifactRules(ctx _context.Context, groupId string, artifactId string) ApiDeleteArtifactRulesRequest {
	if mock.DeleteArtifactRulesFunc == nil {
		panic("ArtifactRulesApiMock.DeleteArtifactRulesFunc: method is nil but ArtifactRulesApi.DeleteArtifactRules was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockDeleteArtifactRules.Lock()
	mock.calls.DeleteArtifactRules = append(mock.calls.DeleteArtifactRules, callInfo)
	mock.lockDeleteArtifactRules.Unlock()
	return mock.DeleteArtifactRulesFunc(ctx, groupId, artifactId)
}

// DeleteArtifactRulesCalls gets all the calls that were made to DeleteArtifactRules.
// Check the length with:
//     len(mockedArtifactRulesApi.DeleteArtifactRulesCalls())
func (mock *ArtifactRulesApiMock) DeleteArtifactRulesCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockDeleteArtifactRules.RLock()
	calls = mock.calls.DeleteArtifactRules
	mock.lockDeleteArtifactRules.RUnlock()
	return calls
}

// DeleteArtifactRulesExecute calls DeleteArtifactRulesExecuteFunc.
func (mock *ArtifactRulesApiMock) DeleteArtifactRulesExecute(r ApiDeleteArtifactRulesRequest) (*_nethttp.Response, error) {
	if mock.DeleteArtifactRulesExecuteFunc == nil {
		panic("ArtifactRulesApiMock.DeleteArtifactRulesExecuteFunc: method is nil but ArtifactRulesApi.DeleteArtifactRulesExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteArtifactRulesRequest
	}{
		R: r,
	}
	mock.lockDeleteArtifactRulesExecute.Lock()
	mock.calls.DeleteArtifactRulesExecute = append(mock.calls.DeleteArtifactRulesExecute, callInfo)
	mock.lockDeleteArtifactRulesExecute.Unlock()
	return mock.DeleteArtifactRulesExecuteFunc(r)
}

// DeleteArtifactRulesExecuteCalls gets all the calls that were made to DeleteArtifactRulesExecute.
// Check the length with:
//     len(mockedArtifactRulesApi.DeleteArtifactRulesExecuteCalls())
func (mock *ArtifactRulesApiMock) DeleteArtifactRulesExecuteCalls() []struct {
	R ApiDeleteArtifactRulesRequest
} {
	var calls []struct {
		R ApiDeleteArtifactRulesRequest
	}
	mock.lockDeleteArtifactRulesExecute.RLock()
	calls = mock.calls.DeleteArtifactRulesExecute
	mock.lockDeleteArtifactRulesExecute.RUnlock()
	return calls
}

// GetArtifactRuleConfig calls GetArtifactRuleConfigFunc.
func (mock *ArtifactRulesApiMock) GetArtifactRuleConfig(ctx _context.Context, groupId string, artifactId string, rule string) ApiGetArtifactRuleConfigRequest {
	if mock.GetArtifactRuleConfigFunc == nil {
		panic("ArtifactRulesApiMock.GetArtifactRuleConfigFunc: method is nil but ArtifactRulesApi.GetArtifactRuleConfig was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Rule       string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
		Rule:       rule,
	}
	mock.lockGetArtifactRuleConfig.Lock()
	mock.calls.GetArtifactRuleConfig = append(mock.calls.GetArtifactRuleConfig, callInfo)
	mock.lockGetArtifactRuleConfig.Unlock()
	return mock.GetArtifactRuleConfigFunc(ctx, groupId, artifactId, rule)
}

// GetArtifactRuleConfigCalls gets all the calls that were made to GetArtifactRuleConfig.
// Check the length with:
//     len(mockedArtifactRulesApi.GetArtifactRuleConfigCalls())
func (mock *ArtifactRulesApiMock) GetArtifactRuleConfigCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
	Rule       string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Rule       string
	}
	mock.lockGetArtifactRuleConfig.RLock()
	calls = mock.calls.GetArtifactRuleConfig
	mock.lockGetArtifactRuleConfig.RUnlock()
	return calls
}

// GetArtifactRuleConfigExecute calls GetArtifactRuleConfigExecuteFunc.
func (mock *ArtifactRulesApiMock) GetArtifactRuleConfigExecute(r ApiGetArtifactRuleConfigRequest) (Rule, *_nethttp.Response, error) {
	if mock.GetArtifactRuleConfigExecuteFunc == nil {
		panic("ArtifactRulesApiMock.GetArtifactRuleConfigExecuteFunc: method is nil but ArtifactRulesApi.GetArtifactRuleConfigExecute was just called")
	}
	callInfo := struct {
		R ApiGetArtifactRuleConfigRequest
	}{
		R: r,
	}
	mock.lockGetArtifactRuleConfigExecute.Lock()
	mock.calls.GetArtifactRuleConfigExecute = append(mock.calls.GetArtifactRuleConfigExecute, callInfo)
	mock.lockGetArtifactRuleConfigExecute.Unlock()
	return mock.GetArtifactRuleConfigExecuteFunc(r)
}

// GetArtifactRuleConfigExecuteCalls gets all the calls that were made to GetArtifactRuleConfigExecute.
// Check the length with:
//     len(mockedArtifactRulesApi.GetArtifactRuleConfigExecuteCalls())
func (mock *ArtifactRulesApiMock) GetArtifactRuleConfigExecuteCalls() []struct {
	R ApiGetArtifactRuleConfigRequest
} {
	var calls []struct {
		R ApiGetArtifactRuleConfigRequest
	}
	mock.lockGetArtifactRuleConfigExecute.RLock()
	calls = mock.calls.GetArtifactRuleConfigExecute
	mock.lockGetArtifactRuleConfigExecute.RUnlock()
	return calls
}

// ListArtifactRules calls ListArtifactRulesFunc.
func (mock *ArtifactRulesApiMock) ListArtifactRules(ctx _context.Context, groupId string, artifactId string) ApiListArtifactRulesRequest {
	if mock.ListArtifactRulesFunc == nil {
		panic("ArtifactRulesApiMock.ListArtifactRulesFunc: method is nil but ArtifactRulesApi.ListArtifactRules was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockListArtifactRules.Lock()
	mock.calls.ListArtifactRules = append(mock.calls.ListArtifactRules, callInfo)
	mock.lockListArtifactRules.Unlock()
	return mock.ListArtifactRulesFunc(ctx, groupId, artifactId)
}

// ListArtifactRulesCalls gets all the calls that were made to ListArtifactRules.
// Check the length with:
//     len(mockedArtifactRulesApi.ListArtifactRulesCalls())
func (mock *ArtifactRulesApiMock) ListArtifactRulesCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockListArtifactRules.RLock()
	calls = mock.calls.ListArtifactRules
	mock.lockListArtifactRules.RUnlock()
	return calls
}

// ListArtifactRulesExecute calls ListArtifactRulesExecuteFunc.
func (mock *ArtifactRulesApiMock) ListArtifactRulesExecute(r ApiListArtifactRulesRequest) ([]RuleType, *_nethttp.Response, error) {
	if mock.ListArtifactRulesExecuteFunc == nil {
		panic("ArtifactRulesApiMock.ListArtifactRulesExecuteFunc: method is nil but ArtifactRulesApi.ListArtifactRulesExecute was just called")
	}
	callInfo := struct {
		R ApiListArtifactRulesRequest
	}{
		R: r,
	}
	mock.lockListArtifactRulesExecute.Lock()
	mock.calls.ListArtifactRulesExecute = append(mock.calls.ListArtifactRulesExecute, callInfo)
	mock.lockListArtifactRulesExecute.Unlock()
	return mock.ListArtifactRulesExecuteFunc(r)
}

// ListArtifactRulesExecuteCalls gets all the calls that were made to ListArtifactRulesExecute.
// Check the length with:
//     len(mockedArtifactRulesApi.ListArtifactRulesExecuteCalls())
func (mock *ArtifactRulesApiMock) ListArtifactRulesExecuteCalls() []struct {
	R ApiListArtifactRulesRequest
} {
	var calls []struct {
		R ApiListArtifactRulesRequest
	}
	mock.lockListArtifactRulesExecute.RLock()
	calls = mock.calls.ListArtifactRulesExecute
	mock.lockListArtifactRulesExecute.RUnlock()
	return calls
}

// TestUpdateArtifact calls TestUpdateArtifactFunc.
func (mock *ArtifactRulesApiMock) TestUpdateArtifact(ctx _context.Context, groupId string, artifactId string) ApiTestUpdateArtifactRequest {
	if mock.TestUpdateArtifactFunc == nil {
		panic("ArtifactRulesApiMock.TestUpdateArtifactFunc: method is nil but ArtifactRulesApi.TestUpdateArtifact was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockTestUpdateArtifact.Lock()
	mock.calls.TestUpdateArtifact = append(mock.calls.TestUpdateArtifact, callInfo)
	mock.lockTestUpdateArtifact.Unlock()
	return mock.TestUpdateArtifactFunc(ctx, groupId, artifactId)
}

// TestUpdateArtifactCalls gets all the calls that were made to TestUpdateArtifact.
// Check the length with:
//     len(mockedArtifactRulesApi.TestUpdateArtifactCalls())
func (mock *ArtifactRulesApiMock) TestUpdateArtifactCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockTestUpdateArtifact.RLock()
	calls = mock.calls.TestUpdateArtifact
	mock.lockTestUpdateArtifact.RUnlock()
	return calls
}

// TestUpdateArtifactExecute calls TestUpdateArtifactExecuteFunc.
func (mock *ArtifactRulesApiMock) TestUpdateArtifactExecute(r ApiTestUpdateArtifactRequest) (*_nethttp.Response, error) {
	if mock.TestUpdateArtifactExecuteFunc == nil {
		panic("ArtifactRulesApiMock.TestUpdateArtifactExecuteFunc: method is nil but ArtifactRulesApi.TestUpdateArtifactExecute was just called")
	}
	callInfo := struct {
		R ApiTestUpdateArtifactRequest
	}{
		R: r,
	}
	mock.lockTestUpdateArtifactExecute.Lock()
	mock.calls.TestUpdateArtifactExecute = append(mock.calls.TestUpdateArtifactExecute, callInfo)
	mock.lockTestUpdateArtifactExecute.Unlock()
	return mock.TestUpdateArtifactExecuteFunc(r)
}

// TestUpdateArtifactExecuteCalls gets all the calls that were made to TestUpdateArtifactExecute.
// Check the length with:
//     len(mockedArtifactRulesApi.TestUpdateArtifactExecuteCalls())
func (mock *ArtifactRulesApiMock) TestUpdateArtifactExecuteCalls() []struct {
	R ApiTestUpdateArtifactRequest
} {
	var calls []struct {
		R ApiTestUpdateArtifactRequest
	}
	mock.lockTestUpdateArtifactExecute.RLock()
	calls = mock.calls.TestUpdateArtifactExecute
	mock.lockTestUpdateArtifactExecute.RUnlock()
	return calls
}

// UpdateArtifactRuleConfig calls UpdateArtifactRuleConfigFunc.
func (mock *ArtifactRulesApiMock) UpdateArtifactRuleConfig(ctx _context.Context, groupId string, artifactId string, rule string) ApiUpdateArtifactRuleConfigRequest {
	if mock.UpdateArtifactRuleConfigFunc == nil {
		panic("ArtifactRulesApiMock.UpdateArtifactRuleConfigFunc: method is nil but ArtifactRulesApi.UpdateArtifactRuleConfig was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Rule       string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
		Rule:       rule,
	}
	mock.lockUpdateArtifactRuleConfig.Lock()
	mock.calls.UpdateArtifactRuleConfig = append(mock.calls.UpdateArtifactRuleConfig, callInfo)
	mock.lockUpdateArtifactRuleConfig.Unlock()
	return mock.UpdateArtifactRuleConfigFunc(ctx, groupId, artifactId, rule)
}

// UpdateArtifactRuleConfigCalls gets all the calls that were made to UpdateArtifactRuleConfig.
// Check the length with:
//     len(mockedArtifactRulesApi.UpdateArtifactRuleConfigCalls())
func (mock *ArtifactRulesApiMock) UpdateArtifactRuleConfigCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
	Rule       string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Rule       string
	}
	mock.lockUpdateArtifactRuleConfig.RLock()
	calls = mock.calls.UpdateArtifactRuleConfig
	mock.lockUpdateArtifactRuleConfig.RUnlock()
	return calls
}

// UpdateArtifactRuleConfigExecute calls UpdateArtifactRuleConfigExecuteFunc.
func (mock *ArtifactRulesApiMock) UpdateArtifactRuleConfigExecute(r ApiUpdateArtifactRuleConfigRequest) (Rule, *_nethttp.Response, error) {
	if mock.UpdateArtifactRuleConfigExecuteFunc == nil {
		panic("ArtifactRulesApiMock.UpdateArtifactRuleConfigExecuteFunc: method is nil but ArtifactRulesApi.UpdateArtifactRuleConfigExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateArtifactRuleConfigRequest
	}{
		R: r,
	}
	mock.lockUpdateArtifactRuleConfigExecute.Lock()
	mock.calls.UpdateArtifactRuleConfigExecute = append(mock.calls.UpdateArtifactRuleConfigExecute, callInfo)
	mock.lockUpdateArtifactRuleConfigExecute.Unlock()
	return mock.UpdateArtifactRuleConfigExecuteFunc(r)
}

// UpdateArtifactRuleConfigExecuteCalls gets all the calls that were made to UpdateArtifactRuleConfigExecute.
// Check the length with:
//     len(mockedArtifactRulesApi.UpdateArtifactRuleConfigExecuteCalls())
func (mock *ArtifactRulesApiMock) UpdateArtifactRuleConfigExecuteCalls() []struct {
	R ApiUpdateArtifactRuleConfigRequest
} {
	var calls []struct {
		R ApiUpdateArtifactRuleConfigRequest
	}
	mock.lockUpdateArtifactRuleConfigExecute.RLock()
	calls = mock.calls.UpdateArtifactRuleConfigExecute
	mock.lockUpdateArtifactRuleConfigExecute.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package registryinstanceclient

import (
	_context "context"
	_nethttp "net/http"
	"os"
	"sync"
)

// Ensure, that VersionsApiMock does implement VersionsApi.
// If this is not the case, regenerate this file with moq.
var _ VersionsApi = &VersionsApiMock{}

// VersionsApiMock is a mock implementation of VersionsApi.
//
// 	func TestSomethingThatUsesVersionsApi(t *testing.T) {
//
// 		// make and configure a mocked VersionsApi
// 		mockedVersionsApi := &VersionsApiMock{
// 			CreateArtifactVersionFunc: func(ctx _context.Context, groupId string, artifactId string) ApiCreateArtifactVersionRequest {
// 				panic("mock out the CreateArtifactVersion method")
// 			},
// 			CreateArtifactVersionExecuteFunc: func(r ApiCreateArtifactVersionRequest) (VersionMetaData, *_nethttp.Response, error) {
// 				panic("mock out the CreateArtifactVersionExecute method")
// 			},
// 			GetArtifactVersionFunc: func(ctx _context.Context, groupId string, artifactId string, version string) ApiGetArtifactVersionRequest {
// 				panic("mock out the GetArtifactVersion method")
// 			},
// 			GetArtifactVersionExecuteFunc: func(r ApiGetArtifactVersionRequest) (*os.File, *_nethttp.Response, error) {
// 				panic("mock out the GetArtifactVersionExecute method")
// 			},
// 			ListArtifactVersionsFunc: func(ctx _context.Context, groupId string, artifactId string) ApiListArtifactVersionsRequest {
// 				panic("mock out the ListArtifactVersions method")
// 			},
// 			ListArtifactVersionsExecuteFunc: func(r ApiListArtifactVersionsRequest) (VersionSearchResults, *_nethttp.Response, error) {
// 				panic("mock out the ListArtifactVersionsExecute method")
// 			},
// 			UpdateArtifactVersionStateFunc: func(ctx _context.Context, groupId string, artifactId string, version string) ApiUpdateArtifactVersionStateRequest {
// 				panic("mock out the UpdateArtifactVersionState method")
// 			},
// 			UpdateArtifactVersionStateExecuteFunc: func(r ApiUpdateArtifactVersionStateRequest) (*_nethttp.Response, error) {
// 				panic("mock out the UpdateArtifactVersionStateExecute method")
// 			},
// 		}
//
// 		// use mockedVersionsApi in code that requires VersionsApi
// 		// and then make assertions.
//
// 	}
type VersionsApiMock struct {
	// CreateArtifactVersionFunc mocks the CreateArtifactVersion method.
	CreateArtifactVersionFunc func(ctx _context.Context, groupId string, artifactId string) ApiCreateArtifactVersionRequest

	// CreateArtifactVersionExecuteFunc mocks the CreateArtifactVersionExecute method.
	CreateArtifactVersionExecuteFunc func(r ApiCreateArtifactVersionRequest) (VersionMetaData, *_nethttp.Response, error)

	// GetArtifactVersionFunc mocks the GetArtifactVersion method.
	GetArtifactVersionFunc func(ctx _context.Context, groupId string, artifactId string, version string) ApiGetArtifactVersionRequest

	// GetArtifactVersionExecuteFunc mocks the GetArtifactVersionExecute method.
	GetArtifactVersionExecuteFunc func(r ApiGetArtifactVersionRequest) (*os.File, *_nethttp.Response, error)

	// ListArtifactVersionsFunc mocks the ListArtifactVersions method.
	ListArtifactVersionsFunc func(ctx _context.Context, groupId string, artifactId string) ApiListArtifactVersionsRequest

	// ListArtifactVersionsExecuteFunc mocks the ListArtifactVersionsExecute method.
	ListArtifactVersionsExecuteFunc func(r ApiListArtifactVersionsRequest) (VersionSearchResults, *_nethttp.Response, error)

	// UpdateArtifactVersionStateFunc mocks the UpdateArtifactVersionState method.
	UpdateArtifactVersionStateFunc func(ctx _context.Context, groupId string, artifactId string, version string) ApiUpdateArtifactVersionStateRequest

	// UpdateArtifactVersionStateExecuteFunc mocks the UpdateArtifactVersionStateExecute method.
	UpdateArtifactVersionStateExecuteFunc func(r ApiUpdateArtifactVersionStateRequest) (*_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateArtifactVersion holds details about calls to the CreateArtifactVersion method.
		CreateArtifactVersion []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// CreateArtifactVersionExecute holds details about calls to the CreateArtifactVersionExecute method.
		CreateArtifactVersionExecute []struct {
			// R is the r argument value.
			R ApiCreateArtifactVersionRequest
		}
		// GetArtifactVersion holds details about calls to the GetArtifactVersion method.
		GetArtifactVersion []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
			// Version is the version argument value.
			Version string
		}
		// GetArtifactVersionExecute holds details about calls to the GetArtifactVersionExecute method.
		GetArtifactVersionExecute []struct {
			// R is the r argument value.
			R ApiGetArtifactVersionRequest
		}
		// ListArtifactVersions holds details about calls to the ListArtifactVersions method.
		ListArtifactVersions []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// ListArtifactVersionsExecute holds details about calls to the ListArtifactVersionsExecute method.
		ListArtifactVersionsExecute []struct {
			// R is the r argument value.
			R ApiListArtifactVersionsRequest
		}
		// UpdateArtifactVersionState holds details about calls to the UpdateArtifactVersionState method.
		UpdateArtifactVersionState []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
			// Version is the version argument value.
			Version string
		}
		// UpdateArtifactVersionStateExecute holds details about calls to the UpdateArtifactVersionStateExecute method.
		UpdateArtifactVersionStateExecute []struct {
			// R is the r argument value.
			R ApiUpdateArtifactVersionStateRequest
		}
	}
	lockCreateArtifactVersion             sync.RWMutex
	lockCreateArtifactVersionExecute      sync.RWMutex
	lockGetArtifactVersion                sync.RWMutex
	lockGetArtifactVersionExecute         sync.RWMutex
	lockListArtifactVersions              sync.RWMutex
	lockListArtifactVersionsExecute       sync.RWMutex
	lockUpdateArtifactVersionState        sync.RWMutex
	lockUpdateArtifactVersionStateExecute sync.RWMutex
}

// CreateArtifactVersion calls CreateArtifactVersionFunc.
func (mock *VersionsApiMock) CreateArtifactVersion(ctx _context.Context, groupId string, artifactId string) ApiCreateArtifactVersionRequest {
	if mock.CreateArtifactVersionFunc == nil {
		panic("VersionsApiMock.CreateArtifactVersionFunc: method is nil but VersionsApi.CreateArtifactVersion was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockCreateArtifactVersion.Lock()
	mock.calls.CreateArtifactVersion = append(mock.calls.CreateArtifactVersion, callInfo)
	mock.lockCreateArtifactVersion.Unlock()
	return mock.CreateArtifactVersionFunc(ctx, groupId, artifactId)
}

// CreateArtifactVersionCalls gets all the calls that were made to CreateArtifactVersion.
// Check the length with:
//     len(mockedVersionsApi.CreateArtifactVersionCalls())
func (mock *VersionsApiMock) CreateArtifactVersionCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockCreateArtifactVersion.RLock()
	calls = mock.calls.CreateArtifactVersion
	mock.lockCreateArtifactVersion.RUnlock()
	return calls
}

// CreateArtifactVersionExecute calls CreateArtifactVersionExecuteFunc.
func (mock *VersionsApiMock) CreateArtifactVersionExecute(r ApiCreateArtifactVersionRequest) (VersionMetaData, *_nethttp.Response, error) {
	if mock.CreateArtifactVersionExecuteFunc == nil {
		panic("VersionsApiMock.CreateArtifactVersionExecuteFunc: method is nil but VersionsApi.CreateArtifactVersionExecute was just called")
	}
	callInfo := struct {
		R ApiCreateArtifactVersionRequest
	}{
		R: r,
	}
	mock.lockCreateArtifactVersionExecute.Lock()
	mock.calls.CreateArtifactVersionExecute = append(mock.calls.CreateArtifactVersionExecute, callInfo)
	mock.lockCreateArtifactVersionExecute.Unlock()
	return mock.CreateArtifactVersionExecuteFunc(r)
}

// CreateArtifactVersionExecuteCalls gets all the calls that were made to CreateArtifactVersionExecute.
// Check the length with:
//     len(mockedVersionsApi.CreateArtifactVersionExecuteCalls())
func (mock *VersionsApiMock) CreateArtifactVersionExecuteCalls() []struct {
	R ApiCreateArtifactVersionRequest
} {
	var calls []struct {
		R ApiCreateArtifactVersionRequest
	}
	mock.lockCreateArtifactVersionExecute.RLock()
	calls = mock.calls.CreateArtifactVersionExecute
	mock.lockCreateArtifactVersionExecute.RUnlock()
	return calls
}

// GetArtifactVersion calls GetArtifactVersionFunc.
func (mock *VersionsApiMock) GetArtifactVersion(ctx _context.Context, groupId string, artifactId string, version string) ApiGetArtifactVersionRequest {
	if mock.GetArtifactVersionFunc == nil {
		panic("VersionsApiMock.GetArtifactVersionFunc: method is nil but VersionsApi.GetArtifactVersion was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
		Version:    version,
	}
	mock.lockGetArtifactVersion.Lock()
	mock.calls.GetArtifactVersion = append(mock.calls.GetArtifactVersion, callInfo)
	mock.lockGetArtifactVersion.Unlock()
	return mock.GetArtifactVersionFunc(ctx, groupId, artifactId, version)
}

// GetArtifactVersionCalls gets all the calls that were made to GetArtifactVersion.
// Check the length with:
//     len(mockedVersionsApi.GetArtifactVersionCalls())
func (mock *VersionsApiMock) GetArtifactVersionCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
	Version    string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}
	mock.lockGetArtifactVersion.RLock()
	calls = mock.calls.GetArtifactVersion
	mock.lockGetArtifactVersion.RUnlock()
	return calls
}

// GetArtifactVersionExecute calls GetArtifactVersionExecuteFunc.
func (mock *VersionsApiMock) GetArtifactVersionExecute(r ApiGetArtifactVersionRequest) (*os.File, *_nethttp.Response, error) {
	if mock.GetArtifactVersionExecuteFunc == nil {
		panic("VersionsApiMock.GetArtifactVersionExecuteFunc: method is nil but VersionsApi.GetArtifactVersionExecute was just called")
	}
	callInfo := struct {
		R ApiGetArtifactVersionRequest
	}{
		R: r,
	}
	mock.lockGetArtifactVersionExecute.Lock()
	mock.calls.GetArtifactVersionExecute = append(mock.calls.GetArtifactVersionExecute, callInfo)
	mock.lockGetArtifactVersionExecute.Unlock()
	return mock.GetArtifactVersionExecuteFunc(r)
}

// GetArtifactVersionExecuteCalls gets all the calls that were made to GetArtifactVersionExecute.
// Check the length with:
//     len(mockedVersionsApi.GetArtifactVersionExecuteCalls())
func (mock *VersionsApiMock) GetArtifactVersionExecuteCalls() []struct {
	R ApiGetArtifactVersionRequest
} {
	var calls []struct {
		R ApiGetArtifactVersionRequest
	}
	mock.lockGetArtifactVersionExecute.RLock()
	calls = mock.calls.GetArtifactVersionExecute
	mock.lockGetArtifactVersionExecute.RUnlock()
	return calls
}

// ListArtifactVersions calls ListArtifactVersionsFunc.
func (mock *VersionsApiMock) ListArtifactVersions(ctx _context.Context, groupId string, artifactId string) ApiListArtifactVersionsRequest {
	if mock.ListArtifactVersionsFunc == nil {
		panic("VersionsApiMock.ListArtifactVersionsFunc: method is nil but VersionsApi.ListArtifactVersions was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockListArtifactVersions.Lock()
	mock.calls.ListArtifactVersions = append(mock.calls.ListArtifactVersions, callInfo)
	mock.lockListArtifactVersions.Unlock()
	return mock.ListArtifactVersionsFunc(ctx, groupId, artifactId)
}

// ListArtifactVersionsCalls gets all the calls that were made to ListArtifactVersions.
// Check the length with:
//     len(mockedVersionsApi.ListArtifactVersionsCalls())
func (mock *VersionsApiMock) ListArtifactVersionsCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockListArtifactVersions.RLock()
	calls = mock.calls.ListArtifactVersions
	mock.lockListArtifactVersions.RUnlock()
	return calls
}

// ListArtifactVersionsExecute calls ListArtifactVersionsExecuteFunc.
func (mock *VersionsApiMock) ListArtifactVersionsExecute(r ApiListArtifactVersionsRequest) (VersionSearchResults, *_nethttp.Response, error) {
	if mock.ListArtifactVersionsExecuteFunc == nil {
		panic("VersionsApiMock.ListArtifactVersionsExecuteFunc: method is nil but VersionsApi.ListArtifactVersionsExecute was just called")
	}
	callInfo := struct {
		R ApiListArtifactVersionsRequest
	}{
		R: r,
	}
	mock.lockListArtifactVersionsExecute.Lock()
	mock.calls.ListArtifactVersionsExecute = append(mock.calls.ListArtifactVersionsExecute, callInfo)
	mock.lockListArtifactVersionsExecute.Unlock()
	return mock.ListArtifactVersionsExecuteFunc(r)
}

// ListArtifactVersionsExecuteCalls gets all the calls that were made to ListArtifactVersionsExecute.
// Check the length with:
//     len(mockedVersionsApi.ListArtifactVersionsExecuteCalls())
func (mock *VersionsApiMock) ListArtifactVersionsExecuteCalls() []struct {
	R ApiListArtifactVersionsRequest
} {
	var calls []struct {
		R ApiListArtifactVersionsRequest
	}
	mock.lockListArtifactVersionsExecute.RLock()
	calls = mock.calls.ListArtifactVersionsExecute
	mock.lockListArtifactVersionsExecute.RUnlock()
	return calls
}

// UpdateArtifactVersionState calls UpdateArtifactVersionStateFunc.
func (mock *VersionsApiMock) UpdateArtifactVersionState(ctx _context.Context, groupId string, artifactId string, version string) ApiUpdateArtifactVersionStateRequest {
	if mock.UpdateArtifactVersionStateFunc == nil {
		panic("VersionsApiMock.UpdateArtifactVersionStateFunc: method is nil but VersionsApi.UpdateArtifactVersionState was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
		Version:    version,
	}
	mock.lockUpdateArtifactVersionState.Lock()
	mock.calls.UpdateArtifactVersionState = append(mock.calls.UpdateArtifactVersionState, callInfo)
	mock.lockUpdateArtifactVersionState.Unlock()
	return mock.UpdateArtifactVersionStateFunc(ctx, groupId, artifactId, version)
}

// UpdateArtifactVersionStateCalls gets all the calls that were made to UpdateArtifactVersionState.
// Check the length with:
//     len(mockedVersionsApi.UpdateArtifactVersionStateCalls())
func (mock *VersionsApiMock) UpdateArtifactVersionStateCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
	Version    string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
		Version    string
	}
	mock.lockUpdateArtifactVersionState.RLock()
	calls = mock.calls.UpdateArtifactVersionState
	mock.lockUpdateArtifactVersionState.RUnlock()
	return calls
}

// UpdateArtifactVersionStateExecute calls UpdateArtifactVersionStateExecuteFunc.
func (mock *VersionsApiMock) UpdateArtifactVersionStateExecute(r ApiUpdateArtifactVersionStateRequest) (*_nethttp.Response, error) {
	if mock.UpdateArtifactVersionStateExecuteFunc == nil {
		panic("VersionsApiMock.UpdateArtifactVersionStateExecuteFunc: method is nil but VersionsApi.UpdateArtifactVersionStateExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateArtifactVersionStateRequest
	}{
		R: r,
	}
	mock.lockUpdateArtifactVersionStateExecute.Lock()
	mock.calls.UpdateArtifactVersionStateExecute = append(mock.calls.UpdateArtifactVersionStateExecute, callInfo)
	mock.lockUpdateArtifactVersionStateExecute.Unlock()
	return mock.UpdateArtifactVersionStateExecuteFunc(r)
}

// UpdateArtifactVersionStateExecuteCalls gets all the calls that were made to UpdateArtifactVersionStateExecute.
// Check the length with:
//     len(mockedVersionsApi.UpdateArtifactVersionStateExecuteCalls())
func (mock *VersionsApiMock) UpdateArtifactVersionStateExecuteCalls() []struct {
	R ApiUpdateArtifactVersionStateRequest
} {
	var calls []struct {
		R ApiUpdateArtifactVersionStateRequest
	}
	mock.lockUpdateArtifactVersionStateExecute.RLock()
	calls = mock.calls.UpdateArtifactVersionStateExecute
	mock.lockUpdateArtifactVersionStateExecute.RUnlock()
	return calls
}

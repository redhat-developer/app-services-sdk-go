// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package registryinstanceclient

import (
	_context "context"
	_nethttp "net/http"
	"os"
	"sync"
)

// Ensure, that AdminApiMock does implement AdminApi.
// If this is not the case, regenerate this file with moq.
var _ AdminApi = &AdminApiMock{}

// AdminApiMock is a mock implementation of AdminApi.
//
// 	func TestSomethingThatUsesAdminApi(t *testing.T) {
//
// 		// make and configure a mocked AdminApi
// 		mockedAdminApi := &AdminApiMock{
// 			CreateGlobalRuleFunc: func(ctx _context.Context) ApiCreateGlobalRuleRequest {
// 				panic("mock out the CreateGlobalRule method")
// 			},
// 			CreateGlobalRuleExecuteFunc: func(r ApiCreateGlobalRuleRequest) (*_nethttp.Response, error) {
// 				panic("mock out the CreateGlobalRuleExecute method")
// 			},
// 			CreateRoleMappingFunc: func(ctx _context.Context) ApiCreateRoleMappingRequest {
// 				panic("mock out the CreateRoleMapping method")
// 			},
// 			CreateRoleMappingExecuteFunc: func(r ApiCreateRoleMappingRequest) (*_nethttp.Response, error) {
// 				panic("mock out the CreateRoleMappingExecute method")
// 			},
// 			DeleteAllGlobalRulesFunc: func(ctx _context.Context) ApiDeleteAllGlobalRulesRequest {
// 				panic("mock out the DeleteAllGlobalRules method")
// 			},
// 			DeleteAllGlobalRulesExecuteFunc: func(r ApiDeleteAllGlobalRulesRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteAllGlobalRulesExecute method")
// 			},
// 			DeleteGlobalRuleFunc: func(ctx _context.Context, rule RuleType) ApiDeleteGlobalRuleRequest {
// 				panic("mock out the DeleteGlobalRule method")
// 			},
// 			DeleteGlobalRuleExecuteFunc: func(r ApiDeleteGlobalRuleRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteGlobalRuleExecute method")
// 			},
// 			DeleteRoleMappingFunc: func(ctx _context.Context, principalId string) ApiDeleteRoleMappingRequest {
// 				panic("mock out the DeleteRoleMapping method")
// 			},
// 			DeleteRoleMappingExecuteFunc: func(r ApiDeleteRoleMappingRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteRoleMappingExecute method")
// 			},
// 			ExportDataFunc: func(ctx _context.Context) ApiExportDataRequest {
// 				panic("mock out the ExportData method")
// 			},
// 			ExportDataExecuteFunc: func(r ApiExportDataRequest) (*os.File, *_nethttp.Response, error) {
// 				panic("mock out the ExportDataExecute method")
// 			},
// 			GetGlobalRuleConfigFunc: func(ctx _context.Context, rule RuleType) ApiGetGlobalRuleConfigRequest {
// 				panic("mock out the GetGlobalRuleConfig method")
// 			},
// 			GetGlobalRuleConfigExecuteFunc: func(r ApiGetGlobalRuleConfigRequest) (Rule, *_nethttp.Response, error) {
// 				panic("mock out the GetGlobalRuleConfigExecute method")
// 			},
// 			GetLogConfigurationFunc: func(ctx _context.Context, logger string) ApiGetLogConfigurationRequest {
// 				panic("mock out the GetLogConfiguration method")
// 			},
// 			GetLogConfigurationExecuteFunc: func(r ApiGetLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error) {
// 				panic("mock out the GetLogConfigurationExecute method")
// 			},
// 			GetRoleMappingFunc: func(ctx _context.Context, principalId string) ApiGetRoleMappingRequest {
// 				panic("mock out the GetRoleMapping method")
// 			},
// 			GetRoleMappingExecuteFunc: func(r ApiGetRoleMappingRequest) (RoleMapping, *_nethttp.Response, error) {
// 				panic("mock out the GetRoleMappingExecute method")
// 			},
// 			ImportDataFunc: func(ctx _context.Context) ApiImportDataRequest {
// 				panic("mock out the ImportData method")
// 			},
// 			ImportDataExecuteFunc: func(r ApiImportDataRequest) (*_nethttp.Response, error) {
// 				panic("mock out the ImportDataExecute method")
// 			},
// 			ListGlobalRulesFunc: func(ctx _context.Context) ApiListGlobalRulesRequest {
// 				panic("mock out the ListGlobalRules method")
// 			},
// 			ListGlobalRulesExecuteFunc: func(r ApiListGlobalRulesRequest) ([]RuleType, *_nethttp.Response, error) {
// 				panic("mock out the ListGlobalRulesExecute method")
// 			},
// 			ListLogConfigurationsFunc: func(ctx _context.Context) ApiListLogConfigurationsRequest {
// 				panic("mock out the ListLogConfigurations method")
// 			},
// 			ListLogConfigurationsExecuteFunc: func(r ApiListLogConfigurationsRequest) ([]NamedLogConfiguration, *_nethttp.Response, error) {
// 				panic("mock out the ListLogConfigurationsExecute method")
// 			},
// 			ListRoleMappingsFunc: func(ctx _context.Context) ApiListRoleMappingsRequest {
// 				panic("mock out the ListRoleMappings method")
// 			},
// 			ListRoleMappingsExecuteFunc: func(r ApiListRoleMappingsRequest) ([]RoleMapping, *_nethttp.Response, error) {
// 				panic("mock out the ListRoleMappingsExecute method")
// 			},
// 			RemoveLogConfigurationFunc: func(ctx _context.Context, logger string) ApiRemoveLogConfigurationRequest {
// 				panic("mock out the RemoveLogConfiguration method")
// 			},
// 			RemoveLogConfigurationExecuteFunc: func(r ApiRemoveLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error) {
// 				panic("mock out the RemoveLogConfigurationExecute method")
// 			},
// 			SetLogConfigurationFunc: func(ctx _context.Context, logger string) ApiSetLogConfigurationRequest {
// 				panic("mock out the SetLogConfiguration method")
// 			},
// 			SetLogConfigurationExecuteFunc: func(r ApiSetLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error) {
// 				panic("mock out the SetLogConfigurationExecute method")
// 			},
// 			UpdateGlobalRuleConfigFunc: func(ctx _context.Context, rule RuleType) ApiUpdateGlobalRuleConfigRequest {
// 				panic("mock out the UpdateGlobalRuleConfig method")
// 			},
// 			UpdateGlobalRuleConfigExecuteFunc: func(r ApiUpdateGlobalRuleConfigRequest) (Rule, *_nethttp.Response, error) {
// 				panic("mock out the UpdateGlobalRuleConfigExecute method")
// 			},
// 			UpdateRoleMappingFunc: func(ctx _context.Context, principalId string) ApiUpdateRoleMappingRequest {
// 				panic("mock out the UpdateRoleMapping method")
// 			},
// 			UpdateRoleMappingExecuteFunc: func(r ApiUpdateRoleMappingRequest) (*_nethttp.Response, error) {
// 				panic("mock out the UpdateRoleMappingExecute method")
// 			},
// 		}
//
// 		// use mockedAdminApi in code that requires AdminApi
// 		// and then make assertions.
//
// 	}
type AdminApiMock struct {
	// CreateGlobalRuleFunc mocks the CreateGlobalRule method.
	CreateGlobalRuleFunc func(ctx _context.Context) ApiCreateGlobalRuleRequest

	// CreateGlobalRuleExecuteFunc mocks the CreateGlobalRuleExecute method.
	CreateGlobalRuleExecuteFunc func(r ApiCreateGlobalRuleRequest) (*_nethttp.Response, error)

	// CreateRoleMappingFunc mocks the CreateRoleMapping method.
	CreateRoleMappingFunc func(ctx _context.Context) ApiCreateRoleMappingRequest

	// CreateRoleMappingExecuteFunc mocks the CreateRoleMappingExecute method.
	CreateRoleMappingExecuteFunc func(r ApiCreateRoleMappingRequest) (*_nethttp.Response, error)

	// DeleteAllGlobalRulesFunc mocks the DeleteAllGlobalRules method.
	DeleteAllGlobalRulesFunc func(ctx _context.Context) ApiDeleteAllGlobalRulesRequest

	// DeleteAllGlobalRulesExecuteFunc mocks the DeleteAllGlobalRulesExecute method.
	DeleteAllGlobalRulesExecuteFunc func(r ApiDeleteAllGlobalRulesRequest) (*_nethttp.Response, error)

	// DeleteGlobalRuleFunc mocks the DeleteGlobalRule method.
	DeleteGlobalRuleFunc func(ctx _context.Context, rule RuleType) ApiDeleteGlobalRuleRequest

	// DeleteGlobalRuleExecuteFunc mocks the DeleteGlobalRuleExecute method.
	DeleteGlobalRuleExecuteFunc func(r ApiDeleteGlobalRuleRequest) (*_nethttp.Response, error)

	// DeleteRoleMappingFunc mocks the DeleteRoleMapping method.
	DeleteRoleMappingFunc func(ctx _context.Context, principalId string) ApiDeleteRoleMappingRequest

	// DeleteRoleMappingExecuteFunc mocks the DeleteRoleMappingExecute method.
	DeleteRoleMappingExecuteFunc func(r ApiDeleteRoleMappingRequest) (*_nethttp.Response, error)

	// ExportDataFunc mocks the ExportData method.
	ExportDataFunc func(ctx _context.Context) ApiExportDataRequest

	// ExportDataExecuteFunc mocks the ExportDataExecute method.
	ExportDataExecuteFunc func(r ApiExportDataRequest) (*os.File, *_nethttp.Response, error)

	// GetGlobalRuleConfigFunc mocks the GetGlobalRuleConfig method.
	GetGlobalRuleConfigFunc func(ctx _context.Context, rule RuleType) ApiGetGlobalRuleConfigRequest

	// GetGlobalRuleConfigExecuteFunc mocks the GetGlobalRuleConfigExecute method.
	GetGlobalRuleConfigExecuteFunc func(r ApiGetGlobalRuleConfigRequest) (Rule, *_nethttp.Response, error)

	// GetLogConfigurationFunc mocks the GetLogConfiguration method.
	GetLogConfigurationFunc func(ctx _context.Context, logger string) ApiGetLogConfigurationRequest

	// GetLogConfigurationExecuteFunc mocks the GetLogConfigurationExecute method.
	GetLogConfigurationExecuteFunc func(r ApiGetLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error)

	// GetRoleMappingFunc mocks the GetRoleMapping method.
	GetRoleMappingFunc func(ctx _context.Context, principalId string) ApiGetRoleMappingRequest

	// GetRoleMappingExecuteFunc mocks the GetRoleMappingExecute method.
	GetRoleMappingExecuteFunc func(r ApiGetRoleMappingRequest) (RoleMapping, *_nethttp.Response, error)

	// ImportDataFunc mocks the ImportData method.
	ImportDataFunc func(ctx _context.Context) ApiImportDataRequest

	// ImportDataExecuteFunc mocks the ImportDataExecute method.
	ImportDataExecuteFunc func(r ApiImportDataRequest) (*_nethttp.Response, error)

	// ListGlobalRulesFunc mocks the ListGlobalRules method.
	ListGlobalRulesFunc func(ctx _context.Context) ApiListGlobalRulesRequest

	// ListGlobalRulesExecuteFunc mocks the ListGlobalRulesExecute method.
	ListGlobalRulesExecuteFunc func(r ApiListGlobalRulesRequest) ([]RuleType, *_nethttp.Response, error)

	// ListLogConfigurationsFunc mocks the ListLogConfigurations method.
	ListLogConfigurationsFunc func(ctx _context.Context) ApiListLogConfigurationsRequest

	// ListLogConfigurationsExecuteFunc mocks the ListLogConfigurationsExecute method.
	ListLogConfigurationsExecuteFunc func(r ApiListLogConfigurationsRequest) ([]NamedLogConfiguration, *_nethttp.Response, error)

	// ListRoleMappingsFunc mocks the ListRoleMappings method.
	ListRoleMappingsFunc func(ctx _context.Context) ApiListRoleMappingsRequest

	// ListRoleMappingsExecuteFunc mocks the ListRoleMappingsExecute method.
	ListRoleMappingsExecuteFunc func(r ApiListRoleMappingsRequest) ([]RoleMapping, *_nethttp.Response, error)

	// RemoveLogConfigurationFunc mocks the RemoveLogConfiguration method.
	RemoveLogConfigurationFunc func(ctx _context.Context, logger string) ApiRemoveLogConfigurationRequest

	// RemoveLogConfigurationExecuteFunc mocks the RemoveLogConfigurationExecute method.
	RemoveLogConfigurationExecuteFunc func(r ApiRemoveLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error)

	// SetLogConfigurationFunc mocks the SetLogConfiguration method.
	SetLogConfigurationFunc func(ctx _context.Context, logger string) ApiSetLogConfigurationRequest

	// SetLogConfigurationExecuteFunc mocks the SetLogConfigurationExecute method.
	SetLogConfigurationExecuteFunc func(r ApiSetLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error)

	// UpdateGlobalRuleConfigFunc mocks the UpdateGlobalRuleConfig method.
	UpdateGlobalRuleConfigFunc func(ctx _context.Context, rule RuleType) ApiUpdateGlobalRuleConfigRequest

	// UpdateGlobalRuleConfigExecuteFunc mocks the UpdateGlobalRuleConfigExecute method.
	UpdateGlobalRuleConfigExecuteFunc func(r ApiUpdateGlobalRuleConfigRequest) (Rule, *_nethttp.Response, error)

	// UpdateRoleMappingFunc mocks the UpdateRoleMapping method.
	UpdateRoleMappingFunc func(ctx _context.Context, principalId string) ApiUpdateRoleMappingRequest

	// UpdateRoleMappingExecuteFunc mocks the UpdateRoleMappingExecute method.
	UpdateRoleMappingExecuteFunc func(r ApiUpdateRoleMappingRequest) (*_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateGlobalRule holds details about calls to the CreateGlobalRule method.
		CreateGlobalRule []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateGlobalRuleExecute holds details about calls to the CreateGlobalRuleExecute method.
		CreateGlobalRuleExecute []struct {
			// R is the r argument value.
			R ApiCreateGlobalRuleRequest
		}
		// CreateRoleMapping holds details about calls to the CreateRoleMapping method.
		CreateRoleMapping []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateRoleMappingExecute holds details about calls to the CreateRoleMappingExecute method.
		CreateRoleMappingExecute []struct {
			// R is the r argument value.
			R ApiCreateRoleMappingRequest
		}
		// DeleteAllGlobalRules holds details about calls to the DeleteAllGlobalRules method.
		DeleteAllGlobalRules []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// DeleteAllGlobalRulesExecute holds details about calls to the DeleteAllGlobalRulesExecute method.
		DeleteAllGlobalRulesExecute []struct {
			// R is the r argument value.
			R ApiDeleteAllGlobalRulesRequest
		}
		// DeleteGlobalRule holds details about calls to the DeleteGlobalRule method.
		DeleteGlobalRule []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// Rule is the rule argument value.
			Rule RuleType
		}
		// DeleteGlobalRuleExecute holds details about calls to the DeleteGlobalRuleExecute method.
		DeleteGlobalRuleExecute []struct {
			// R is the r argument value.
			R ApiDeleteGlobalRuleRequest
		}
		// DeleteRoleMapping holds details about calls to the DeleteRoleMapping method.
		DeleteRoleMapping []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// PrincipalId is the principalId argument value.
			PrincipalId string
		}
		// DeleteRoleMappingExecute holds details about calls to the DeleteRoleMappingExecute method.
		DeleteRoleMappingExecute []struct {
			// R is the r argument value.
			R ApiDeleteRoleMappingRequest
		}
		// ExportData holds details about calls to the ExportData method.
		ExportData []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ExportDataExecute holds details about calls to the ExportDataExecute method.
		ExportDataExecute []struct {
			// R is the r argument value.
			R ApiExportDataRequest
		}
		// GetGlobalRuleConfig holds details about calls to the GetGlobalRuleConfig method.
		GetGlobalRuleConfig []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// Rule is the rule argument value.
			Rule RuleType
		}
		// GetGlobalRuleConfigExecute holds details about calls to the GetGlobalRuleConfigExecute method.
		GetGlobalRuleConfigExecute []struct {
			// R is the r argument value.
			R ApiGetGlobalRuleConfigRequest
		}
		// GetLogConfiguration holds details about calls to the GetLogConfiguration method.
		GetLogConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// Logger is the logger argument value.
			Logger string
		}
		// GetLogConfigurationExecute holds details about calls to the GetLogConfigurationExecute method.
		GetLogConfigurationExecute []struct {
			// R is the r argument value.
			R ApiGetLogConfigurationRequest
		}
		// GetRoleMapping holds details about calls to the GetRoleMapping method.
		GetRoleMapping []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// PrincipalId is the principalId argument value.
			PrincipalId string
		}
		// GetRoleMappingExecute holds details about calls to the GetRoleMappingExecute method.
		GetRoleMappingExecute []struct {
			// R is the r argument value.
			R ApiGetRoleMappingRequest
		}
		// ImportData holds details about calls to the ImportData method.
		ImportData []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ImportDataExecute holds details about calls to the ImportDataExecute method.
		ImportDataExecute []struct {
			// R is the r argument value.
			R ApiImportDataRequest
		}
		// ListGlobalRules holds details about calls to the ListGlobalRules method.
		ListGlobalRules []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListGlobalRulesExecute holds details about calls to the ListGlobalRulesExecute method.
		ListGlobalRulesExecute []struct {
			// R is the r argument value.
			R ApiListGlobalRulesRequest
		}
		// ListLogConfigurations holds details about calls to the ListLogConfigurations method.
		ListLogConfigurations []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListLogConfigurationsExecute holds details about calls to the ListLogConfigurationsExecute method.
		ListLogConfigurationsExecute []struct {
			// R is the r argument value.
			R ApiListLogConfigurationsRequest
		}
		// ListRoleMappings holds details about calls to the ListRoleMappings method.
		ListRoleMappings []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListRoleMappingsExecute holds details about calls to the ListRoleMappingsExecute method.
		ListRoleMappingsExecute []struct {
			// R is the r argument value.
			R ApiListRoleMappingsRequest
		}
		// RemoveLogConfiguration holds details about calls to the RemoveLogConfiguration method.
		RemoveLogConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// Logger is the logger argument value.
			Logger string
		}
		// RemoveLogConfigurationExecute holds details about calls to the RemoveLogConfigurationExecute method.
		RemoveLogConfigurationExecute []struct {
			// R is the r argument value.
			R ApiRemoveLogConfigurationRequest
		}
		// SetLogConfiguration holds details about calls to the SetLogConfiguration method.
		SetLogConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// Logger is the logger argument value.
			Logger string
		}
		// SetLogConfigurationExecute holds details about calls to the SetLogConfigurationExecute method.
		SetLogConfigurationExecute []struct {
			// R is the r argument value.
			R ApiSetLogConfigurationRequest
		}
		// UpdateGlobalRuleConfig holds details about calls to the UpdateGlobalRuleConfig method.
		UpdateGlobalRuleConfig []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// Rule is the rule argument value.
			Rule RuleType
		}
		// UpdateGlobalRuleConfigExecute holds details about calls to the UpdateGlobalRuleConfigExecute method.
		UpdateGlobalRuleConfigExecute []struct {
			// R is the r argument value.
			R ApiUpdateGlobalRuleConfigRequest
		}
		// UpdateRoleMapping holds details about calls to the UpdateRoleMapping method.
		UpdateRoleMapping []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// PrincipalId is the principalId argument value.
			PrincipalId string
		}
		// UpdateRoleMappingExecute holds details about calls to the UpdateRoleMappingExecute method.
		UpdateRoleMappingExecute []struct {
			// R is the r argument value.
			R ApiUpdateRoleMappingRequest
		}
	}
	lockCreateGlobalRule              sync.RWMutex
	lockCreateGlobalRuleExecute       sync.RWMutex
	lockCreateRoleMapping             sync.RWMutex
	lockCreateRoleMappingExecute      sync.RWMutex
	lockDeleteAllGlobalRules          sync.RWMutex
	lockDeleteAllGlobalRulesExecute   sync.RWMutex
	lockDeleteGlobalRule              sync.RWMutex
	lockDeleteGlobalRuleExecute       sync.RWMutex
	lockDeleteRoleMapping             sync.RWMutex
	lockDeleteRoleMappingExecute      sync.RWMutex
	lockExportData                    sync.RWMutex
	lockExportDataExecute             sync.RWMutex
	lockGetGlobalRuleConfig           sync.RWMutex
	lockGetGlobalRuleConfigExecute    sync.RWMutex
	lockGetLogConfiguration           sync.RWMutex
	lockGetLogConfigurationExecute    sync.RWMutex
	lockGetRoleMapping                sync.RWMutex
	lockGetRoleMappingExecute         sync.RWMutex
	lockImportData                    sync.RWMutex
	lockImportDataExecute             sync.RWMutex
	lockListGlobalRules               sync.RWMutex
	lockListGlobalRulesExecute        sync.RWMutex
	lockListLogConfigurations         sync.RWMutex
	lockListLogConfigurationsExecute  sync.RWMutex
	lockListRoleMappings              sync.RWMutex
	lockListRoleMappingsExecute       sync.RWMutex
	lockRemoveLogConfiguration        sync.RWMutex
	lockRemoveLogConfigurationExecute sync.RWMutex
	lockSetLogConfiguration           sync.RWMutex
	lockSetLogConfigurationExecute    sync.RWMutex
	lockUpdateGlobalRuleConfig        sync.RWMutex
	lockUpdateGlobalRuleConfigExecute sync.RWMutex
	lockUpdateRoleMapping             sync.RWMutex
	lockUpdateRoleMappingExecute      sync.RWMutex
}

// CreateGlobalRule calls CreateGlobalRuleFunc.
func (mock *AdminApiMock) CreateGlobalRule(ctx _context.Context) ApiCreateGlobalRuleRequest {
	if mock.CreateGlobalRuleFunc == nil {
		panic("AdminApiMock.CreateGlobalRuleFunc: method is nil but AdminApi.CreateGlobalRule was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateGlobalRule.Lock()
	mock.calls.CreateGlobalRule = append(mock.calls.CreateGlobalRule, callInfo)
	mock.lockCreateGlobalRule.Unlock()
	return mock.CreateGlobalRuleFunc(ctx)
}

// CreateGlobalRuleCalls gets all the calls that were made to CreateGlobalRule.
// Check the length with:
//     len(mockedAdminApi.CreateGlobalRuleCalls())
func (mock *AdminApiMock) CreateGlobalRuleCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateGlobalRule.RLock()
	calls = mock.calls.CreateGlobalRule
	mock.lockCreateGlobalRule.RUnlock()
	return calls
}

// CreateGlobalRuleExecute calls CreateGlobalRuleExecuteFunc.
func (mock *AdminApiMock) CreateGlobalRuleExecute(r ApiCreateGlobalRuleRequest) (*_nethttp.Response, error) {
	if mock.CreateGlobalRuleExecuteFunc == nil {
		panic("AdminApiMock.CreateGlobalRuleExecuteFunc: method is nil but AdminApi.CreateGlobalRuleExecute was just called")
	}
	callInfo := struct {
		R ApiCreateGlobalRuleRequest
	}{
		R: r,
	}
	mock.lockCreateGlobalRuleExecute.Lock()
	mock.calls.CreateGlobalRuleExecute = append(mock.calls.CreateGlobalRuleExecute, callInfo)
	mock.lockCreateGlobalRuleExecute.Unlock()
	return mock.CreateGlobalRuleExecuteFunc(r)
}

// CreateGlobalRuleExecuteCalls gets all the calls that were made to CreateGlobalRuleExecute.
// Check the length with:
//     len(mockedAdminApi.CreateGlobalRuleExecuteCalls())
func (mock *AdminApiMock) CreateGlobalRuleExecuteCalls() []struct {
	R ApiCreateGlobalRuleRequest
} {
	var calls []struct {
		R ApiCreateGlobalRuleRequest
	}
	mock.lockCreateGlobalRuleExecute.RLock()
	calls = mock.calls.CreateGlobalRuleExecute
	mock.lockCreateGlobalRuleExecute.RUnlock()
	return calls
}

// CreateRoleMapping calls CreateRoleMappingFunc.
func (mock *AdminApiMock) CreateRoleMapping(ctx _context.Context) ApiCreateRoleMappingRequest {
	if mock.CreateRoleMappingFunc == nil {
		panic("AdminApiMock.CreateRoleMappingFunc: method is nil but AdminApi.CreateRoleMapping was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateRoleMapping.Lock()
	mock.calls.CreateRoleMapping = append(mock.calls.CreateRoleMapping, callInfo)
	mock.lockCreateRoleMapping.Unlock()
	return mock.CreateRoleMappingFunc(ctx)
}

// CreateRoleMappingCalls gets all the calls that were made to CreateRoleMapping.
// Check the length with:
//     len(mockedAdminApi.CreateRoleMappingCalls())
func (mock *AdminApiMock) CreateRoleMappingCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateRoleMapping.RLock()
	calls = mock.calls.CreateRoleMapping
	mock.lockCreateRoleMapping.RUnlock()
	return calls
}

// CreateRoleMappingExecute calls CreateRoleMappingExecuteFunc.
func (mock *AdminApiMock) CreateRoleMappingExecute(r ApiCreateRoleMappingRequest) (*_nethttp.Response, error) {
	if mock.CreateRoleMappingExecuteFunc == nil {
		panic("AdminApiMock.CreateRoleMappingExecuteFunc: method is nil but AdminApi.CreateRoleMappingExecute was just called")
	}
	callInfo := struct {
		R ApiCreateRoleMappingRequest
	}{
		R: r,
	}
	mock.lockCreateRoleMappingExecute.Lock()
	mock.calls.CreateRoleMappingExecute = append(mock.calls.CreateRoleMappingExecute, callInfo)
	mock.lockCreateRoleMappingExecute.Unlock()
	return mock.CreateRoleMappingExecuteFunc(r)
}

// CreateRoleMappingExecuteCalls gets all the calls that were made to CreateRoleMappingExecute.
// Check the length with:
//     len(mockedAdminApi.CreateRoleMappingExecuteCalls())
func (mock *AdminApiMock) CreateRoleMappingExecuteCalls() []struct {
	R ApiCreateRoleMappingRequest
} {
	var calls []struct {
		R ApiCreateRoleMappingRequest
	}
	mock.lockCreateRoleMappingExecute.RLock()
	calls = mock.calls.CreateRoleMappingExecute
	mock.lockCreateRoleMappingExecute.RUnlock()
	return calls
}

// DeleteAllGlobalRules calls DeleteAllGlobalRulesFunc.
func (mock *AdminApiMock) DeleteAllGlobalRules(ctx _context.Context) ApiDeleteAllGlobalRulesRequest {
	if mock.DeleteAllGlobalRulesFunc == nil {
		panic("AdminApiMock.DeleteAllGlobalRulesFunc: method is nil but AdminApi.DeleteAllGlobalRules was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockDeleteAllGlobalRules.Lock()
	mock.calls.DeleteAllGlobalRules = append(mock.calls.DeleteAllGlobalRules, callInfo)
	mock.lockDeleteAllGlobalRules.Unlock()
	return mock.DeleteAllGlobalRulesFunc(ctx)
}

// DeleteAllGlobalRulesCalls gets all the calls that were made to DeleteAllGlobalRules.
// Check the length with:
//     len(mockedAdminApi.DeleteAllGlobalRulesCalls())
func (mock *AdminApiMock) DeleteAllGlobalRulesCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockDeleteAllGlobalRules.RLock()
	calls = mock.calls.DeleteAllGlobalRules
	mock.lockDeleteAllGlobalRules.RUnlock()
	return calls
}

// DeleteAllGlobalRulesExecute calls DeleteAllGlobalRulesExecuteFunc.
func (mock *AdminApiMock) DeleteAllGlobalRulesExecute(r ApiDeleteAllGlobalRulesRequest) (*_nethttp.Response, error) {
	if mock.DeleteAllGlobalRulesExecuteFunc == nil {
		panic("AdminApiMock.DeleteAllGlobalRulesExecuteFunc: method is nil but AdminApi.DeleteAllGlobalRulesExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteAllGlobalRulesRequest
	}{
		R: r,
	}
	mock.lockDeleteAllGlobalRulesExecute.Lock()
	mock.calls.DeleteAllGlobalRulesExecute = append(mock.calls.DeleteAllGlobalRulesExecute, callInfo)
	mock.lockDeleteAllGlobalRulesExecute.Unlock()
	return mock.DeleteAllGlobalRulesExecuteFunc(r)
}

// DeleteAllGlobalRulesExecuteCalls gets all the calls that were made to DeleteAllGlobalRulesExecute.
// Check the length with:
//     len(mockedAdminApi.DeleteAllGlobalRulesExecuteCalls())
func (mock *AdminApiMock) DeleteAllGlobalRulesExecuteCalls() []struct {
	R ApiDeleteAllGlobalRulesRequest
} {
	var calls []struct {
		R ApiDeleteAllGlobalRulesRequest
	}
	mock.lockDeleteAllGlobalRulesExecute.RLock()
	calls = mock.calls.DeleteAllGlobalRulesExecute
	mock.lockDeleteAllGlobalRulesExecute.RUnlock()
	return calls
}

// DeleteGlobalRule calls DeleteGlobalRuleFunc.
func (mock *AdminApiMock) DeleteGlobalRule(ctx _context.Context, rule RuleType) ApiDeleteGlobalRuleRequest {
	if mock.DeleteGlobalRuleFunc == nil {
		panic("AdminApiMock.DeleteGlobalRuleFunc: method is nil but AdminApi.DeleteGlobalRule was just called")
	}
	callInfo := struct {
		Ctx  _context.Context
		Rule RuleType
	}{
		Ctx:  ctx,
		Rule: rule,
	}
	mock.lockDeleteGlobalRule.Lock()
	mock.calls.DeleteGlobalRule = append(mock.calls.DeleteGlobalRule, callInfo)
	mock.lockDeleteGlobalRule.Unlock()
	return mock.DeleteGlobalRuleFunc(ctx, rule)
}

// DeleteGlobalRuleCalls gets all the calls that were made to DeleteGlobalRule.
// Check the length with:
//     len(mockedAdminApi.DeleteGlobalRuleCalls())
func (mock *AdminApiMock) DeleteGlobalRuleCalls() []struct {
	Ctx  _context.Context
	Rule RuleType
} {
	var calls []struct {
		Ctx  _context.Context
		Rule RuleType
	}
	mock.lockDeleteGlobalRule.RLock()
	calls = mock.calls.DeleteGlobalRule
	mock.lockDeleteGlobalRule.RUnlock()
	return calls
}

// DeleteGlobalRuleExecute calls DeleteGlobalRuleExecuteFunc.
func (mock *AdminApiMock) DeleteGlobalRuleExecute(r ApiDeleteGlobalRuleRequest) (*_nethttp.Response, error) {
	if mock.DeleteGlobalRuleExecuteFunc == nil {
		panic("AdminApiMock.DeleteGlobalRuleExecuteFunc: method is nil but AdminApi.DeleteGlobalRuleExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteGlobalRuleRequest
	}{
		R: r,
	}
	mock.lockDeleteGlobalRuleExecute.Lock()
	mock.calls.DeleteGlobalRuleExecute = append(mock.calls.DeleteGlobalRuleExecute, callInfo)
	mock.lockDeleteGlobalRuleExecute.Unlock()
	return mock.DeleteGlobalRuleExecuteFunc(r)
}

// DeleteGlobalRuleExecuteCalls gets all the calls that were made to DeleteGlobalRuleExecute.
// Check the length with:
//     len(mockedAdminApi.DeleteGlobalRuleExecuteCalls())
func (mock *AdminApiMock) DeleteGlobalRuleExecuteCalls() []struct {
	R ApiDeleteGlobalRuleRequest
} {
	var calls []struct {
		R ApiDeleteGlobalRuleRequest
	}
	mock.lockDeleteGlobalRuleExecute.RLock()
	calls = mock.calls.DeleteGlobalRuleExecute
	mock.lockDeleteGlobalRuleExecute.RUnlock()
	return calls
}

// DeleteRoleMapping calls DeleteRoleMappingFunc.
func (mock *AdminApiMock) DeleteRoleMapping(ctx _context.Context, principalId string) ApiDeleteRoleMappingRequest {
	if mock.DeleteRoleMappingFunc == nil {
		panic("AdminApiMock.DeleteRoleMappingFunc: method is nil but AdminApi.DeleteRoleMapping was just called")
	}
	callInfo := struct {
		Ctx         _context.Context
		PrincipalId string
	}{
		Ctx:         ctx,
		PrincipalId: principalId,
	}
	mock.lockDeleteRoleMapping.Lock()
	mock.calls.DeleteRoleMapping = append(mock.calls.DeleteRoleMapping, callInfo)
	mock.lockDeleteRoleMapping.Unlock()
	return mock.DeleteRoleMappingFunc(ctx, principalId)
}

// DeleteRoleMappingCalls gets all the calls that were made to DeleteRoleMapping.
// Check the length with:
//     len(mockedAdminApi.DeleteRoleMappingCalls())
func (mock *AdminApiMock) DeleteRoleMappingCalls() []struct {
	Ctx         _context.Context
	PrincipalId string
} {
	var calls []struct {
		Ctx         _context.Context
		PrincipalId string
	}
	mock.lockDeleteRoleMapping.RLock()
	calls = mock.calls.DeleteRoleMapping
	mock.lockDeleteRoleMapping.RUnlock()
	return calls
}

// DeleteRoleMappingExecute calls DeleteRoleMappingExecuteFunc.
func (mock *AdminApiMock) DeleteRoleMappingExecute(r ApiDeleteRoleMappingRequest) (*_nethttp.Response, error) {
	if mock.DeleteRoleMappingExecuteFunc == nil {
		panic("AdminApiMock.DeleteRoleMappingExecuteFunc: method is nil but AdminApi.DeleteRoleMappingExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteRoleMappingRequest
	}{
		R: r,
	}
	mock.lockDeleteRoleMappingExecute.Lock()
	mock.calls.DeleteRoleMappingExecute = append(mock.calls.DeleteRoleMappingExecute, callInfo)
	mock.lockDeleteRoleMappingExecute.Unlock()
	return mock.DeleteRoleMappingExecuteFunc(r)
}

// DeleteRoleMappingExecuteCalls gets all the calls that were made to DeleteRoleMappingExecute.
// Check the length with:
//     len(mockedAdminApi.DeleteRoleMappingExecuteCalls())
func (mock *AdminApiMock) DeleteRoleMappingExecuteCalls() []struct {
	R ApiDeleteRoleMappingRequest
} {
	var calls []struct {
		R ApiDeleteRoleMappingRequest
	}
	mock.lockDeleteRoleMappingExecute.RLock()
	calls = mock.calls.DeleteRoleMappingExecute
	mock.lockDeleteRoleMappingExecute.RUnlock()
	return calls
}

// ExportData calls ExportDataFunc.
func (mock *AdminApiMock) ExportData(ctx _context.Context) ApiExportDataRequest {
	if mock.ExportDataFunc == nil {
		panic("AdminApiMock.ExportDataFunc: method is nil but AdminApi.ExportData was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockExportData.Lock()
	mock.calls.ExportData = append(mock.calls.ExportData, callInfo)
	mock.lockExportData.Unlock()
	return mock.ExportDataFunc(ctx)
}

// ExportDataCalls gets all the calls that were made to ExportData.
// Check the length with:
//     len(mockedAdminApi.ExportDataCalls())
func (mock *AdminApiMock) ExportDataCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockExportData.RLock()
	calls = mock.calls.ExportData
	mock.lockExportData.RUnlock()
	return calls
}

// ExportDataExecute calls ExportDataExecuteFunc.
func (mock *AdminApiMock) ExportDataExecute(r ApiExportDataRequest) (*os.File, *_nethttp.Response, error) {
	if mock.ExportDataExecuteFunc == nil {
		panic("AdminApiMock.ExportDataExecuteFunc: method is nil but AdminApi.ExportDataExecute was just called")
	}
	callInfo := struct {
		R ApiExportDataRequest
	}{
		R: r,
	}
	mock.lockExportDataExecute.Lock()
	mock.calls.ExportDataExecute = append(mock.calls.ExportDataExecute, callInfo)
	mock.lockExportDataExecute.Unlock()
	return mock.ExportDataExecuteFunc(r)
}

// ExportDataExecuteCalls gets all the calls that were made to ExportDataExecute.
// Check the length with:
//     len(mockedAdminApi.ExportDataExecuteCalls())
func (mock *AdminApiMock) ExportDataExecuteCalls() []struct {
	R ApiExportDataRequest
} {
	var calls []struct {
		R ApiExportDataRequest
	}
	mock.lockExportDataExecute.RLock()
	calls = mock.calls.ExportDataExecute
	mock.lockExportDataExecute.RUnlock()
	return calls
}

// GetGlobalRuleConfig calls GetGlobalRuleConfigFunc.
func (mock *AdminApiMock) GetGlobalRuleConfig(ctx _context.Context, rule RuleType) ApiGetGlobalRuleConfigRequest {
	if mock.GetGlobalRuleConfigFunc == nil {
		panic("AdminApiMock.GetGlobalRuleConfigFunc: method is nil but AdminApi.GetGlobalRuleConfig was just called")
	}
	callInfo := struct {
		Ctx  _context.Context
		Rule RuleType
	}{
		Ctx:  ctx,
		Rule: rule,
	}
	mock.lockGetGlobalRuleConfig.Lock()
	mock.calls.GetGlobalRuleConfig = append(mock.calls.GetGlobalRuleConfig, callInfo)
	mock.lockGetGlobalRuleConfig.Unlock()
	return mock.GetGlobalRuleConfigFunc(ctx, rule)
}

// GetGlobalRuleConfigCalls gets all the calls that were made to GetGlobalRuleConfig.
// Check the length with:
//     len(mockedAdminApi.GetGlobalRuleConfigCalls())
func (mock *AdminApiMock) GetGlobalRuleConfigCalls() []struct {
	Ctx  _context.Context
	Rule RuleType
} {
	var calls []struct {
		Ctx  _context.Context
		Rule RuleType
	}
	mock.lockGetGlobalRuleConfig.RLock()
	calls = mock.calls.GetGlobalRuleConfig
	mock.lockGetGlobalRuleConfig.RUnlock()
	return calls
}

// GetGlobalRuleConfigExecute calls GetGlobalRuleConfigExecuteFunc.
func (mock *AdminApiMock) GetGlobalRuleConfigExecute(r ApiGetGlobalRuleConfigRequest) (Rule, *_nethttp.Response, error) {
	if mock.GetGlobalRuleConfigExecuteFunc == nil {
		panic("AdminApiMock.GetGlobalRuleConfigExecuteFunc: method is nil but AdminApi.GetGlobalRuleConfigExecute was just called")
	}
	callInfo := struct {
		R ApiGetGlobalRuleConfigRequest
	}{
		R: r,
	}
	mock.lockGetGlobalRuleConfigExecute.Lock()
	mock.calls.GetGlobalRuleConfigExecute = append(mock.calls.GetGlobalRuleConfigExecute, callInfo)
	mock.lockGetGlobalRuleConfigExecute.Unlock()
	return mock.GetGlobalRuleConfigExecuteFunc(r)
}

// GetGlobalRuleConfigExecuteCalls gets all the calls that were made to GetGlobalRuleConfigExecute.
// Check the length with:
//     len(mockedAdminApi.GetGlobalRuleConfigExecuteCalls())
func (mock *AdminApiMock) GetGlobalRuleConfigExecuteCalls() []struct {
	R ApiGetGlobalRuleConfigRequest
} {
	var calls []struct {
		R ApiGetGlobalRuleConfigRequest
	}
	mock.lockGetGlobalRuleConfigExecute.RLock()
	calls = mock.calls.GetGlobalRuleConfigExecute
	mock.lockGetGlobalRuleConfigExecute.RUnlock()
	return calls
}

// GetLogConfiguration calls GetLogConfigurationFunc.
func (mock *AdminApiMock) GetLogConfiguration(ctx _context.Context, logger string) ApiGetLogConfigurationRequest {
	if mock.GetLogConfigurationFunc == nil {
		panic("AdminApiMock.GetLogConfigurationFunc: method is nil but AdminApi.GetLogConfiguration was just called")
	}
	callInfo := struct {
		Ctx    _context.Context
		Logger string
	}{
		Ctx:    ctx,
		Logger: logger,
	}
	mock.lockGetLogConfiguration.Lock()
	mock.calls.GetLogConfiguration = append(mock.calls.GetLogConfiguration, callInfo)
	mock.lockGetLogConfiguration.Unlock()
	return mock.GetLogConfigurationFunc(ctx, logger)
}

// GetLogConfigurationCalls gets all the calls that were made to GetLogConfiguration.
// Check the length with:
//     len(mockedAdminApi.GetLogConfigurationCalls())
func (mock *AdminApiMock) GetLogConfigurationCalls() []struct {
	Ctx    _context.Context
	Logger string
} {
	var calls []struct {
		Ctx    _context.Context
		Logger string
	}
	mock.lockGetLogConfiguration.RLock()
	calls = mock.calls.GetLogConfiguration
	mock.lockGetLogConfiguration.RUnlock()
	return calls
}

// GetLogConfigurationExecute calls GetLogConfigurationExecuteFunc.
func (mock *AdminApiMock) GetLogConfigurationExecute(r ApiGetLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error) {
	if mock.GetLogConfigurationExecuteFunc == nil {
		panic("AdminApiMock.GetLogConfigurationExecuteFunc: method is nil but AdminApi.GetLogConfigurationExecute was just called")
	}
	callInfo := struct {
		R ApiGetLogConfigurationRequest
	}{
		R: r,
	}
	mock.lockGetLogConfigurationExecute.Lock()
	mock.calls.GetLogConfigurationExecute = append(mock.calls.GetLogConfigurationExecute, callInfo)
	mock.lockGetLogConfigurationExecute.Unlock()
	return mock.GetLogConfigurationExecuteFunc(r)
}

// GetLogConfigurationExecuteCalls gets all the calls that were made to GetLogConfigurationExecute.
// Check the length with:
//     len(mockedAdminApi.GetLogConfigurationExecuteCalls())
func (mock *AdminApiMock) GetLogConfigurationExecuteCalls() []struct {
	R ApiGetLogConfigurationRequest
} {
	var calls []struct {
		R ApiGetLogConfigurationRequest
	}
	mock.lockGetLogConfigurationExecute.RLock()
	calls = mock.calls.GetLogConfigurationExecute
	mock.lockGetLogConfigurationExecute.RUnlock()
	return calls
}

// GetRoleMapping calls GetRoleMappingFunc.
func (mock *AdminApiMock) GetRoleMapping(ctx _context.Context, principalId string) ApiGetRoleMappingRequest {
	if mock.GetRoleMappingFunc == nil {
		panic("AdminApiMock.GetRoleMappingFunc: method is nil but AdminApi.GetRoleMapping was just called")
	}
	callInfo := struct {
		Ctx         _context.Context
		PrincipalId string
	}{
		Ctx:         ctx,
		PrincipalId: principalId,
	}
	mock.lockGetRoleMapping.Lock()
	mock.calls.GetRoleMapping = append(mock.calls.GetRoleMapping, callInfo)
	mock.lockGetRoleMapping.Unlock()
	return mock.GetRoleMappingFunc(ctx, principalId)
}

// GetRoleMappingCalls gets all the calls that were made to GetRoleMapping.
// Check the length with:
//     len(mockedAdminApi.GetRoleMappingCalls())
func (mock *AdminApiMock) GetRoleMappingCalls() []struct {
	Ctx         _context.Context
	PrincipalId string
} {
	var calls []struct {
		Ctx         _context.Context
		PrincipalId string
	}
	mock.lockGetRoleMapping.RLock()
	calls = mock.calls.GetRoleMapping
	mock.lockGetRoleMapping.RUnlock()
	return calls
}

// GetRoleMappingExecute calls GetRoleMappingExecuteFunc.
func (mock *AdminApiMock) GetRoleMappingExecute(r ApiGetRoleMappingRequest) (RoleMapping, *_nethttp.Response, error) {
	if mock.GetRoleMappingExecuteFunc == nil {
		panic("AdminApiMock.GetRoleMappingExecuteFunc: method is nil but AdminApi.GetRoleMappingExecute was just called")
	}
	callInfo := struct {
		R ApiGetRoleMappingRequest
	}{
		R: r,
	}
	mock.lockGetRoleMappingExecute.Lock()
	mock.calls.GetRoleMappingExecute = append(mock.calls.GetRoleMappingExecute, callInfo)
	mock.lockGetRoleMappingExecute.Unlock()
	return mock.GetRoleMappingExecuteFunc(r)
}

// GetRoleMappingExecuteCalls gets all the calls that were made to GetRoleMappingExecute.
// Check the length with:
//     len(mockedAdminApi.GetRoleMappingExecuteCalls())
func (mock *AdminApiMock) GetRoleMappingExecuteCalls() []struct {
	R ApiGetRoleMappingRequest
} {
	var calls []struct {
		R ApiGetRoleMappingRequest
	}
	mock.lockGetRoleMappingExecute.RLock()
	calls = mock.calls.GetRoleMappingExecute
	mock.lockGetRoleMappingExecute.RUnlock()
	return calls
}

// ImportData calls ImportDataFunc.
func (mock *AdminApiMock) ImportData(ctx _context.Context) ApiImportDataRequest {
	if mock.ImportDataFunc == nil {
		panic("AdminApiMock.ImportDataFunc: method is nil but AdminApi.ImportData was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockImportData.Lock()
	mock.calls.ImportData = append(mock.calls.ImportData, callInfo)
	mock.lockImportData.Unlock()
	return mock.ImportDataFunc(ctx)
}

// ImportDataCalls gets all the calls that were made to ImportData.
// Check the length with:
//     len(mockedAdminApi.ImportDataCalls())
func (mock *AdminApiMock) ImportDataCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockImportData.RLock()
	calls = mock.calls.ImportData
	mock.lockImportData.RUnlock()
	return calls
}

// ImportDataExecute calls ImportDataExecuteFunc.
func (mock *AdminApiMock) ImportDataExecute(r ApiImportDataRequest) (*_nethttp.Response, error) {
	if mock.ImportDataExecuteFunc == nil {
		panic("AdminApiMock.ImportDataExecuteFunc: method is nil but AdminApi.ImportDataExecute was just called")
	}
	callInfo := struct {
		R ApiImportDataRequest
	}{
		R: r,
	}
	mock.lockImportDataExecute.Lock()
	mock.calls.ImportDataExecute = append(mock.calls.ImportDataExecute, callInfo)
	mock.lockImportDataExecute.Unlock()
	return mock.ImportDataExecuteFunc(r)
}

// ImportDataExecuteCalls gets all the calls that were made to ImportDataExecute.
// Check the length with:
//     len(mockedAdminApi.ImportDataExecuteCalls())
func (mock *AdminApiMock) ImportDataExecuteCalls() []struct {
	R ApiImportDataRequest
} {
	var calls []struct {
		R ApiImportDataRequest
	}
	mock.lockImportDataExecute.RLock()
	calls = mock.calls.ImportDataExecute
	mock.lockImportDataExecute.RUnlock()
	return calls
}

// ListGlobalRules calls ListGlobalRulesFunc.
func (mock *AdminApiMock) ListGlobalRules(ctx _context.Context) ApiListGlobalRulesRequest {
	if mock.ListGlobalRulesFunc == nil {
		panic("AdminApiMock.ListGlobalRulesFunc: method is nil but AdminApi.ListGlobalRules was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListGlobalRules.Lock()
	mock.calls.ListGlobalRules = append(mock.calls.ListGlobalRules, callInfo)
	mock.lockListGlobalRules.Unlock()
	return mock.ListGlobalRulesFunc(ctx)
}

// ListGlobalRulesCalls gets all the calls that were made to ListGlobalRules.
// Check the length with:
//     len(mockedAdminApi.ListGlobalRulesCalls())
func (mock *AdminApiMock) ListGlobalRulesCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListGlobalRules.RLock()
	calls = mock.calls.ListGlobalRules
	mock.lockListGlobalRules.RUnlock()
	return calls
}

// ListGlobalRulesExecute calls ListGlobalRulesExecuteFunc.
func (mock *AdminApiMock) ListGlobalRulesExecute(r ApiListGlobalRulesRequest) ([]RuleType, *_nethttp.Response, error) {
	if mock.ListGlobalRulesExecuteFunc == nil {
		panic("AdminApiMock.ListGlobalRulesExecuteFunc: method is nil but AdminApi.ListGlobalRulesExecute was just called")
	}
	callInfo := struct {
		R ApiListGlobalRulesRequest
	}{
		R: r,
	}
	mock.lockListGlobalRulesExecute.Lock()
	mock.calls.ListGlobalRulesExecute = append(mock.calls.ListGlobalRulesExecute, callInfo)
	mock.lockListGlobalRulesExecute.Unlock()
	return mock.ListGlobalRulesExecuteFunc(r)
}

// ListGlobalRulesExecuteCalls gets all the calls that were made to ListGlobalRulesExecute.
// Check the length with:
//     len(mockedAdminApi.ListGlobalRulesExecuteCalls())
func (mock *AdminApiMock) ListGlobalRulesExecuteCalls() []struct {
	R ApiListGlobalRulesRequest
} {
	var calls []struct {
		R ApiListGlobalRulesRequest
	}
	mock.lockListGlobalRulesExecute.RLock()
	calls = mock.calls.ListGlobalRulesExecute
	mock.lockListGlobalRulesExecute.RUnlock()
	return calls
}

// ListLogConfigurations calls ListLogConfigurationsFunc.
func (mock *AdminApiMock) ListLogConfigurations(ctx _context.Context) ApiListLogConfigurationsRequest {
	if mock.ListLogConfigurationsFunc == nil {
		panic("AdminApiMock.ListLogConfigurationsFunc: method is nil but AdminApi.ListLogConfigurations was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListLogConfigurations.Lock()
	mock.calls.ListLogConfigurations = append(mock.calls.ListLogConfigurations, callInfo)
	mock.lockListLogConfigurations.Unlock()
	return mock.ListLogConfigurationsFunc(ctx)
}

// ListLogConfigurationsCalls gets all the calls that were made to ListLogConfigurations.
// Check the length with:
//     len(mockedAdminApi.ListLogConfigurationsCalls())
func (mock *AdminApiMock) ListLogConfigurationsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListLogConfigurations.RLock()
	calls = mock.calls.ListLogConfigurations
	mock.lockListLogConfigurations.RUnlock()
	return calls
}

// ListLogConfigurationsExecute calls ListLogConfigurationsExecuteFunc.
func (mock *AdminApiMock) ListLogConfigurationsExecute(r ApiListLogConfigurationsRequest) ([]NamedLogConfiguration, *_nethttp.Response, error) {
	if mock.ListLogConfigurationsExecuteFunc == nil {
		panic("AdminApiMock.ListLogConfigurationsExecuteFunc: method is nil but AdminApi.ListLogConfigurationsExecute was just called")
	}
	callInfo := struct {
		R ApiListLogConfigurationsRequest
	}{
		R: r,
	}
	mock.lockListLogConfigurationsExecute.Lock()
	mock.calls.ListLogConfigurationsExecute = append(mock.calls.ListLogConfigurationsExecute, callInfo)
	mock.lockListLogConfigurationsExecute.Unlock()
	return mock.ListLogConfigurationsExecuteFunc(r)
}

// ListLogConfigurationsExecuteCalls gets all the calls that were made to ListLogConfigurationsExecute.
// Check the length with:
//     len(mockedAdminApi.ListLogConfigurationsExecuteCalls())
func (mock *AdminApiMock) ListLogConfigurationsExecuteCalls() []struct {
	R ApiListLogConfigurationsRequest
} {
	var calls []struct {
		R ApiListLogConfigurationsRequest
	}
	mock.lockListLogConfigurationsExecute.RLock()
	calls = mock.calls.ListLogConfigurationsExecute
	mock.lockListLogConfigurationsExecute.RUnlock()
	return calls
}

// ListRoleMappings calls ListRoleMappingsFunc.
func (mock *AdminApiMock) ListRoleMappings(ctx _context.Context) ApiListRoleMappingsRequest {
	if mock.ListRoleMappingsFunc == nil {
		panic("AdminApiMock.ListRoleMappingsFunc: method is nil but AdminApi.ListRoleMappings was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListRoleMappings.Lock()
	mock.calls.ListRoleMappings = append(mock.calls.ListRoleMappings, callInfo)
	mock.lockListRoleMappings.Unlock()
	return mock.ListRoleMappingsFunc(ctx)
}

// ListRoleMappingsCalls gets all the calls that were made to ListRoleMappings.
// Check the length with:
//     len(mockedAdminApi.ListRoleMappingsCalls())
func (mock *AdminApiMock) ListRoleMappingsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListRoleMappings.RLock()
	calls = mock.calls.ListRoleMappings
	mock.lockListRoleMappings.RUnlock()
	return calls
}

// ListRoleMappingsExecute calls ListRoleMappingsExecuteFunc.
func (mock *AdminApiMock) ListRoleMappingsExecute(r ApiListRoleMappingsRequest) ([]RoleMapping, *_nethttp.Response, error) {
	if mock.ListRoleMappingsExecuteFunc == nil {
		panic("AdminApiMock.ListRoleMappingsExecuteFunc: method is nil but AdminApi.ListRoleMappingsExecute was just called")
	}
	callInfo := struct {
		R ApiListRoleMappingsRequest
	}{
		R: r,
	}
	mock.lockListRoleMappingsExecute.Lock()
	mock.calls.ListRoleMappingsExecute = append(mock.calls.ListRoleMappingsExecute, callInfo)
	mock.lockListRoleMappingsExecute.Unlock()
	return mock.ListRoleMappingsExecuteFunc(r)
}

// ListRoleMappingsExecuteCalls gets all the calls that were made to ListRoleMappingsExecute.
// Check the length with:
//     len(mockedAdminApi.ListRoleMappingsExecuteCalls())
func (mock *AdminApiMock) ListRoleMappingsExecuteCalls() []struct {
	R ApiListRoleMappingsRequest
} {
	var calls []struct {
		R ApiListRoleMappingsRequest
	}
	mock.lockListRoleMappingsExecute.RLock()
	calls = mock.calls.ListRoleMappingsExecute
	mock.lockListRoleMappingsExecute.RUnlock()
	return calls
}

// RemoveLogConfiguration calls RemoveLogConfigurationFunc.
func (mock *AdminApiMock) RemoveLogConfiguration(ctx _context.Context, logger string) ApiRemoveLogConfigurationRequest {
	if mock.RemoveLogConfigurationFunc == nil {
		panic("AdminApiMock.RemoveLogConfigurationFunc: method is nil but AdminApi.RemoveLogConfiguration was just called")
	}
	callInfo := struct {
		Ctx    _context.Context
		Logger string
	}{
		Ctx:    ctx,
		Logger: logger,
	}
	mock.lockRemoveLogConfiguration.Lock()
	mock.calls.RemoveLogConfiguration = append(mock.calls.RemoveLogConfiguration, callInfo)
	mock.lockRemoveLogConfiguration.Unlock()
	return mock.RemoveLogConfigurationFunc(ctx, logger)
}

// RemoveLogConfigurationCalls gets all the calls that were made to RemoveLogConfiguration.
// Check the length with:
//     len(mockedAdminApi.RemoveLogConfigurationCalls())
func (mock *AdminApiMock) RemoveLogConfigurationCalls() []struct {
	Ctx    _context.Context
	Logger string
} {
	var calls []struct {
		Ctx    _context.Context
		Logger string
	}
	mock.lockRemoveLogConfiguration.RLock()
	calls = mock.calls.RemoveLogConfiguration
	mock.lockRemoveLogConfiguration.RUnlock()
	return calls
}

// RemoveLogConfigurationExecute calls RemoveLogConfigurationExecuteFunc.
func (mock *AdminApiMock) RemoveLogConfigurationExecute(r ApiRemoveLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error) {
	if mock.RemoveLogConfigurationExecuteFunc == nil {
		panic("AdminApiMock.RemoveLogConfigurationExecuteFunc: method is nil but AdminApi.RemoveLogConfigurationExecute was just called")
	}
	callInfo := struct {
		R ApiRemoveLogConfigurationRequest
	}{
		R: r,
	}
	mock.lockRemoveLogConfigurationExecute.Lock()
	mock.calls.RemoveLogConfigurationExecute = append(mock.calls.RemoveLogConfigurationExecute, callInfo)
	mock.lockRemoveLogConfigurationExecute.Unlock()
	return mock.RemoveLogConfigurationExecuteFunc(r)
}

// RemoveLogConfigurationExecuteCalls gets all the calls that were made to RemoveLogConfigurationExecute.
// Check the length with:
//     len(mockedAdminApi.RemoveLogConfigurationExecuteCalls())
func (mock *AdminApiMock) RemoveLogConfigurationExecuteCalls() []struct {
	R ApiRemoveLogConfigurationRequest
} {
	var calls []struct {
		R ApiRemoveLogConfigurationRequest
	}
	mock.lockRemoveLogConfigurationExecute.RLock()
	calls = mock.calls.RemoveLogConfigurationExecute
	mock.lockRemoveLogConfigurationExecute.RUnlock()
	return calls
}

// SetLogConfiguration calls SetLogConfigurationFunc.
func (mock *AdminApiMock) SetLogConfiguration(ctx _context.Context, logger string) ApiSetLogConfigurationRequest {
	if mock.SetLogConfigurationFunc == nil {
		panic("AdminApiMock.SetLogConfigurationFunc: method is nil but AdminApi.SetLogConfiguration was just called")
	}
	callInfo := struct {
		Ctx    _context.Context
		Logger string
	}{
		Ctx:    ctx,
		Logger: logger,
	}
	mock.lockSetLogConfiguration.Lock()
	mock.calls.SetLogConfiguration = append(mock.calls.SetLogConfiguration, callInfo)
	mock.lockSetLogConfiguration.Unlock()
	return mock.SetLogConfigurationFunc(ctx, logger)
}

// SetLogConfigurationCalls gets all the calls that were made to SetLogConfiguration.
// Check the length with:
//     len(mockedAdminApi.SetLogConfigurationCalls())
func (mock *AdminApiMock) SetLogConfigurationCalls() []struct {
	Ctx    _context.Context
	Logger string
} {
	var calls []struct {
		Ctx    _context.Context
		Logger string
	}
	mock.lockSetLogConfiguration.RLock()
	calls = mock.calls.SetLogConfiguration
	mock.lockSetLogConfiguration.RUnlock()
	return calls
}

// SetLogConfigurationExecute calls SetLogConfigurationExecuteFunc.
func (mock *AdminApiMock) SetLogConfigurationExecute(r ApiSetLogConfigurationRequest) (NamedLogConfiguration, *_nethttp.Response, error) {
	if mock.SetLogConfigurationExecuteFunc == nil {
		panic("AdminApiMock.SetLogConfigurationExecuteFunc: method is nil but AdminApi.SetLogConfigurationExecute was just called")
	}
	callInfo := struct {
		R ApiSetLogConfigurationRequest
	}{
		R: r,
	}
	mock.lockSetLogConfigurationExecute.Lock()
	mock.calls.SetLogConfigurationExecute = append(mock.calls.SetLogConfigurationExecute, callInfo)
	mock.lockSetLogConfigurationExecute.Unlock()
	return mock.SetLogConfigurationExecuteFunc(r)
}

// SetLogConfigurationExecuteCalls gets all the calls that were made to SetLogConfigurationExecute.
// Check the length with:
//     len(mockedAdminApi.SetLogConfigurationExecuteCalls())
func (mock *AdminApiMock) SetLogConfigurationExecuteCalls() []struct {
	R ApiSetLogConfigurationRequest
} {
	var calls []struct {
		R ApiSetLogConfigurationRequest
	}
	mock.lockSetLogConfigurationExecute.RLock()
	calls = mock.calls.SetLogConfigurationExecute
	mock.lockSetLogConfigurationExecute.RUnlock()
	return calls
}

// UpdateGlobalRuleConfig calls UpdateGlobalRuleConfigFunc.
func (mock *AdminApiMock) UpdateGlobalRuleConfig(ctx _context.Context, rule RuleType) ApiUpdateGlobalRuleConfigRequest {
	if mock.UpdateGlobalRuleConfigFunc == nil {
		panic("AdminApiMock.UpdateGlobalRuleConfigFunc: method is nil but AdminApi.UpdateGlobalRuleConfig was just called")
	}
	callInfo := struct {
		Ctx  _context.Context
		Rule RuleType
	}{
		Ctx:  ctx,
		Rule: rule,
	}
	mock.lockUpdateGlobalRuleConfig.Lock()
	mock.calls.UpdateGlobalRuleConfig = append(mock.calls.UpdateGlobalRuleConfig, callInfo)
	mock.lockUpdateGlobalRuleConfig.Unlock()
	return mock.UpdateGlobalRuleConfigFunc(ctx, rule)
}

// UpdateGlobalRuleConfigCalls gets all the calls that were made to UpdateGlobalRuleConfig.
// Check the length with:
//     len(mockedAdminApi.UpdateGlobalRuleConfigCalls())
func (mock *AdminApiMock) UpdateGlobalRuleConfigCalls() []struct {
	Ctx  _context.Context
	Rule RuleType
} {
	var calls []struct {
		Ctx  _context.Context
		Rule RuleType
	}
	mock.lockUpdateGlobalRuleConfig.RLock()
	calls = mock.calls.UpdateGlobalRuleConfig
	mock.lockUpdateGlobalRuleConfig.RUnlock()
	return calls
}

// UpdateGlobalRuleConfigExecute calls UpdateGlobalRuleConfigExecuteFunc.
func (mock *AdminApiMock) UpdateGlobalRuleConfigExecute(r ApiUpdateGlobalRuleConfigRequest) (Rule, *_nethttp.Response, error) {
	if mock.UpdateGlobalRuleConfigExecuteFunc == nil {
		panic("AdminApiMock.UpdateGlobalRuleConfigExecuteFunc: method is nil but AdminApi.UpdateGlobalRuleConfigExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateGlobalRuleConfigRequest
	}{
		R: r,
	}
	mock.lockUpdateGlobalRuleConfigExecute.Lock()
	mock.calls.UpdateGlobalRuleConfigExecute = append(mock.calls.UpdateGlobalRuleConfigExecute, callInfo)
	mock.lockUpdateGlobalRuleConfigExecute.Unlock()
	return mock.UpdateGlobalRuleConfigExecuteFunc(r)
}

// UpdateGlobalRuleConfigExecuteCalls gets all the calls that were made to UpdateGlobalRuleConfigExecute.
// Check the length with:
//     len(mockedAdminApi.UpdateGlobalRuleConfigExecuteCalls())
func (mock *AdminApiMock) UpdateGlobalRuleConfigExecuteCalls() []struct {
	R ApiUpdateGlobalRuleConfigRequest
} {
	var calls []struct {
		R ApiUpdateGlobalRuleConfigRequest
	}
	mock.lockUpdateGlobalRuleConfigExecute.RLock()
	calls = mock.calls.UpdateGlobalRuleConfigExecute
	mock.lockUpdateGlobalRuleConfigExecute.RUnlock()
	return calls
}

// UpdateRoleMapping calls UpdateRoleMappingFunc.
func (mock *AdminApiMock) UpdateRoleMapping(ctx _context.Context, principalId string) ApiUpdateRoleMappingRequest {
	if mock.UpdateRoleMappingFunc == nil {
		panic("AdminApiMock.UpdateRoleMappingFunc: method is nil but AdminApi.UpdateRoleMapping was just called")
	}
	callInfo := struct {
		Ctx         _context.Context
		PrincipalId string
	}{
		Ctx:         ctx,
		PrincipalId: principalId,
	}
	mock.lockUpdateRoleMapping.Lock()
	mock.calls.UpdateRoleMapping = append(mock.calls.UpdateRoleMapping, callInfo)
	mock.lockUpdateRoleMapping.Unlock()
	return mock.UpdateRoleMappingFunc(ctx, principalId)
}

// UpdateRoleMappingCalls gets all the calls that were made to UpdateRoleMapping.
// Check the length with:
//     len(mockedAdminApi.UpdateRoleMappingCalls())
func (mock *AdminApiMock) UpdateRoleMappingCalls() []struct {
	Ctx         _context.Context
	PrincipalId string
} {
	var calls []struct {
		Ctx         _context.Context
		PrincipalId string
	}
	mock.lockUpdateRoleMapping.RLock()
	calls = mock.calls.UpdateRoleMapping
	mock.lockUpdateRoleMapping.RUnlock()
	return calls
}

// UpdateRoleMappingExecute calls UpdateRoleMappingExecuteFunc.
func (mock *AdminApiMock) UpdateRoleMappingExecute(r ApiUpdateRoleMappingRequest) (*_nethttp.Response, error) {
	if mock.UpdateRoleMappingExecuteFunc == nil {
		panic("AdminApiMock.UpdateRoleMappingExecuteFunc: method is nil but AdminApi.UpdateRoleMappingExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateRoleMappingRequest
	}{
		R: r,
	}
	mock.lockUpdateRoleMappingExecute.Lock()
	mock.calls.UpdateRoleMappingExecute = append(mock.calls.UpdateRoleMappingExecute, callInfo)
	mock.lockUpdateRoleMappingExecute.Unlock()
	return mock.UpdateRoleMappingExecuteFunc(r)
}

// UpdateRoleMappingExecuteCalls gets all the calls that were made to UpdateRoleMappingExecute.
// Check the length with:
//     len(mockedAdminApi.UpdateRoleMappingExecuteCalls())
func (mock *AdminApiMock) UpdateRoleMappingExecuteCalls() []struct {
	R ApiUpdateRoleMappingRequest
} {
	var calls []struct {
		R ApiUpdateRoleMappingRequest
	}
	mock.lockUpdateRoleMappingExecute.RLock()
	calls = mock.calls.UpdateRoleMappingExecute
	mock.lockUpdateRoleMappingExecute.RUnlock()
	return calls
}

/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * API version: 0.3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
	"fmt"
)

// AclOperationFilter - struct for AclOperationFilter
type AclOperationFilter struct {
	AclFilterAny *AclFilterAny
	AclOperation *AclOperation
}

// AclFilterAnyAsAclOperationFilter is a convenience function that returns AclFilterAny wrapped in AclOperationFilter
func AclFilterAnyAsAclOperationFilter(v *AclFilterAny) AclOperationFilter {
	return AclOperationFilter{ AclFilterAny: v}
}

// AclOperationAsAclOperationFilter is a convenience function that returns AclOperation wrapped in AclOperationFilter
func AclOperationAsAclOperationFilter(v *AclOperation) AclOperationFilter {
	return AclOperationFilter{ AclOperation: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AclOperationFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AclFilterAny
	err = json.Unmarshal(data, &dst.AclFilterAny)
	if err == nil {
		jsonAclFilterAny, _ := json.Marshal(dst.AclFilterAny)
		if string(jsonAclFilterAny) == "{}" { // empty struct
			dst.AclFilterAny = nil
		} else {
			match++
		}
	} else {
		dst.AclFilterAny = nil
	}

	// try to unmarshal data into AclOperation
	err = json.Unmarshal(data, &dst.AclOperation)
	if err == nil {
		jsonAclOperation, _ := json.Marshal(dst.AclOperation)
		if string(jsonAclOperation) == "{}" { // empty struct
			dst.AclOperation = nil
		} else {
			match++
		}
	} else {
		dst.AclOperation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AclFilterAny = nil
		dst.AclOperation = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(AclOperationFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(AclOperationFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AclOperationFilter) MarshalJSON() ([]byte, error) {
	if src.AclFilterAny != nil {
		return json.Marshal(&src.AclFilterAny)
	}

	if src.AclOperation != nil {
		return json.Marshal(&src.AclOperation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AclOperationFilter) GetActualInstance() (interface{}) {
	if obj.AclFilterAny != nil {
		return obj.AclFilterAny
	}

	if obj.AclOperation != nil {
		return obj.AclOperation
	}

	// all schemas are nil
	return nil
}

type NullableAclOperationFilter struct {
	value *AclOperationFilter
	isSet bool
}

func (v NullableAclOperationFilter) Get() *AclOperationFilter {
	return v.value
}

func (v *NullableAclOperationFilter) Set(val *AclOperationFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAclOperationFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAclOperationFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclOperationFilter(val *AclOperationFilter) *NullableAclOperationFilter {
	return &NullableAclOperationFilter{value: val, isSet: true}
}

func (v NullableAclOperationFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclOperationFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * API version: 0.11.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
)

// RecordList A page of records consumed from a topic
type RecordList struct {
	Items *[]Record `json:"items,omitempty"`
	// Total number of records returned in this request. This value does not indicate the total number of records in the topic.
	Total interface{} `json:"total,omitempty"`
	// Not used
	Size interface{} `json:"size,omitempty"`
	// Not used
	Page interface{} `json:"page,omitempty"`
}

// NewRecordList instantiates a new RecordList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordList() *RecordList {
	this := RecordList{}
	return &this
}

// NewRecordListWithDefaults instantiates a new RecordList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordListWithDefaults() *RecordList {
	this := RecordList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *RecordList) GetItems() []Record {
	if o == nil || o.Items == nil {
		var ret []Record
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordList) GetItemsOk() (*[]Record, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *RecordList) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Record and assigns it to the Items field.
func (o *RecordList) SetItems(v []Record) {
	o.Items = &v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecordList) GetTotal() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordList) GetTotalOk() (*interface{}, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return &o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *RecordList) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given interface{} and assigns it to the Total field.
func (o *RecordList) SetTotal(v interface{}) {
	o.Total = v
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecordList) GetSize() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordList) GetSizeOk() (*interface{}, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return &o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *RecordList) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given interface{} and assigns it to the Size field.
func (o *RecordList) SetSize(v interface{}) {
	o.Size = v
}

// GetPage returns the Page field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecordList) GetPage() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordList) GetPageOk() (*interface{}, bool) {
	if o == nil || o.Page == nil {
		return nil, false
	}
	return &o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *RecordList) HasPage() bool {
	if o != nil && o.Page != nil {
		return true
	}

	return false
}

// SetPage gets a reference to the given interface{} and assigns it to the Page field.
func (o *RecordList) SetPage(v interface{}) {
	o.Page = v
}

func (o RecordList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Page != nil {
		toSerialize["page"] = o.Page
	}
	return json.Marshal(toSerialize)
}

type NullableRecordList struct {
	value *RecordList
	isSet bool
}

func (v NullableRecordList) Get() *RecordList {
	return v.value
}

func (v *NullableRecordList) Set(val *RecordList) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordList) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordList(val *RecordList) *NullableRecordList {
	return &NullableRecordList{value: val, isSet: true}
}

func (v NullableRecordList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



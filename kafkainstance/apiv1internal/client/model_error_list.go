/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * API version: 0.11.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
)

// ErrorList List of errors
type ErrorList struct {

	Items *[]Error `json:"items,omitempty"`

	// Total number of errors returned in this request
	Total interface{} `json:"total,omitempty"`

}

// NewErrorList instantiates a new ErrorList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorList() *ErrorList {
	this := ErrorList{}
	return &this
}

// NewErrorListWithDefaults instantiates a new ErrorList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorListWithDefaults() *ErrorList {
	this := ErrorList{}



	return &this
}


// GetItems returns the Items field value if set, zero value otherwise.
func (o *ErrorList) GetItems() []Error {
	if o == nil || o.Items == nil {
		var ret []Error
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorList) GetItemsOk() (*[]Error, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ErrorList) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Error and assigns it to the Items field.
func (o *ErrorList) SetItems(v []Error) {
	o.Items = &v
}


// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorList) GetTotal() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorList) GetTotalOk() (*interface{}, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return &o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ErrorList) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given interface{} and assigns it to the Total field.
func (o *ErrorList) SetTotal(v interface{}) {
	o.Total = v
}


func (o ErrorList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
    
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
    
	return json.Marshal(toSerialize)
}

type NullableErrorList struct {
	value *ErrorList
	isSet bool
}

func (v NullableErrorList) Get() *ErrorList {
	return v.value
}

func (v *NullableErrorList) Set(val *ErrorList) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorList) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorList(val *ErrorList) *NullableErrorList {
	return &NullableErrorList{value: val, isSet: true}
}

func (v NullableErrorList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


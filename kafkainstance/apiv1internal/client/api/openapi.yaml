openapi: 3.0.0
info:
  description: An API to provide REST endpoints for query Kafka for admin operations
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Kafka Admin REST API
  version: 0.2.0
servers:
- description: Kafka Admin REST API
  url: /rest
security:
- Bearer: []
paths:
  /topics:
    get:
      description: Returns a list of all of the available topics, or the list of topics
        that meet the users URL Query Parameters.
      operationId: getTopics
      parameters:
      - description: The page offset
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      - description: Maximum number of topics to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: Maximum number of topics to return on single page
        explode: true
        in: query
        name: size
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter to apply when returning the list of topics
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The page when returning the limit of requested topics.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Order of the items sorting. Ascending order is used as default.
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Order key to sort the topics by.
        explode: true
        in: query
        name: orderKey
        required: false
        schema:
          enum:
          - name
          - partitions
          - retention.ms
          - retention.bytes
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicsList'
          description: List of topics matching the users query paramters.
        "400":
          content:
            application/json: {}
          description: Unable to retreive topics.
        "401":
          content:
            application/json: {}
          description: Unauthorized, unable to retrive topics.
        "500":
          content:
            application/json: {}
          description: Internal server error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      summary: List of topics
    post:
      description: Creates a new topic for Kafka.
      operationId: createTopic
      requestBody:
        content:
          application/json:
            examples:
              NewTopicInput:
                value:
                  name: my-topic
                  settings:
                    numPartitions: 3
                    replicationFactor: 4
                    config:
                    - key: min.insync.replicas
                      value: "1"
                    - key: max.message.bytes
                      value: "1050000"
            schema:
              $ref: '#/components/schemas/NewTopicInput'
        description: Topic to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic created successfully.
        "400":
          description: Unable to create topic.
        "401":
          description: Unauthorized, Unable to create topic.
        "409":
          description: Entry already exisits
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      summary: Creates a new topic
  /topics/{topicName}:
    delete:
      description: Deletes the topic with the specified name.
      operationId: deleteTopic
      parameters:
      - description: The topic name to delete.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Topic deleted successfully.
        "401":
          description: Unathorized, unable to delete topic.
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      summary: Deletes a  topic
    get:
      description: Topic
      operationId: getTopic
      parameters:
      - description: The topic name to retrieve.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Kafka topic details.
        "401":
          content:
            application/json: {}
          description: Unauthorized, unable to retrieve topics.
        "404":
          content:
            application/json: {}
          description: Topic not found.
        "500":
          content:
            application/json: {}
          description: Internal server error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      summary: Retrieves the topic with the specified name.
    patch:
      description: updates the topic with the new data.
      operationId: updateTopic
      parameters:
      - description: The topic name which is its unique id.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTopicInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic updated successfully.
        "400":
          description: Unable to update topic.
        "401":
          description: Unauthroized, unable to update topic.
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      summary: Updates the topic with the specified name.
  /consumer-groups/{consumerGroupId}:
    delete:
      description: Delete a consumer group, along with its consumers.
      operationId: deleteConsumerGroupById
      parameters:
      - description: The unique ID of the cobsumer group.
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The consumer group was deleted successfully.
        "401":
          content:
            application/json: {}
          description: Unauthorized, request has not been applied because it lacks
            valid authentication credentials.
        "403":
          content:
            application/json: {}
          description: Forbidden to delete this consumer group.
        "404":
          content:
            application/json: {}
          description: The consumer group does not exist.
        "423":
          content:
            application/json: {}
          description: User cannot delete consumer group with active members.
        "500":
          content:
            application/json: {}
          description: Internal Server Error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      summary: Delete a consumer group.
    get:
      operationId: getConsumerGroupById
      parameters:
      - description: The unique ID of the consumer group
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      - description: Filter consumer groups for a specific topic
        examples:
          Consumer group:
            value:
              groupId: consumer_group_1
              consumers:
              - groupId: consumer_group_1
                topic: topic-1
                partition: 0
                memberId: consumer_group_member1
                offset: 5
                lag: 0
                logEndOffset: 5
              - groupId: consumer_group_1
                topic: topic-1
                partition: 1
                memberId: consumer_group_member2
                offset: 3
                lag: 0
                logEndOffset: 3
              - groupId: consumer_group_1
                topic: topic-1
                partition: 2
                memberId: consumer_group_member3
                offset: 6
                lag: 1
                logEndOffset: 5
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Consumer group details.
        "401":
          content:
            application/json: {}
          description: Unauthorized, request has not been applied because it lacks
            valid authentication credentials.
        "403":
          content:
            application/json: {}
          description: User is forbidden this view this consumer group.
        "404":
          content:
            application/json: {}
          description: Consumer group not found.
        "500":
          content:
            application/json: {}
          description: Internal server error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      summary: Get a single consumer group by its unique ID.
  /consumer-groups:
    get:
      description: Returns a list of all consumer groups for a particular Kafka instance.
      operationId: getConsumerGroups
      parameters:
      - description: The page offset
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      - description: Maximum number of consumer groups to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: Maximum number of consumer groups to return on single page
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: integer
        style: form
      - description: The page when returning the list of consumer groups
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Return consumer groups for this topic
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      - description: Return the consumer groups where the ID begins with this value
        explode: true
        in: query
        name: group-id-filter
        required: false
        schema:
          type: string
        style: form
      - description: Order of the consumer groups sorting. Ascending order is used
          as default.
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Order key to sort the items by. Only the value 'name' is currently
          applicable.
        explode: true
        in: query
        name: orderKey
        required: false
        schema:
          enum:
          - name
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                List of consumer groups:
                  value:
                    count: 1
                    limit: 10
                    offset: 0
                    items:
                    - groupId: consumer_group_1
                      consumers:
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 0
                        memberId: consumer_group_member1
                        offset: 5
                        lag: 0
                        logEndOffset: 5
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 1
                        memberId: consumer_group_member2
                        offset: 3
                        lag: 0
                        logEndOffset: 3
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 2
                        memberId: consumer_group_member3
                        offset: 6
                        lag: 1
                        logEndOffset: 5
              schema:
                $ref: '#/components/schemas/ConsumerGroupList'
          description: List of consumer groups matching the request parameters.
        "400":
          content:
            application/json: {}
          description: The server cannot or will not process the request due to something
            that is perceived to be a client error such as malformed request syntax.
        "401":
          content:
            application/json: {}
          description: Unauthorized, request has not been applied because it lacks
            valid authentication credentials.
        "403":
          content:
            application/json: {}
          description: User is forbidden to retrieve the list of consumer groups.
        "500":
          content:
            application/json: {}
          description: An internal server error occurred.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      summary: List of consumer groups in the Kafka instance.
    summary: API endpoints for consumer groups under a Kafka topic
  /consumer-groups/{consumerGroupId}/reset-offset:
    post:
      description: Reset the offset for a particular consumer group.
      operationId: resetConsumerGroupOffset
      parameters:
      - description: The ID of the consumer group.
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              ConsumerGroupOffsetResetExample:
                value:
                  topics:
                  - topic: my-topic
                    partitions:
                    - 0
                  offset: absolute
                  value: "4"
            schema:
              $ref: '#/components/schemas/ConsumerGroupResetOffsetParameters'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ConsumerGroupResetOffsetResult'
                type: array
          description: The consumer group offsets have been reset.
        "400":
          description: The consumer group to reset the offset does have active consumers.
        "401":
          content:
            application/json: {}
          description: Unauthorized, request has not been applied because it lacks
            valid authentication credentials.
        "403":
          content:
            application/json: {}
          description: Forbidden to delete this consumer group.
        "404":
          content:
            application/json: {}
          description: Specified topic or its partition does not exist.
        "500":
          content:
            application/json: {}
          description: Internal Server Error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      summary: Reset the offset for a consumer group.
  /: {}
components:
  schemas:
    Topic:
      description: Kafka Topic (A feed where records are stored and published)
      example:
        name: my-topic
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
        partitions:
        - id: 0
          replicas:
          - id: 0
          - id: 1
          isr:
          - id: 0
          - id: 1
          leader:
            id: 0
        - id: 1
          replicas:
          - id: 0
          - id: 1
          isr:
          - id: 0
          - id: 1
          leader:
            id: 1
      properties:
        name:
          description: The name of the topic.
          type: string
        config:
          description: Topic configuration entry.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
        partitions:
          description: Partitions for this topic.
          items:
            $ref: '#/components/schemas/Partition'
          type: array
      title: Root Type for NewTopicInput
      type: object
    Partition:
      description: Kafka topic partition
      example:
        id: 0
        replicas:
        - id: 0
        - id: 1
        isr:
        - id: 0
        - id: 1
        leader:
          id: 1
      properties:
        id:
          description: Uniquie id for the partition
          type: integer
        replicas:
          description: List of replicas for the partition
          items:
            $ref: '#/components/schemas/Node'
          type: array
        isr:
          description: List isync-replicas for this partition.
          items:
            $ref: '#/components/schemas/Node'
          type: array
        leader:
          description: Kafka server / broker.
          type: object
      required:
      - id
      type: object
    ConfigEntry:
      description: Key value pair indicating possible configuration options for a
        topic.
      example:
        key: min.insync.replicas
        value: "1"
      properties:
        key:
          description: The key indicating what configuration entry you would like
            to set for the topic.
          type: string
        value:
          description: Value to indicate the setting on the topic configuration entry.
          type: string
      type: object
    TopicsList:
      description: A list of topics.
      example:
        items:
        - name: my-topic
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
          partitions:
          - id: 0
            replicas:
            - id: 0
            - id: 1
            isr:
            - id: 0
            - id: 1
            leader:
              id: 0
          - id: 1
            replicas:
            - id: 0
            - id: 1
            isr:
            - id: 0
            - id: 1
            leader:
              id: 1
        offset: 25
        limit: 90
        count: 94
      properties:
        page:
          description: The page
          type: integer
        size:
          description: number of entries per page
          type: integer
        offset:
          description: Deprecated offset of the topic list
          type: integer
        limit:
          description: Deprecated maximum of returned topics
          type: integer
        total:
          description: Total number of topics
          type: integer
        items:
          description: List of topics
          items:
            $ref: '#/components/schemas/Topic'
          type: array
      type: object
    TopicSettings:
      description: Kafka Topic (A feed where records are stored and published)
      example:
        numPartitions: 2
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
      properties:
        numPartitions:
          description: Number of partitions for this topic.
          type: integer
        config:
          description: Topic configuration entry.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
      required:
      - numPartitions
      title: Root Type for NewTopicInput
      type: object
    Node:
      description: Kafka server / broker.
      type: object
    NewTopicInput:
      description: Input object to create a new topic.
      example:
        name: my-topic
        settings:
          numPartitions: 3
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
      properties:
        name:
          description: The topic name, this value must be unique.
          type: string
        settings:
          $ref: '#/components/schemas/TopicSettings'
      required:
      - name
      - settings
      type: object
    ConsumerGroup:
      description: A group of Kafka consumers
      example:
        id: consumer_group_1
        consumers:
        - groupId: consumer_group_1
          topic: topic-1
          partition: 0
          memberId: consumer_group_member1
          offset: 5
          lag: 0
          logEndOffset: 5
        - groupId: consumer_group_1
          topic: topic-1
          partition: 1
          memberId: consumer_group_member2
          offset: 3
          lag: 0
          logEndOffset: 3
        - groupId: consumer_group_1
          topic: topic-1
          partition: 2
          memberId: consumer_group_member3
          offset: 6
          lag: 1
          logEndOffset: 5
      properties:
        groupId:
          description: Unique identifier for the consumer group
          type: string
        consumers:
          description: The list of consumers associated with this consumer group
          items:
            $ref: '#/components/schemas/Consumer'
          type: array
      required:
      - consumers
      - groupId
      type: object
    Consumer:
      description: A Kafka consumer is responsible for reading records from one or
        more topics and one or more partitions of a topic.
      example:
        groupId: consumer_group_1
        topic: topic-1
        partition: 0
        memberId: consumer_group_1-0
        offset: 5
        lag: 0
        logEndOffset: 5
      properties:
        groupId:
          description: Unique identifier for the consumer group to which this consumer
            belongs.
          type: string
        topic:
          description: The unique topic name to which this consumer belongs
          type: string
        partition:
          description: The partition number to which this consumer group is assigned
            to.
          type: integer
        offset:
          description: Offset denotes the position of the consumer in a partition.
          type: number
        logEndOffset:
          description: The log end offset is the offset of the last message written
            to a log.
          type: number
        lag:
          description: Offset Lag is the delta between the last produced message and
            the last consumer's committed offset.
          type: integer
        memberId:
          description: The member ID is a unique identifier given to a consumer by
            the coordinator upon initially joining the group.
          type: string
      required:
      - groupId
      - lag
      - offset
      - partition
      - topic
      type: object
    ConsumerGroupList:
      description: A list of consumer groups
      example:
        count: 1
        limit: 10
        offset: 0
        items:
        - groupId: consumer_group_1
          consumers:
          - groupId: consumer_group_1
            topic: topic-1
            partition: 0
            memberId: consumer_group_member1
            offset: 5
            lag: 0
            logEndOffset: 5
          - groupId: consumer_group_1
            topic: topic-1
            partition: 1
            memberId: consumer_group_member2
            offset: 3
            lag: 0
            logEndOffset: 3
          - groupId: consumer_group_1
            topic: topic-1
            partition: 2
            memberId: consumer_group_member3
            offset: 6
            lag: 1
            logEndOffset: 5
      properties:
        items:
          description: Consumer group list items
          items:
            $ref: '#/components/schemas/ConsumerGroup'
          type: array
        total:
          description: The total number of consumer groups.
          type: number
        size:
          description: The number of consumer groups per page.
          type: number
        page:
          description: The page
          type: integer
        offset:
          description: Deprecated offset of the topic list
          type: integer
        limit:
          description: Deprecated maximum of returned topics
          type: integer
      type: object
    UpdateTopicInput:
      description: Kafka Topic (A feed where records are stored and published)
      example:
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
      properties:
        config:
          description: Topic configuration entries.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
        partitions:
          description: Number of partitions (only increasing supported)
          type: integer
      title: Root Type for UpdateTopicInput
      type: object
    ConsumerGroupResetOffsetParameters:
      example:
        topics:
        - topic: my-topic
          partitions:
          - 0
        offset: absolute
        value: "4"
      properties:
        value:
          type: string
        offset:
          enum:
          - timestamp
          - absolute
          - latest
          - earliest
          type: string
        topics:
          items:
            $ref: '#/components/schemas/TopicsToResetOffset'
          type: array
      required:
      - offset
      - value
      title: Root Type for ConsumerGroupResetOffsetParameters
      type: object
    TopicsToResetOffset:
      example:
        topic: foo
        partitions:
        - 0
        - 1
        - 2
      properties:
        topic:
          type: string
        partitions:
          items:
            format: int32
            type: integer
          type: array
      required:
      - topic
      title: Root Type for TopicsToResetOffset
      type: object
    ConsumerGroupResetOffsetResult:
      example:
      - topic: your-topic
        partition: 0
        offset: 4
      - topic: my-topic
        partition: 0
        offset: 0
      items:
        properties:
          topic:
            type: string
          partition:
            format: int32
            type: integer
          offset:
            format: int32
            type: integer
        type: object
      title: Root Type for ConsumerGroupResetOffsetResult
      type: array
  securitySchemes:
    Bearer:
      description: Access token used with OAuth 2.0
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: /token
      type: oauth2

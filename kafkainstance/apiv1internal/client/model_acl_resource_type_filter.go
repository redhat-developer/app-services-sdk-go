/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * API version: 0.3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
	"fmt"
)

// AclResourceTypeFilter - struct for AclResourceTypeFilter
type AclResourceTypeFilter struct {
	AclFilterAny *AclFilterAny
	AclResourceType *AclResourceType
}

// AclFilterAnyAsAclResourceTypeFilter is a convenience function that returns AclFilterAny wrapped in AclResourceTypeFilter
func AclFilterAnyAsAclResourceTypeFilter(v *AclFilterAny) AclResourceTypeFilter {
	return AclResourceTypeFilter{ AclFilterAny: v}
}

// AclResourceTypeAsAclResourceTypeFilter is a convenience function that returns AclResourceType wrapped in AclResourceTypeFilter
func AclResourceTypeAsAclResourceTypeFilter(v *AclResourceType) AclResourceTypeFilter {
	return AclResourceTypeFilter{ AclResourceType: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AclResourceTypeFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AclFilterAny
	err = json.Unmarshal(data, &dst.AclFilterAny)
	if err == nil {
		jsonAclFilterAny, _ := json.Marshal(dst.AclFilterAny)
		if string(jsonAclFilterAny) == "{}" { // empty struct
			dst.AclFilterAny = nil
		} else {
			match++
		}
	} else {
		dst.AclFilterAny = nil
	}

	// try to unmarshal data into AclResourceType
	err = json.Unmarshal(data, &dst.AclResourceType)
	if err == nil {
		jsonAclResourceType, _ := json.Marshal(dst.AclResourceType)
		if string(jsonAclResourceType) == "{}" { // empty struct
			dst.AclResourceType = nil
		} else {
			match++
		}
	} else {
		dst.AclResourceType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AclFilterAny = nil
		dst.AclResourceType = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(AclResourceTypeFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(AclResourceTypeFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AclResourceTypeFilter) MarshalJSON() ([]byte, error) {
	if src.AclFilterAny != nil {
		return json.Marshal(&src.AclFilterAny)
	}

	if src.AclResourceType != nil {
		return json.Marshal(&src.AclResourceType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AclResourceTypeFilter) GetActualInstance() (interface{}) {
	if obj.AclFilterAny != nil {
		return obj.AclFilterAny
	}

	if obj.AclResourceType != nil {
		return obj.AclResourceType
	}

	// all schemas are nil
	return nil
}

type NullableAclResourceTypeFilter struct {
	value *AclResourceTypeFilter
	isSet bool
}

func (v NullableAclResourceTypeFilter) Get() *AclResourceTypeFilter {
	return v.value
}

func (v *NullableAclResourceTypeFilter) Set(val *AclResourceTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAclResourceTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAclResourceTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclResourceTypeFilter(val *AclResourceTypeFilter) *NullableAclResourceTypeFilter {
	return &NullableAclResourceTypeFilter{value: val, isSet: true}
}

func (v NullableAclResourceTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclResourceTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



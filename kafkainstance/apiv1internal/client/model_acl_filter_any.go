/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * API version: 0.3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
	"fmt"
)

// AclFilterAny Filter any value for enumerated ACL properties
type AclFilterAny string

// List of AclFilterAny
const (
	ANY AclFilterAny = "ANY"
)

var allowedAclFilterAnyEnumValues = []AclFilterAny{
	"ANY",
}

func (v *AclFilterAny) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AclFilterAny(value)
	for _, existing := range allowedAclFilterAnyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AclFilterAny", value)
}

// NewAclFilterAnyFromValue returns a pointer to a valid AclFilterAny
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAclFilterAnyFromValue(v string) (*AclFilterAny, error) {
	ev := AclFilterAny(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AclFilterAny: valid values are %v", v, allowedAclFilterAnyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AclFilterAny) IsValid() bool {
	for _, existing := range allowedAclFilterAnyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AclFilterAny value
func (v AclFilterAny) Ptr() *AclFilterAny {
	return &v
}

type NullableAclFilterAny struct {
	value *AclFilterAny
	isSet bool
}

func (v NullableAclFilterAny) Get() *AclFilterAny {
	return v.value
}

func (v *NullableAclFilterAny) Set(val *AclFilterAny) {
	v.value = val
	v.isSet = true
}

func (v NullableAclFilterAny) IsSet() bool {
	return v.isSet
}

func (v *NullableAclFilterAny) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclFilterAny(val *AclFilterAny) *NullableAclFilterAny {
	return &NullableAclFilterAny{value: val, isSet: true}
}

func (v NullableAclFilterAny) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclFilterAny) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


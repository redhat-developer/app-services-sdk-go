// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kafkainstanceclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that AclsApiMock does implement AclsApi.
// If this is not the case, regenerate this file with moq.
var _ AclsApi = &AclsApiMock{}

// AclsApiMock is a mock implementation of AclsApi.
//
// 	func TestSomethingThatUsesAclsApi(t *testing.T) {
//
// 		// make and configure a mocked AclsApi
// 		mockedAclsApi := &AclsApiMock{
// 			CreateAclFunc: func(ctx _context.Context) ApiCreateAclRequest {
// 				panic("mock out the CreateAcl method")
// 			},
// 			CreateAclExecuteFunc: func(r ApiCreateAclRequest) (*_nethttp.Response, error) {
// 				panic("mock out the CreateAclExecute method")
// 			},
// 			DeleteAclsFunc: func(ctx _context.Context) ApiDeleteAclsRequest {
// 				panic("mock out the DeleteAcls method")
// 			},
// 			DeleteAclsExecuteFunc: func(r ApiDeleteAclsRequest) (AclBindingListPage, *_nethttp.Response, error) {
// 				panic("mock out the DeleteAclsExecute method")
// 			},
// 			GetAclResourceOperationsFunc: func(ctx _context.Context) ApiGetAclResourceOperationsRequest {
// 				panic("mock out the GetAclResourceOperations method")
// 			},
// 			GetAclResourceOperationsExecuteFunc: func(r ApiGetAclResourceOperationsRequest) (map[string][]string, *_nethttp.Response, error) {
// 				panic("mock out the GetAclResourceOperationsExecute method")
// 			},
// 			GetAclsFunc: func(ctx _context.Context) ApiGetAclsRequest {
// 				panic("mock out the GetAcls method")
// 			},
// 			GetAclsExecuteFunc: func(r ApiGetAclsRequest) (AclBindingListPage, *_nethttp.Response, error) {
// 				panic("mock out the GetAclsExecute method")
// 			},
// 		}
//
// 		// use mockedAclsApi in code that requires AclsApi
// 		// and then make assertions.
//
// 	}
type AclsApiMock struct {
	// CreateAclFunc mocks the CreateAcl method.
	CreateAclFunc func(ctx _context.Context) ApiCreateAclRequest

	// CreateAclExecuteFunc mocks the CreateAclExecute method.
	CreateAclExecuteFunc func(r ApiCreateAclRequest) (*_nethttp.Response, error)

	// DeleteAclsFunc mocks the DeleteAcls method.
	DeleteAclsFunc func(ctx _context.Context) ApiDeleteAclsRequest

	// DeleteAclsExecuteFunc mocks the DeleteAclsExecute method.
	DeleteAclsExecuteFunc func(r ApiDeleteAclsRequest) (AclBindingListPage, *_nethttp.Response, error)

	// GetAclResourceOperationsFunc mocks the GetAclResourceOperations method.
	GetAclResourceOperationsFunc func(ctx _context.Context) ApiGetAclResourceOperationsRequest

	// GetAclResourceOperationsExecuteFunc mocks the GetAclResourceOperationsExecute method.
	GetAclResourceOperationsExecuteFunc func(r ApiGetAclResourceOperationsRequest) (map[string][]string, *_nethttp.Response, error)

	// GetAclsFunc mocks the GetAcls method.
	GetAclsFunc func(ctx _context.Context) ApiGetAclsRequest

	// GetAclsExecuteFunc mocks the GetAclsExecute method.
	GetAclsExecuteFunc func(r ApiGetAclsRequest) (AclBindingListPage, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAcl holds details about calls to the CreateAcl method.
		CreateAcl []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateAclExecute holds details about calls to the CreateAclExecute method.
		CreateAclExecute []struct {
			// R is the r argument value.
			R ApiCreateAclRequest
		}
		// DeleteAcls holds details about calls to the DeleteAcls method.
		DeleteAcls []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// DeleteAclsExecute holds details about calls to the DeleteAclsExecute method.
		DeleteAclsExecute []struct {
			// R is the r argument value.
			R ApiDeleteAclsRequest
		}
		// GetAclResourceOperations holds details about calls to the GetAclResourceOperations method.
		GetAclResourceOperations []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// GetAclResourceOperationsExecute holds details about calls to the GetAclResourceOperationsExecute method.
		GetAclResourceOperationsExecute []struct {
			// R is the r argument value.
			R ApiGetAclResourceOperationsRequest
		}
		// GetAcls holds details about calls to the GetAcls method.
		GetAcls []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// GetAclsExecute holds details about calls to the GetAclsExecute method.
		GetAclsExecute []struct {
			// R is the r argument value.
			R ApiGetAclsRequest
		}
	}
	lockCreateAcl                       sync.RWMutex
	lockCreateAclExecute                sync.RWMutex
	lockDeleteAcls                      sync.RWMutex
	lockDeleteAclsExecute               sync.RWMutex
	lockGetAclResourceOperations        sync.RWMutex
	lockGetAclResourceOperationsExecute sync.RWMutex
	lockGetAcls                         sync.RWMutex
	lockGetAclsExecute                  sync.RWMutex
}

// CreateAcl calls CreateAclFunc.
func (mock *AclsApiMock) CreateAcl(ctx _context.Context) ApiCreateAclRequest {
	if mock.CreateAclFunc == nil {
		panic("AclsApiMock.CreateAclFunc: method is nil but AclsApi.CreateAcl was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateAcl.Lock()
	mock.calls.CreateAcl = append(mock.calls.CreateAcl, callInfo)
	mock.lockCreateAcl.Unlock()
	return mock.CreateAclFunc(ctx)
}

// CreateAclCalls gets all the calls that were made to CreateAcl.
// Check the length with:
//     len(mockedAclsApi.CreateAclCalls())
func (mock *AclsApiMock) CreateAclCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateAcl.RLock()
	calls = mock.calls.CreateAcl
	mock.lockCreateAcl.RUnlock()
	return calls
}

// CreateAclExecute calls CreateAclExecuteFunc.
func (mock *AclsApiMock) CreateAclExecute(r ApiCreateAclRequest) (*_nethttp.Response, error) {
	if mock.CreateAclExecuteFunc == nil {
		panic("AclsApiMock.CreateAclExecuteFunc: method is nil but AclsApi.CreateAclExecute was just called")
	}
	callInfo := struct {
		R ApiCreateAclRequest
	}{
		R: r,
	}
	mock.lockCreateAclExecute.Lock()
	mock.calls.CreateAclExecute = append(mock.calls.CreateAclExecute, callInfo)
	mock.lockCreateAclExecute.Unlock()
	return mock.CreateAclExecuteFunc(r)
}

// CreateAclExecuteCalls gets all the calls that were made to CreateAclExecute.
// Check the length with:
//     len(mockedAclsApi.CreateAclExecuteCalls())
func (mock *AclsApiMock) CreateAclExecuteCalls() []struct {
	R ApiCreateAclRequest
} {
	var calls []struct {
		R ApiCreateAclRequest
	}
	mock.lockCreateAclExecute.RLock()
	calls = mock.calls.CreateAclExecute
	mock.lockCreateAclExecute.RUnlock()
	return calls
}

// DeleteAcls calls DeleteAclsFunc.
func (mock *AclsApiMock) DeleteAcls(ctx _context.Context) ApiDeleteAclsRequest {
	if mock.DeleteAclsFunc == nil {
		panic("AclsApiMock.DeleteAclsFunc: method is nil but AclsApi.DeleteAcls was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockDeleteAcls.Lock()
	mock.calls.DeleteAcls = append(mock.calls.DeleteAcls, callInfo)
	mock.lockDeleteAcls.Unlock()
	return mock.DeleteAclsFunc(ctx)
}

// DeleteAclsCalls gets all the calls that were made to DeleteAcls.
// Check the length with:
//     len(mockedAclsApi.DeleteAclsCalls())
func (mock *AclsApiMock) DeleteAclsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockDeleteAcls.RLock()
	calls = mock.calls.DeleteAcls
	mock.lockDeleteAcls.RUnlock()
	return calls
}

// DeleteAclsExecute calls DeleteAclsExecuteFunc.
func (mock *AclsApiMock) DeleteAclsExecute(r ApiDeleteAclsRequest) (AclBindingListPage, *_nethttp.Response, error) {
	if mock.DeleteAclsExecuteFunc == nil {
		panic("AclsApiMock.DeleteAclsExecuteFunc: method is nil but AclsApi.DeleteAclsExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteAclsRequest
	}{
		R: r,
	}
	mock.lockDeleteAclsExecute.Lock()
	mock.calls.DeleteAclsExecute = append(mock.calls.DeleteAclsExecute, callInfo)
	mock.lockDeleteAclsExecute.Unlock()
	return mock.DeleteAclsExecuteFunc(r)
}

// DeleteAclsExecuteCalls gets all the calls that were made to DeleteAclsExecute.
// Check the length with:
//     len(mockedAclsApi.DeleteAclsExecuteCalls())
func (mock *AclsApiMock) DeleteAclsExecuteCalls() []struct {
	R ApiDeleteAclsRequest
} {
	var calls []struct {
		R ApiDeleteAclsRequest
	}
	mock.lockDeleteAclsExecute.RLock()
	calls = mock.calls.DeleteAclsExecute
	mock.lockDeleteAclsExecute.RUnlock()
	return calls
}

// GetAclResourceOperations calls GetAclResourceOperationsFunc.
func (mock *AclsApiMock) GetAclResourceOperations(ctx _context.Context) ApiGetAclResourceOperationsRequest {
	if mock.GetAclResourceOperationsFunc == nil {
		panic("AclsApiMock.GetAclResourceOperationsFunc: method is nil but AclsApi.GetAclResourceOperations was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAclResourceOperations.Lock()
	mock.calls.GetAclResourceOperations = append(mock.calls.GetAclResourceOperations, callInfo)
	mock.lockGetAclResourceOperations.Unlock()
	return mock.GetAclResourceOperationsFunc(ctx)
}

// GetAclResourceOperationsCalls gets all the calls that were made to GetAclResourceOperations.
// Check the length with:
//     len(mockedAclsApi.GetAclResourceOperationsCalls())
func (mock *AclsApiMock) GetAclResourceOperationsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockGetAclResourceOperations.RLock()
	calls = mock.calls.GetAclResourceOperations
	mock.lockGetAclResourceOperations.RUnlock()
	return calls
}

// GetAclResourceOperationsExecute calls GetAclResourceOperationsExecuteFunc.
func (mock *AclsApiMock) GetAclResourceOperationsExecute(r ApiGetAclResourceOperationsRequest) (map[string][]string, *_nethttp.Response, error) {
	if mock.GetAclResourceOperationsExecuteFunc == nil {
		panic("AclsApiMock.GetAclResourceOperationsExecuteFunc: method is nil but AclsApi.GetAclResourceOperationsExecute was just called")
	}
	callInfo := struct {
		R ApiGetAclResourceOperationsRequest
	}{
		R: r,
	}
	mock.lockGetAclResourceOperationsExecute.Lock()
	mock.calls.GetAclResourceOperationsExecute = append(mock.calls.GetAclResourceOperationsExecute, callInfo)
	mock.lockGetAclResourceOperationsExecute.Unlock()
	return mock.GetAclResourceOperationsExecuteFunc(r)
}

// GetAclResourceOperationsExecuteCalls gets all the calls that were made to GetAclResourceOperationsExecute.
// Check the length with:
//     len(mockedAclsApi.GetAclResourceOperationsExecuteCalls())
func (mock *AclsApiMock) GetAclResourceOperationsExecuteCalls() []struct {
	R ApiGetAclResourceOperationsRequest
} {
	var calls []struct {
		R ApiGetAclResourceOperationsRequest
	}
	mock.lockGetAclResourceOperationsExecute.RLock()
	calls = mock.calls.GetAclResourceOperationsExecute
	mock.lockGetAclResourceOperationsExecute.RUnlock()
	return calls
}

// GetAcls calls GetAclsFunc.
func (mock *AclsApiMock) GetAcls(ctx _context.Context) ApiGetAclsRequest {
	if mock.GetAclsFunc == nil {
		panic("AclsApiMock.GetAclsFunc: method is nil but AclsApi.GetAcls was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAcls.Lock()
	mock.calls.GetAcls = append(mock.calls.GetAcls, callInfo)
	mock.lockGetAcls.Unlock()
	return mock.GetAclsFunc(ctx)
}

// GetAclsCalls gets all the calls that were made to GetAcls.
// Check the length with:
//     len(mockedAclsApi.GetAclsCalls())
func (mock *AclsApiMock) GetAclsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockGetAcls.RLock()
	calls = mock.calls.GetAcls
	mock.lockGetAcls.RUnlock()
	return calls
}

// GetAclsExecute calls GetAclsExecuteFunc.
func (mock *AclsApiMock) GetAclsExecute(r ApiGetAclsRequest) (AclBindingListPage, *_nethttp.Response, error) {
	if mock.GetAclsExecuteFunc == nil {
		panic("AclsApiMock.GetAclsExecuteFunc: method is nil but AclsApi.GetAclsExecute was just called")
	}
	callInfo := struct {
		R ApiGetAclsRequest
	}{
		R: r,
	}
	mock.lockGetAclsExecute.Lock()
	mock.calls.GetAclsExecute = append(mock.calls.GetAclsExecute, callInfo)
	mock.lockGetAclsExecute.Unlock()
	return mock.GetAclsExecuteFunc(r)
}

// GetAclsExecuteCalls gets all the calls that were made to GetAclsExecute.
// Check the length with:
//     len(mockedAclsApi.GetAclsExecuteCalls())
func (mock *AclsApiMock) GetAclsExecuteCalls() []struct {
	R ApiGetAclsRequest
} {
	var calls []struct {
		R ApiGetAclsRequest
	}
	mock.lockGetAclsExecute.RLock()
	calls = mock.calls.GetAclsExecute
	mock.lockGetAclsExecute.RUnlock()
	return calls
}

/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * API version: 0.3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
	"fmt"
)

// AclPatternTypeFilterOneOf Use value 'MATCH' to perform pattern matching.
type AclPatternTypeFilterOneOf string

// List of AclPatternTypeFilter_oneOf
const (
	MATCH AclPatternTypeFilterOneOf = "MATCH"
)

var allowedAclPatternTypeFilterOneOfEnumValues = []AclPatternTypeFilterOneOf{
	"MATCH",
}

func (v *AclPatternTypeFilterOneOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AclPatternTypeFilterOneOf(value)
	for _, existing := range allowedAclPatternTypeFilterOneOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AclPatternTypeFilterOneOf", value)
}

// NewAclPatternTypeFilterOneOfFromValue returns a pointer to a valid AclPatternTypeFilterOneOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAclPatternTypeFilterOneOfFromValue(v string) (*AclPatternTypeFilterOneOf, error) {
	ev := AclPatternTypeFilterOneOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AclPatternTypeFilterOneOf: valid values are %v", v, allowedAclPatternTypeFilterOneOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AclPatternTypeFilterOneOf) IsValid() bool {
	for _, existing := range allowedAclPatternTypeFilterOneOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AclPatternTypeFilter_oneOf value
func (v AclPatternTypeFilterOneOf) Ptr() *AclPatternTypeFilterOneOf {
	return &v
}

type NullableAclPatternTypeFilterOneOf struct {
	value *AclPatternTypeFilterOneOf
	isSet bool
}

func (v NullableAclPatternTypeFilterOneOf) Get() *AclPatternTypeFilterOneOf {
	return v.value
}

func (v *NullableAclPatternTypeFilterOneOf) Set(val *AclPatternTypeFilterOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAclPatternTypeFilterOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAclPatternTypeFilterOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclPatternTypeFilterOneOf(val *AclPatternTypeFilterOneOf) *NullableAclPatternTypeFilterOneOf {
	return &NullableAclPatternTypeFilterOneOf{value: val, isSet: true}
}

func (v NullableAclPatternTypeFilterOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclPatternTypeFilterOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


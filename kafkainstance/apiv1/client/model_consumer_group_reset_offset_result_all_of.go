/*
 * Kafka Instance API
 *
 * API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs
 *
 * API version: 0.13.1-SNAPSHOT
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
)

// ConsumerGroupResetOffsetResultAllOf struct for ConsumerGroupResetOffsetResultAllOf
type ConsumerGroupResetOffsetResultAllOf struct {
	Items []ConsumerGroupResetOffsetResultItem `json:"items"`
}

// NewConsumerGroupResetOffsetResultAllOf instantiates a new ConsumerGroupResetOffsetResultAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerGroupResetOffsetResultAllOf(items []ConsumerGroupResetOffsetResultItem) *ConsumerGroupResetOffsetResultAllOf {
	this := ConsumerGroupResetOffsetResultAllOf{}
	this.Items = items
	return &this
}

// NewConsumerGroupResetOffsetResultAllOfWithDefaults instantiates a new ConsumerGroupResetOffsetResultAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerGroupResetOffsetResultAllOfWithDefaults() *ConsumerGroupResetOffsetResultAllOf {
	this := ConsumerGroupResetOffsetResultAllOf{}
	return &this
}

// GetItems returns the Items field value
func (o *ConsumerGroupResetOffsetResultAllOf) GetItems() []ConsumerGroupResetOffsetResultItem {
	if o == nil {
		var ret []ConsumerGroupResetOffsetResultItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ConsumerGroupResetOffsetResultAllOf) GetItemsOk() (*[]ConsumerGroupResetOffsetResultItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *ConsumerGroupResetOffsetResultAllOf) SetItems(v []ConsumerGroupResetOffsetResultItem) {
	o.Items = v
}

func (o ConsumerGroupResetOffsetResultAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableConsumerGroupResetOffsetResultAllOf struct {
	value *ConsumerGroupResetOffsetResultAllOf
	isSet bool
}

func (v NullableConsumerGroupResetOffsetResultAllOf) Get() *ConsumerGroupResetOffsetResultAllOf {
	return v.value
}

func (v *NullableConsumerGroupResetOffsetResultAllOf) Set(val *ConsumerGroupResetOffsetResultAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerGroupResetOffsetResultAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerGroupResetOffsetResultAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerGroupResetOffsetResultAllOf(val *ConsumerGroupResetOffsetResultAllOf) *NullableConsumerGroupResetOffsetResultAllOf {
	return &NullableConsumerGroupResetOffsetResultAllOf{value: val, isSet: true}
}

func (v NullableConsumerGroupResetOffsetResultAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerGroupResetOffsetResultAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package smarteventsclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that SchemaCatalogApiMock does implement SchemaCatalogApi.
// If this is not the case, regenerate this file with moq.
var _ SchemaCatalogApi = &SchemaCatalogApiMock{}

// SchemaCatalogApiMock is a mock implementation of SchemaCatalogApi.
//
// 	func TestSomethingThatUsesSchemaCatalogApi(t *testing.T) {
//
// 		// make and configure a mocked SchemaCatalogApi
// 		mockedSchemaCatalogApi := &SchemaCatalogApiMock{
// 			SchemaAPIGetActionProcessorSchemaFunc: func(ctx _context.Context, id string) ApiSchemaAPIGetActionProcessorSchemaRequest {
// 				panic("mock out the SchemaAPIGetActionProcessorSchema method")
// 			},
// 			SchemaAPIGetActionProcessorSchemaExecuteFunc: func(r ApiSchemaAPIGetActionProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error) {
// 				panic("mock out the SchemaAPIGetActionProcessorSchemaExecute method")
// 			},
// 			SchemaAPIGetCatalogFunc: func(ctx _context.Context) ApiSchemaAPIGetCatalogRequest {
// 				panic("mock out the SchemaAPIGetCatalog method")
// 			},
// 			SchemaAPIGetCatalogExecuteFunc: func(r ApiSchemaAPIGetCatalogRequest) (ProcessorCatalogResponse, *_nethttp.Response, error) {
// 				panic("mock out the SchemaAPIGetCatalogExecute method")
// 			},
// 			SchemaAPIGetSourceProcessorSchemaFunc: func(ctx _context.Context, id string) ApiSchemaAPIGetSourceProcessorSchemaRequest {
// 				panic("mock out the SchemaAPIGetSourceProcessorSchema method")
// 			},
// 			SchemaAPIGetSourceProcessorSchemaExecuteFunc: func(r ApiSchemaAPIGetSourceProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error) {
// 				panic("mock out the SchemaAPIGetSourceProcessorSchemaExecute method")
// 			},
// 		}
//
// 		// use mockedSchemaCatalogApi in code that requires SchemaCatalogApi
// 		// and then make assertions.
//
// 	}
type SchemaCatalogApiMock struct {
	// SchemaAPIGetActionProcessorSchemaFunc mocks the SchemaAPIGetActionProcessorSchema method.
	SchemaAPIGetActionProcessorSchemaFunc func(ctx _context.Context, id string) ApiSchemaAPIGetActionProcessorSchemaRequest

	// SchemaAPIGetActionProcessorSchemaExecuteFunc mocks the SchemaAPIGetActionProcessorSchemaExecute method.
	SchemaAPIGetActionProcessorSchemaExecuteFunc func(r ApiSchemaAPIGetActionProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error)

	// SchemaAPIGetCatalogFunc mocks the SchemaAPIGetCatalog method.
	SchemaAPIGetCatalogFunc func(ctx _context.Context) ApiSchemaAPIGetCatalogRequest

	// SchemaAPIGetCatalogExecuteFunc mocks the SchemaAPIGetCatalogExecute method.
	SchemaAPIGetCatalogExecuteFunc func(r ApiSchemaAPIGetCatalogRequest) (ProcessorCatalogResponse, *_nethttp.Response, error)

	// SchemaAPIGetSourceProcessorSchemaFunc mocks the SchemaAPIGetSourceProcessorSchema method.
	SchemaAPIGetSourceProcessorSchemaFunc func(ctx _context.Context, id string) ApiSchemaAPIGetSourceProcessorSchemaRequest

	// SchemaAPIGetSourceProcessorSchemaExecuteFunc mocks the SchemaAPIGetSourceProcessorSchemaExecute method.
	SchemaAPIGetSourceProcessorSchemaExecuteFunc func(r ApiSchemaAPIGetSourceProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// SchemaAPIGetActionProcessorSchema holds details about calls to the SchemaAPIGetActionProcessorSchema method.
		SchemaAPIGetActionProcessorSchema []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// SchemaAPIGetActionProcessorSchemaExecute holds details about calls to the SchemaAPIGetActionProcessorSchemaExecute method.
		SchemaAPIGetActionProcessorSchemaExecute []struct {
			// R is the r argument value.
			R ApiSchemaAPIGetActionProcessorSchemaRequest
		}
		// SchemaAPIGetCatalog holds details about calls to the SchemaAPIGetCatalog method.
		SchemaAPIGetCatalog []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// SchemaAPIGetCatalogExecute holds details about calls to the SchemaAPIGetCatalogExecute method.
		SchemaAPIGetCatalogExecute []struct {
			// R is the r argument value.
			R ApiSchemaAPIGetCatalogRequest
		}
		// SchemaAPIGetSourceProcessorSchema holds details about calls to the SchemaAPIGetSourceProcessorSchema method.
		SchemaAPIGetSourceProcessorSchema []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// SchemaAPIGetSourceProcessorSchemaExecute holds details about calls to the SchemaAPIGetSourceProcessorSchemaExecute method.
		SchemaAPIGetSourceProcessorSchemaExecute []struct {
			// R is the r argument value.
			R ApiSchemaAPIGetSourceProcessorSchemaRequest
		}
	}
	lockSchemaAPIGetActionProcessorSchema        sync.RWMutex
	lockSchemaAPIGetActionProcessorSchemaExecute sync.RWMutex
	lockSchemaAPIGetCatalog                      sync.RWMutex
	lockSchemaAPIGetCatalogExecute               sync.RWMutex
	lockSchemaAPIGetSourceProcessorSchema        sync.RWMutex
	lockSchemaAPIGetSourceProcessorSchemaExecute sync.RWMutex
}

// SchemaAPIGetActionProcessorSchema calls SchemaAPIGetActionProcessorSchemaFunc.
func (mock *SchemaCatalogApiMock) SchemaAPIGetActionProcessorSchema(ctx _context.Context, id string) ApiSchemaAPIGetActionProcessorSchemaRequest {
	if mock.SchemaAPIGetActionProcessorSchemaFunc == nil {
		panic("SchemaCatalogApiMock.SchemaAPIGetActionProcessorSchemaFunc: method is nil but SchemaCatalogApi.SchemaAPIGetActionProcessorSchema was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockSchemaAPIGetActionProcessorSchema.Lock()
	mock.calls.SchemaAPIGetActionProcessorSchema = append(mock.calls.SchemaAPIGetActionProcessorSchema, callInfo)
	mock.lockSchemaAPIGetActionProcessorSchema.Unlock()
	return mock.SchemaAPIGetActionProcessorSchemaFunc(ctx, id)
}

// SchemaAPIGetActionProcessorSchemaCalls gets all the calls that were made to SchemaAPIGetActionProcessorSchema.
// Check the length with:
//     len(mockedSchemaCatalogApi.SchemaAPIGetActionProcessorSchemaCalls())
func (mock *SchemaCatalogApiMock) SchemaAPIGetActionProcessorSchemaCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockSchemaAPIGetActionProcessorSchema.RLock()
	calls = mock.calls.SchemaAPIGetActionProcessorSchema
	mock.lockSchemaAPIGetActionProcessorSchema.RUnlock()
	return calls
}

// SchemaAPIGetActionProcessorSchemaExecute calls SchemaAPIGetActionProcessorSchemaExecuteFunc.
func (mock *SchemaCatalogApiMock) SchemaAPIGetActionProcessorSchemaExecute(r ApiSchemaAPIGetActionProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error) {
	if mock.SchemaAPIGetActionProcessorSchemaExecuteFunc == nil {
		panic("SchemaCatalogApiMock.SchemaAPIGetActionProcessorSchemaExecuteFunc: method is nil but SchemaCatalogApi.SchemaAPIGetActionProcessorSchemaExecute was just called")
	}
	callInfo := struct {
		R ApiSchemaAPIGetActionProcessorSchemaRequest
	}{
		R: r,
	}
	mock.lockSchemaAPIGetActionProcessorSchemaExecute.Lock()
	mock.calls.SchemaAPIGetActionProcessorSchemaExecute = append(mock.calls.SchemaAPIGetActionProcessorSchemaExecute, callInfo)
	mock.lockSchemaAPIGetActionProcessorSchemaExecute.Unlock()
	return mock.SchemaAPIGetActionProcessorSchemaExecuteFunc(r)
}

// SchemaAPIGetActionProcessorSchemaExecuteCalls gets all the calls that were made to SchemaAPIGetActionProcessorSchemaExecute.
// Check the length with:
//     len(mockedSchemaCatalogApi.SchemaAPIGetActionProcessorSchemaExecuteCalls())
func (mock *SchemaCatalogApiMock) SchemaAPIGetActionProcessorSchemaExecuteCalls() []struct {
	R ApiSchemaAPIGetActionProcessorSchemaRequest
} {
	var calls []struct {
		R ApiSchemaAPIGetActionProcessorSchemaRequest
	}
	mock.lockSchemaAPIGetActionProcessorSchemaExecute.RLock()
	calls = mock.calls.SchemaAPIGetActionProcessorSchemaExecute
	mock.lockSchemaAPIGetActionProcessorSchemaExecute.RUnlock()
	return calls
}

// SchemaAPIGetCatalog calls SchemaAPIGetCatalogFunc.
func (mock *SchemaCatalogApiMock) SchemaAPIGetCatalog(ctx _context.Context) ApiSchemaAPIGetCatalogRequest {
	if mock.SchemaAPIGetCatalogFunc == nil {
		panic("SchemaCatalogApiMock.SchemaAPIGetCatalogFunc: method is nil but SchemaCatalogApi.SchemaAPIGetCatalog was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSchemaAPIGetCatalog.Lock()
	mock.calls.SchemaAPIGetCatalog = append(mock.calls.SchemaAPIGetCatalog, callInfo)
	mock.lockSchemaAPIGetCatalog.Unlock()
	return mock.SchemaAPIGetCatalogFunc(ctx)
}

// SchemaAPIGetCatalogCalls gets all the calls that were made to SchemaAPIGetCatalog.
// Check the length with:
//     len(mockedSchemaCatalogApi.SchemaAPIGetCatalogCalls())
func (mock *SchemaCatalogApiMock) SchemaAPIGetCatalogCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockSchemaAPIGetCatalog.RLock()
	calls = mock.calls.SchemaAPIGetCatalog
	mock.lockSchemaAPIGetCatalog.RUnlock()
	return calls
}

// SchemaAPIGetCatalogExecute calls SchemaAPIGetCatalogExecuteFunc.
func (mock *SchemaCatalogApiMock) SchemaAPIGetCatalogExecute(r ApiSchemaAPIGetCatalogRequest) (ProcessorCatalogResponse, *_nethttp.Response, error) {
	if mock.SchemaAPIGetCatalogExecuteFunc == nil {
		panic("SchemaCatalogApiMock.SchemaAPIGetCatalogExecuteFunc: method is nil but SchemaCatalogApi.SchemaAPIGetCatalogExecute was just called")
	}
	callInfo := struct {
		R ApiSchemaAPIGetCatalogRequest
	}{
		R: r,
	}
	mock.lockSchemaAPIGetCatalogExecute.Lock()
	mock.calls.SchemaAPIGetCatalogExecute = append(mock.calls.SchemaAPIGetCatalogExecute, callInfo)
	mock.lockSchemaAPIGetCatalogExecute.Unlock()
	return mock.SchemaAPIGetCatalogExecuteFunc(r)
}

// SchemaAPIGetCatalogExecuteCalls gets all the calls that were made to SchemaAPIGetCatalogExecute.
// Check the length with:
//     len(mockedSchemaCatalogApi.SchemaAPIGetCatalogExecuteCalls())
func (mock *SchemaCatalogApiMock) SchemaAPIGetCatalogExecuteCalls() []struct {
	R ApiSchemaAPIGetCatalogRequest
} {
	var calls []struct {
		R ApiSchemaAPIGetCatalogRequest
	}
	mock.lockSchemaAPIGetCatalogExecute.RLock()
	calls = mock.calls.SchemaAPIGetCatalogExecute
	mock.lockSchemaAPIGetCatalogExecute.RUnlock()
	return calls
}

// SchemaAPIGetSourceProcessorSchema calls SchemaAPIGetSourceProcessorSchemaFunc.
func (mock *SchemaCatalogApiMock) SchemaAPIGetSourceProcessorSchema(ctx _context.Context, id string) ApiSchemaAPIGetSourceProcessorSchemaRequest {
	if mock.SchemaAPIGetSourceProcessorSchemaFunc == nil {
		panic("SchemaCatalogApiMock.SchemaAPIGetSourceProcessorSchemaFunc: method is nil but SchemaCatalogApi.SchemaAPIGetSourceProcessorSchema was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockSchemaAPIGetSourceProcessorSchema.Lock()
	mock.calls.SchemaAPIGetSourceProcessorSchema = append(mock.calls.SchemaAPIGetSourceProcessorSchema, callInfo)
	mock.lockSchemaAPIGetSourceProcessorSchema.Unlock()
	return mock.SchemaAPIGetSourceProcessorSchemaFunc(ctx, id)
}

// SchemaAPIGetSourceProcessorSchemaCalls gets all the calls that were made to SchemaAPIGetSourceProcessorSchema.
// Check the length with:
//     len(mockedSchemaCatalogApi.SchemaAPIGetSourceProcessorSchemaCalls())
func (mock *SchemaCatalogApiMock) SchemaAPIGetSourceProcessorSchemaCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockSchemaAPIGetSourceProcessorSchema.RLock()
	calls = mock.calls.SchemaAPIGetSourceProcessorSchema
	mock.lockSchemaAPIGetSourceProcessorSchema.RUnlock()
	return calls
}

// SchemaAPIGetSourceProcessorSchemaExecute calls SchemaAPIGetSourceProcessorSchemaExecuteFunc.
func (mock *SchemaCatalogApiMock) SchemaAPIGetSourceProcessorSchemaExecute(r ApiSchemaAPIGetSourceProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error) {
	if mock.SchemaAPIGetSourceProcessorSchemaExecuteFunc == nil {
		panic("SchemaCatalogApiMock.SchemaAPIGetSourceProcessorSchemaExecuteFunc: method is nil but SchemaCatalogApi.SchemaAPIGetSourceProcessorSchemaExecute was just called")
	}
	callInfo := struct {
		R ApiSchemaAPIGetSourceProcessorSchemaRequest
	}{
		R: r,
	}
	mock.lockSchemaAPIGetSourceProcessorSchemaExecute.Lock()
	mock.calls.SchemaAPIGetSourceProcessorSchemaExecute = append(mock.calls.SchemaAPIGetSourceProcessorSchemaExecute, callInfo)
	mock.lockSchemaAPIGetSourceProcessorSchemaExecute.Unlock()
	return mock.SchemaAPIGetSourceProcessorSchemaExecuteFunc(r)
}

// SchemaAPIGetSourceProcessorSchemaExecuteCalls gets all the calls that were made to SchemaAPIGetSourceProcessorSchemaExecute.
// Check the length with:
//     len(mockedSchemaCatalogApi.SchemaAPIGetSourceProcessorSchemaExecuteCalls())
func (mock *SchemaCatalogApiMock) SchemaAPIGetSourceProcessorSchemaExecuteCalls() []struct {
	R ApiSchemaAPIGetSourceProcessorSchemaRequest
} {
	var calls []struct {
		R ApiSchemaAPIGetSourceProcessorSchemaRequest
	}
	mock.lockSchemaAPIGetSourceProcessorSchemaExecute.RLock()
	calls = mock.calls.SchemaAPIGetSourceProcessorSchemaExecute
	mock.lockSchemaAPIGetSourceProcessorSchemaExecute.RUnlock()
	return calls
}

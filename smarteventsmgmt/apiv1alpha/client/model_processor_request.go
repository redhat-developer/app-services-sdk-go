/*
 * Red Hat Openshift SmartEvents Fleet Manager V2
 *
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * API version: 0.0.1
 * Contact: openbridge-dev@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarteventsmgmtclient

import (
	"encoding/json"
)

// ProcessorRequest struct for ProcessorRequest
type ProcessorRequest struct {
	// The name of the processor
	Name string `json:"name"`
	// The Camel YAML DSL code, formatted as JSON, that defines the flows in the processor
	Flows map[string]interface{} `json:"flows"`
}

// NewProcessorRequest instantiates a new ProcessorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessorRequest(name string, flows map[string]interface{}) *ProcessorRequest {
	this := ProcessorRequest{}
	this.Name = name
	this.Flows = flows
	return &this
}

// NewProcessorRequestWithDefaults instantiates a new ProcessorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessorRequestWithDefaults() *ProcessorRequest {
	this := ProcessorRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ProcessorRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProcessorRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProcessorRequest) SetName(v string) {
	o.Name = v
}

// GetFlows returns the Flows field value
func (o *ProcessorRequest) GetFlows() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Flows
}

// GetFlowsOk returns a tuple with the Flows field value
// and a boolean to check if the value has been set.
func (o *ProcessorRequest) GetFlowsOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Flows, true
}

// SetFlows sets field value
func (o *ProcessorRequest) SetFlows(v map[string]interface{}) {
	o.Flows = v
}

func (o ProcessorRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["flows"] = o.Flows
	}
	return json.Marshal(toSerialize)
}

type NullableProcessorRequest struct {
	value *ProcessorRequest
	isSet bool
}

func (v NullableProcessorRequest) Get() *ProcessorRequest {
	return v.value
}

func (v *NullableProcessorRequest) Set(val *ProcessorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessorRequest(val *ProcessorRequest) *NullableProcessorRequest {
	return &NullableProcessorRequest{value: val, isSet: true}
}

func (v NullableProcessorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * Red Hat Openshift SmartEvents Fleet Manager V2
 *
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * API version: 0.0.1
 * Contact: openbridge-dev@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarteventsmgmtclient

import (
	"encoding/json"
	"time"
)

// ProcessingErrorResponse struct for ProcessingErrorResponse
type ProcessingErrorResponse struct {
	RecordedAt *time.Time `json:"recorded_at,omitempty"`
	Headers *map[string]string `json:"headers,omitempty"`
	Payload *map[string]interface{} `json:"payload,omitempty"`
}

// NewProcessingErrorResponse instantiates a new ProcessingErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessingErrorResponse() *ProcessingErrorResponse {
	this := ProcessingErrorResponse{}
	return &this
}

// NewProcessingErrorResponseWithDefaults instantiates a new ProcessingErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessingErrorResponseWithDefaults() *ProcessingErrorResponse {
	this := ProcessingErrorResponse{}
	return &this
}

// GetRecordedAt returns the RecordedAt field value if set, zero value otherwise.
func (o *ProcessingErrorResponse) GetRecordedAt() time.Time {
	if o == nil || o.RecordedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.RecordedAt
}

// GetRecordedAtOk returns a tuple with the RecordedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingErrorResponse) GetRecordedAtOk() (*time.Time, bool) {
	if o == nil || o.RecordedAt == nil {
		return nil, false
	}
	return o.RecordedAt, true
}

// HasRecordedAt returns a boolean if a field has been set.
func (o *ProcessingErrorResponse) HasRecordedAt() bool {
	if o != nil && o.RecordedAt != nil {
		return true
	}

	return false
}

// SetRecordedAt gets a reference to the given time.Time and assigns it to the RecordedAt field.
func (o *ProcessingErrorResponse) SetRecordedAt(v time.Time) {
	o.RecordedAt = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ProcessingErrorResponse) GetHeaders() map[string]string {
	if o == nil || o.Headers == nil {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingErrorResponse) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ProcessingErrorResponse) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *ProcessingErrorResponse) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *ProcessingErrorResponse) GetPayload() map[string]interface{} {
	if o == nil || o.Payload == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingErrorResponse) GetPayloadOk() (*map[string]interface{}, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *ProcessingErrorResponse) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given map[string]interface{} and assigns it to the Payload field.
func (o *ProcessingErrorResponse) SetPayload(v map[string]interface{}) {
	o.Payload = &v
}

func (o ProcessingErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecordedAt != nil {
		toSerialize["recorded_at"] = o.RecordedAt
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	return json.Marshal(toSerialize)
}

type NullableProcessingErrorResponse struct {
	value *ProcessingErrorResponse
	isSet bool
}

func (v NullableProcessingErrorResponse) Get() *ProcessingErrorResponse {
	return v.value
}

func (v *NullableProcessingErrorResponse) Set(val *ProcessingErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessingErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessingErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessingErrorResponse(val *ProcessingErrorResponse) *NullableProcessingErrorResponse {
	return &NullableProcessingErrorResponse{value: val, isSet: true}
}

func (v NullableProcessingErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessingErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



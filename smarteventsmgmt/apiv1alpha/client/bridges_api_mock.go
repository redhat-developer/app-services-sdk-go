// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package smarteventsclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that BridgesApiMock does implement BridgesApi.
// If this is not the case, regenerate this file with moq.
var _ BridgesApi = &BridgesApiMock{}

// BridgesApiMock is a mock implementation of BridgesApi.
//
// 	func TestSomethingThatUsesBridgesApi(t *testing.T) {
//
// 		// make and configure a mocked BridgesApi
// 		mockedBridgesApi := &BridgesApiMock{
// 			BridgesAPICreateBridgeFunc: func(ctx _context.Context) ApiBridgesAPICreateBridgeRequest {
// 				panic("mock out the BridgesAPICreateBridge method")
// 			},
// 			BridgesAPICreateBridgeExecuteFunc: func(r ApiBridgesAPICreateBridgeRequest) (BridgeResponse, *_nethttp.Response, error) {
// 				panic("mock out the BridgesAPICreateBridgeExecute method")
// 			},
// 			BridgesAPIDeleteBridgeFunc: func(ctx _context.Context, bridgeId string) ApiBridgesAPIDeleteBridgeRequest {
// 				panic("mock out the BridgesAPIDeleteBridge method")
// 			},
// 			BridgesAPIDeleteBridgeExecuteFunc: func(r ApiBridgesAPIDeleteBridgeRequest) (*_nethttp.Response, error) {
// 				panic("mock out the BridgesAPIDeleteBridgeExecute method")
// 			},
// 			BridgesAPIGetBridgeFunc: func(ctx _context.Context, bridgeId string) ApiBridgesAPIGetBridgeRequest {
// 				panic("mock out the BridgesAPIGetBridge method")
// 			},
// 			BridgesAPIGetBridgeExecuteFunc: func(r ApiBridgesAPIGetBridgeRequest) (BridgeResponse, *_nethttp.Response, error) {
// 				panic("mock out the BridgesAPIGetBridgeExecute method")
// 			},
// 			BridgesAPIGetBridgesFunc: func(ctx _context.Context) ApiBridgesAPIGetBridgesRequest {
// 				panic("mock out the BridgesAPIGetBridges method")
// 			},
// 			BridgesAPIGetBridgesExecuteFunc: func(r ApiBridgesAPIGetBridgesRequest) (BridgeListResponse, *_nethttp.Response, error) {
// 				panic("mock out the BridgesAPIGetBridgesExecute method")
// 			},
// 		}
//
// 		// use mockedBridgesApi in code that requires BridgesApi
// 		// and then make assertions.
//
// 	}
type BridgesApiMock struct {
	// BridgesAPICreateBridgeFunc mocks the BridgesAPICreateBridge method.
	BridgesAPICreateBridgeFunc func(ctx _context.Context) ApiBridgesAPICreateBridgeRequest

	// BridgesAPICreateBridgeExecuteFunc mocks the BridgesAPICreateBridgeExecute method.
	BridgesAPICreateBridgeExecuteFunc func(r ApiBridgesAPICreateBridgeRequest) (BridgeResponse, *_nethttp.Response, error)

	// BridgesAPIDeleteBridgeFunc mocks the BridgesAPIDeleteBridge method.
	BridgesAPIDeleteBridgeFunc func(ctx _context.Context, bridgeId string) ApiBridgesAPIDeleteBridgeRequest

	// BridgesAPIDeleteBridgeExecuteFunc mocks the BridgesAPIDeleteBridgeExecute method.
	BridgesAPIDeleteBridgeExecuteFunc func(r ApiBridgesAPIDeleteBridgeRequest) (*_nethttp.Response, error)

	// BridgesAPIGetBridgeFunc mocks the BridgesAPIGetBridge method.
	BridgesAPIGetBridgeFunc func(ctx _context.Context, bridgeId string) ApiBridgesAPIGetBridgeRequest

	// BridgesAPIGetBridgeExecuteFunc mocks the BridgesAPIGetBridgeExecute method.
	BridgesAPIGetBridgeExecuteFunc func(r ApiBridgesAPIGetBridgeRequest) (BridgeResponse, *_nethttp.Response, error)

	// BridgesAPIGetBridgesFunc mocks the BridgesAPIGetBridges method.
	BridgesAPIGetBridgesFunc func(ctx _context.Context) ApiBridgesAPIGetBridgesRequest

	// BridgesAPIGetBridgesExecuteFunc mocks the BridgesAPIGetBridgesExecute method.
	BridgesAPIGetBridgesExecuteFunc func(r ApiBridgesAPIGetBridgesRequest) (BridgeListResponse, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// BridgesAPICreateBridge holds details about calls to the BridgesAPICreateBridge method.
		BridgesAPICreateBridge []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// BridgesAPICreateBridgeExecute holds details about calls to the BridgesAPICreateBridgeExecute method.
		BridgesAPICreateBridgeExecute []struct {
			// R is the r argument value.
			R ApiBridgesAPICreateBridgeRequest
		}
		// BridgesAPIDeleteBridge holds details about calls to the BridgesAPIDeleteBridge method.
		BridgesAPIDeleteBridge []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// BridgeId is the bridgeId argument value.
			BridgeId string
		}
		// BridgesAPIDeleteBridgeExecute holds details about calls to the BridgesAPIDeleteBridgeExecute method.
		BridgesAPIDeleteBridgeExecute []struct {
			// R is the r argument value.
			R ApiBridgesAPIDeleteBridgeRequest
		}
		// BridgesAPIGetBridge holds details about calls to the BridgesAPIGetBridge method.
		BridgesAPIGetBridge []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// BridgeId is the bridgeId argument value.
			BridgeId string
		}
		// BridgesAPIGetBridgeExecute holds details about calls to the BridgesAPIGetBridgeExecute method.
		BridgesAPIGetBridgeExecute []struct {
			// R is the r argument value.
			R ApiBridgesAPIGetBridgeRequest
		}
		// BridgesAPIGetBridges holds details about calls to the BridgesAPIGetBridges method.
		BridgesAPIGetBridges []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// BridgesAPIGetBridgesExecute holds details about calls to the BridgesAPIGetBridgesExecute method.
		BridgesAPIGetBridgesExecute []struct {
			// R is the r argument value.
			R ApiBridgesAPIGetBridgesRequest
		}
	}
	lockBridgesAPICreateBridge        sync.RWMutex
	lockBridgesAPICreateBridgeExecute sync.RWMutex
	lockBridgesAPIDeleteBridge        sync.RWMutex
	lockBridgesAPIDeleteBridgeExecute sync.RWMutex
	lockBridgesAPIGetBridge           sync.RWMutex
	lockBridgesAPIGetBridgeExecute    sync.RWMutex
	lockBridgesAPIGetBridges          sync.RWMutex
	lockBridgesAPIGetBridgesExecute   sync.RWMutex
}

// BridgesAPICreateBridge calls BridgesAPICreateBridgeFunc.
func (mock *BridgesApiMock) BridgesAPICreateBridge(ctx _context.Context) ApiBridgesAPICreateBridgeRequest {
	if mock.BridgesAPICreateBridgeFunc == nil {
		panic("BridgesApiMock.BridgesAPICreateBridgeFunc: method is nil but BridgesApi.BridgesAPICreateBridge was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockBridgesAPICreateBridge.Lock()
	mock.calls.BridgesAPICreateBridge = append(mock.calls.BridgesAPICreateBridge, callInfo)
	mock.lockBridgesAPICreateBridge.Unlock()
	return mock.BridgesAPICreateBridgeFunc(ctx)
}

// BridgesAPICreateBridgeCalls gets all the calls that were made to BridgesAPICreateBridge.
// Check the length with:
//     len(mockedBridgesApi.BridgesAPICreateBridgeCalls())
func (mock *BridgesApiMock) BridgesAPICreateBridgeCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockBridgesAPICreateBridge.RLock()
	calls = mock.calls.BridgesAPICreateBridge
	mock.lockBridgesAPICreateBridge.RUnlock()
	return calls
}

// BridgesAPICreateBridgeExecute calls BridgesAPICreateBridgeExecuteFunc.
func (mock *BridgesApiMock) BridgesAPICreateBridgeExecute(r ApiBridgesAPICreateBridgeRequest) (BridgeResponse, *_nethttp.Response, error) {
	if mock.BridgesAPICreateBridgeExecuteFunc == nil {
		panic("BridgesApiMock.BridgesAPICreateBridgeExecuteFunc: method is nil but BridgesApi.BridgesAPICreateBridgeExecute was just called")
	}
	callInfo := struct {
		R ApiBridgesAPICreateBridgeRequest
	}{
		R: r,
	}
	mock.lockBridgesAPICreateBridgeExecute.Lock()
	mock.calls.BridgesAPICreateBridgeExecute = append(mock.calls.BridgesAPICreateBridgeExecute, callInfo)
	mock.lockBridgesAPICreateBridgeExecute.Unlock()
	return mock.BridgesAPICreateBridgeExecuteFunc(r)
}

// BridgesAPICreateBridgeExecuteCalls gets all the calls that were made to BridgesAPICreateBridgeExecute.
// Check the length with:
//     len(mockedBridgesApi.BridgesAPICreateBridgeExecuteCalls())
func (mock *BridgesApiMock) BridgesAPICreateBridgeExecuteCalls() []struct {
	R ApiBridgesAPICreateBridgeRequest
} {
	var calls []struct {
		R ApiBridgesAPICreateBridgeRequest
	}
	mock.lockBridgesAPICreateBridgeExecute.RLock()
	calls = mock.calls.BridgesAPICreateBridgeExecute
	mock.lockBridgesAPICreateBridgeExecute.RUnlock()
	return calls
}

// BridgesAPIDeleteBridge calls BridgesAPIDeleteBridgeFunc.
func (mock *BridgesApiMock) BridgesAPIDeleteBridge(ctx _context.Context, bridgeId string) ApiBridgesAPIDeleteBridgeRequest {
	if mock.BridgesAPIDeleteBridgeFunc == nil {
		panic("BridgesApiMock.BridgesAPIDeleteBridgeFunc: method is nil but BridgesApi.BridgesAPIDeleteBridge was just called")
	}
	callInfo := struct {
		Ctx      _context.Context
		BridgeId string
	}{
		Ctx:      ctx,
		BridgeId: bridgeId,
	}
	mock.lockBridgesAPIDeleteBridge.Lock()
	mock.calls.BridgesAPIDeleteBridge = append(mock.calls.BridgesAPIDeleteBridge, callInfo)
	mock.lockBridgesAPIDeleteBridge.Unlock()
	return mock.BridgesAPIDeleteBridgeFunc(ctx, bridgeId)
}

// BridgesAPIDeleteBridgeCalls gets all the calls that were made to BridgesAPIDeleteBridge.
// Check the length with:
//     len(mockedBridgesApi.BridgesAPIDeleteBridgeCalls())
func (mock *BridgesApiMock) BridgesAPIDeleteBridgeCalls() []struct {
	Ctx      _context.Context
	BridgeId string
} {
	var calls []struct {
		Ctx      _context.Context
		BridgeId string
	}
	mock.lockBridgesAPIDeleteBridge.RLock()
	calls = mock.calls.BridgesAPIDeleteBridge
	mock.lockBridgesAPIDeleteBridge.RUnlock()
	return calls
}

// BridgesAPIDeleteBridgeExecute calls BridgesAPIDeleteBridgeExecuteFunc.
func (mock *BridgesApiMock) BridgesAPIDeleteBridgeExecute(r ApiBridgesAPIDeleteBridgeRequest) (*_nethttp.Response, error) {
	if mock.BridgesAPIDeleteBridgeExecuteFunc == nil {
		panic("BridgesApiMock.BridgesAPIDeleteBridgeExecuteFunc: method is nil but BridgesApi.BridgesAPIDeleteBridgeExecute was just called")
	}
	callInfo := struct {
		R ApiBridgesAPIDeleteBridgeRequest
	}{
		R: r,
	}
	mock.lockBridgesAPIDeleteBridgeExecute.Lock()
	mock.calls.BridgesAPIDeleteBridgeExecute = append(mock.calls.BridgesAPIDeleteBridgeExecute, callInfo)
	mock.lockBridgesAPIDeleteBridgeExecute.Unlock()
	return mock.BridgesAPIDeleteBridgeExecuteFunc(r)
}

// BridgesAPIDeleteBridgeExecuteCalls gets all the calls that were made to BridgesAPIDeleteBridgeExecute.
// Check the length with:
//     len(mockedBridgesApi.BridgesAPIDeleteBridgeExecuteCalls())
func (mock *BridgesApiMock) BridgesAPIDeleteBridgeExecuteCalls() []struct {
	R ApiBridgesAPIDeleteBridgeRequest
} {
	var calls []struct {
		R ApiBridgesAPIDeleteBridgeRequest
	}
	mock.lockBridgesAPIDeleteBridgeExecute.RLock()
	calls = mock.calls.BridgesAPIDeleteBridgeExecute
	mock.lockBridgesAPIDeleteBridgeExecute.RUnlock()
	return calls
}

// BridgesAPIGetBridge calls BridgesAPIGetBridgeFunc.
func (mock *BridgesApiMock) BridgesAPIGetBridge(ctx _context.Context, bridgeId string) ApiBridgesAPIGetBridgeRequest {
	if mock.BridgesAPIGetBridgeFunc == nil {
		panic("BridgesApiMock.BridgesAPIGetBridgeFunc: method is nil but BridgesApi.BridgesAPIGetBridge was just called")
	}
	callInfo := struct {
		Ctx      _context.Context
		BridgeId string
	}{
		Ctx:      ctx,
		BridgeId: bridgeId,
	}
	mock.lockBridgesAPIGetBridge.Lock()
	mock.calls.BridgesAPIGetBridge = append(mock.calls.BridgesAPIGetBridge, callInfo)
	mock.lockBridgesAPIGetBridge.Unlock()
	return mock.BridgesAPIGetBridgeFunc(ctx, bridgeId)
}

// BridgesAPIGetBridgeCalls gets all the calls that were made to BridgesAPIGetBridge.
// Check the length with:
//     len(mockedBridgesApi.BridgesAPIGetBridgeCalls())
func (mock *BridgesApiMock) BridgesAPIGetBridgeCalls() []struct {
	Ctx      _context.Context
	BridgeId string
} {
	var calls []struct {
		Ctx      _context.Context
		BridgeId string
	}
	mock.lockBridgesAPIGetBridge.RLock()
	calls = mock.calls.BridgesAPIGetBridge
	mock.lockBridgesAPIGetBridge.RUnlock()
	return calls
}

// BridgesAPIGetBridgeExecute calls BridgesAPIGetBridgeExecuteFunc.
func (mock *BridgesApiMock) BridgesAPIGetBridgeExecute(r ApiBridgesAPIGetBridgeRequest) (BridgeResponse, *_nethttp.Response, error) {
	if mock.BridgesAPIGetBridgeExecuteFunc == nil {
		panic("BridgesApiMock.BridgesAPIGetBridgeExecuteFunc: method is nil but BridgesApi.BridgesAPIGetBridgeExecute was just called")
	}
	callInfo := struct {
		R ApiBridgesAPIGetBridgeRequest
	}{
		R: r,
	}
	mock.lockBridgesAPIGetBridgeExecute.Lock()
	mock.calls.BridgesAPIGetBridgeExecute = append(mock.calls.BridgesAPIGetBridgeExecute, callInfo)
	mock.lockBridgesAPIGetBridgeExecute.Unlock()
	return mock.BridgesAPIGetBridgeExecuteFunc(r)
}

// BridgesAPIGetBridgeExecuteCalls gets all the calls that were made to BridgesAPIGetBridgeExecute.
// Check the length with:
//     len(mockedBridgesApi.BridgesAPIGetBridgeExecuteCalls())
func (mock *BridgesApiMock) BridgesAPIGetBridgeExecuteCalls() []struct {
	R ApiBridgesAPIGetBridgeRequest
} {
	var calls []struct {
		R ApiBridgesAPIGetBridgeRequest
	}
	mock.lockBridgesAPIGetBridgeExecute.RLock()
	calls = mock.calls.BridgesAPIGetBridgeExecute
	mock.lockBridgesAPIGetBridgeExecute.RUnlock()
	return calls
}

// BridgesAPIGetBridges calls BridgesAPIGetBridgesFunc.
func (mock *BridgesApiMock) BridgesAPIGetBridges(ctx _context.Context) ApiBridgesAPIGetBridgesRequest {
	if mock.BridgesAPIGetBridgesFunc == nil {
		panic("BridgesApiMock.BridgesAPIGetBridgesFunc: method is nil but BridgesApi.BridgesAPIGetBridges was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockBridgesAPIGetBridges.Lock()
	mock.calls.BridgesAPIGetBridges = append(mock.calls.BridgesAPIGetBridges, callInfo)
	mock.lockBridgesAPIGetBridges.Unlock()
	return mock.BridgesAPIGetBridgesFunc(ctx)
}

// BridgesAPIGetBridgesCalls gets all the calls that were made to BridgesAPIGetBridges.
// Check the length with:
//     len(mockedBridgesApi.BridgesAPIGetBridgesCalls())
func (mock *BridgesApiMock) BridgesAPIGetBridgesCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockBridgesAPIGetBridges.RLock()
	calls = mock.calls.BridgesAPIGetBridges
	mock.lockBridgesAPIGetBridges.RUnlock()
	return calls
}

// BridgesAPIGetBridgesExecute calls BridgesAPIGetBridgesExecuteFunc.
func (mock *BridgesApiMock) BridgesAPIGetBridgesExecute(r ApiBridgesAPIGetBridgesRequest) (BridgeListResponse, *_nethttp.Response, error) {
	if mock.BridgesAPIGetBridgesExecuteFunc == nil {
		panic("BridgesApiMock.BridgesAPIGetBridgesExecuteFunc: method is nil but BridgesApi.BridgesAPIGetBridgesExecute was just called")
	}
	callInfo := struct {
		R ApiBridgesAPIGetBridgesRequest
	}{
		R: r,
	}
	mock.lockBridgesAPIGetBridgesExecute.Lock()
	mock.calls.BridgesAPIGetBridgesExecute = append(mock.calls.BridgesAPIGetBridgesExecute, callInfo)
	mock.lockBridgesAPIGetBridgesExecute.Unlock()
	return mock.BridgesAPIGetBridgesExecuteFunc(r)
}

// BridgesAPIGetBridgesExecuteCalls gets all the calls that were made to BridgesAPIGetBridgesExecute.
// Check the length with:
//     len(mockedBridgesApi.BridgesAPIGetBridgesExecuteCalls())
func (mock *BridgesApiMock) BridgesAPIGetBridgesExecuteCalls() []struct {
	R ApiBridgesAPIGetBridgesRequest
} {
	var calls []struct {
		R ApiBridgesAPIGetBridgesRequest
	}
	mock.lockBridgesAPIGetBridgesExecute.RLock()
	calls = mock.calls.BridgesAPIGetBridgesExecute
	mock.lockBridgesAPIGetBridgesExecute.RUnlock()
	return calls
}

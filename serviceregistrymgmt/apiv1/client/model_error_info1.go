/*
 * Service Registry Service - Fleet Manager - v1
 *
 * Main entry point for the system, responsible for all sorts of management operations for the whole service of managed service registry.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceregistrymgmtclient

import (
	"encoding/json"
)

// ErrorInfo1 Details about a specific error returned by the server.
type ErrorInfo1 struct {
	ErrorCode int32   `json:"error_code"`
	Message   *string `json:"message,omitempty"`
}

// NewErrorInfo1 instantiates a new ErrorInfo1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorInfo1(errorCode int32) *ErrorInfo1 {
	this := ErrorInfo1{}
	this.ErrorCode = errorCode
	return &this
}

// NewErrorInfo1WithDefaults instantiates a new ErrorInfo1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorInfo1WithDefaults() *ErrorInfo1 {
	this := ErrorInfo1{}
	return &this
}

// GetErrorCode returns the ErrorCode field value
func (o *ErrorInfo1) GetErrorCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *ErrorInfo1) GetErrorCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *ErrorInfo1) SetErrorCode(v int32) {
	o.ErrorCode = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorInfo1) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorInfo1) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorInfo1) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorInfo1) SetMessage(v string) {
	o.Message = &v
}

func (o ErrorInfo1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["error_code"] = o.ErrorCode
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableErrorInfo1 struct {
	value *ErrorInfo1
	isSet bool
}

func (v NullableErrorInfo1) Get() *ErrorInfo1 {
	return v.value
}

func (v *NullableErrorInfo1) Set(val *ErrorInfo1) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorInfo1) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorInfo1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorInfo1(val *ErrorInfo1) *NullableErrorInfo1 {
	return &NullableErrorInfo1{value: val, isSet: true}
}

func (v NullableErrorInfo1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorInfo1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

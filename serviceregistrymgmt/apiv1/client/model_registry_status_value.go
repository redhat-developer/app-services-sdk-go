/*
 * Service Registry Service - Fleet Manager - v1
 *
 * Main entry point for the system, responsible for all sorts of management operations for the whole service of managed service registry.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceregistrymgmtclient

import (
	"encoding/json"
	"fmt"
)

// RegistryStatusValue the model 'RegistryStatusValue'
type RegistryStatusValue string

// List of RegistryStatusValue
const (
	PROVISIONING RegistryStatusValue = "PROVISIONING"
	AVAILABLE    RegistryStatusValue = "AVAILABLE"
	UNAVAILABLE  RegistryStatusValue = "UNAVAILABLE"
)

var allowedRegistryStatusValueEnumValues = []RegistryStatusValue{
	"PROVISIONING",
	"AVAILABLE",
	"UNAVAILABLE",
}

func (v *RegistryStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RegistryStatusValue(value)
	for _, existing := range allowedRegistryStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RegistryStatusValue", value)
}

// NewRegistryStatusValueFromValue returns a pointer to a valid RegistryStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegistryStatusValueFromValue(v string) (*RegistryStatusValue, error) {
	ev := RegistryStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RegistryStatusValue: valid values are %v", v, allowedRegistryStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegistryStatusValue) IsValid() bool {
	for _, existing := range allowedRegistryStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RegistryStatusValue value
func (v RegistryStatusValue) Ptr() *RegistryStatusValue {
	return &v
}

type NullableRegistryStatusValue struct {
	value *RegistryStatusValue
	isSet bool
}

func (v NullableRegistryStatusValue) Get() *RegistryStatusValue {
	return v.value
}

func (v *NullableRegistryStatusValue) Set(val *RegistryStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryStatusValue(val *RegistryStatusValue) *NullableRegistryStatusValue {
	return &NullableRegistryStatusValue{value: val, isSet: true}
}

func (v NullableRegistryStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

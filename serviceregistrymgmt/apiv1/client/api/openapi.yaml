openapi: 3.0.2
info:
  description: Main entry point for the system, responsible for all sorts of management
    operations for the whole service of managed service registry.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Service Registry Service - Fleet Manager - v1
  version: 0.0.1
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8000
- description: current domain
  url: /
paths:
  /api/serviceregistry_mgmt/v1/registries:
    get:
      operationId: getRegistries
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Registry'
                type: array
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo1'
          description: "The response sent from the server when an unexpected error\
            \ occurs (for example \na database connection error)."
      security:
      - Bearer: []
      summary: Get the list of all registries.
    post:
      operationId: createRegistry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistryCreate'
        description: A new `Registry` to be created.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: A successful response. The full request to create a new `Registry`
            is processed asynchronously. User should verify the result of the operation
            by reading the `status` property of the created `Registry` entity.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo1'
          description: "The response sent from the server when an unexpected error\
            \ occurs (for example \na database connection error)."
      security:
      - Bearer: []
      summary: Create a Registry.
    summary: Manage the list of all registries.
  /api/serviceregistry_mgmt/v1/registries/{registryId}:
    delete:
      description: Deletes an existing `Registry`.
      operationId: deleteRegistry
      parameters:
      - description: A unique identifier for a `Registry`.
        explode: false
        in: path
        name: registryId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Successful response.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo1'
          description: The response returned when something is requested but cannot
            be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo1'
          description: "The response sent from the server when an unexpected error\
            \ occurs (for example \na database connection error)."
      security:
      - Bearer: []
      summary: Delete a Registry
    get:
      description: Gets the details of a single instance of a `Registry`.
      operationId: getRegistry
      parameters:
      - description: A unique identifier for a `Registry`.
        explode: false
        in: path
        name: registryId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: Successful response - returns a single `Registry`.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo1'
          description: The response returned when something is requested but cannot
            be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInfo1'
          description: "The response sent from the server when an unexpected error\
            \ occurs (for example \na database connection error)."
      security:
      - Bearer: []
      summary: Get a Registry
    summary: Manage a specific Registry.
components:
  responses:
    NotFound:
      $ref: '#/components/responses/NotFound1'
    ServerError:
      $ref: '#/components/responses/ServerError1'
    NotFound1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo1'
      description: The response returned when something is requested but cannot be
        found.
    ServerError1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo1'
      description: "The response sent from the server when an unexpected error occurs\
        \ (for example \na database connection error)."
  schemas:
    Registry:
      description: Service Registry instance within a multi-tenant deployment.
      example:
        id: 42
        name: my-registry
        registryUrl: https://registry.apps.example.com/t/5213600b-afc9-487e-8cc3-339f4248d706
        status:
          status: PROVISIONING
          lastUpdated: 2021-05-04T12:34:56Z
        registryDeploymentId: 1
      properties:
        id:
          type: integer
        status:
          $ref: '#/components/schemas/RegistryStatus'
        registryUrl:
          type: string
        name:
          description: User-defined Registry name. Does not have to be unique.
          type: string
        registryDeploymentId:
          description: Identifier of a multi-tenant deployment, where this Service
            Registry instance resides.
          type: integer
      required:
      - id
      - registryUrl
      - status
      title: Root Type for Registry
      type: object
    RegistryStatus:
      example:
        value: AVAILABLE
        lastUpdated: 2021-05-04T12:34:56Z
      properties:
        lastUpdated:
          description: ISO 8601 UTC timestamp.
          format: date-time
          type: string
        value:
          $ref: '#/components/schemas/RegistryStatusValue'
      required:
      - lastUpdated
      - value
      type: object
    RegistryCreate:
      description: Information used to create a new Service Registry instance within
        a multi-tenant deployment.
      example:
        name: my-registry
      properties:
        name:
          description: User-defined Registry name. Does not have to be unique.
          type: string
      title: Root Type for RegistryCreate
      type: object
    RegistryStatusValue:
      enum:
      - PROVISIONING
      - AVAILABLE
      - UNAVAILABLE
      type: string
    ErrorInfo1:
      description: Details about a specific error returned by the server.
      example:
        error_code: 500
        message: An error occurred on the server.
      properties:
        error_code:
          type: integer
        message:
          type: string
      required:
      - error_code
      title: Root Type for ErrorInfo
      type: object
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http

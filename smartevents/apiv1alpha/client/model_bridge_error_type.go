/*
 * Red Hat Openshift SmartEvents Fleet Manager
 *
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * API version: 0.0.1
 * Contact: openbridge-dev@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarteventsclient

import (
	"encoding/json"
	"fmt"
)

// BridgeErrorType the model 'BridgeErrorType'
type BridgeErrorType string

// List of BridgeErrorType
const (
	BRIDGEERRORTYPE_USER BridgeErrorType = "USER"
	BRIDGEERRORTYPE_PLATFORM BridgeErrorType = "PLATFORM"
)

var allowedBridgeErrorTypeEnumValues = []BridgeErrorType{
	"USER",
	"PLATFORM",
}

func (v *BridgeErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BridgeErrorType(value)
	for _, existing := range allowedBridgeErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BridgeErrorType", value)
}

// NewBridgeErrorTypeFromValue returns a pointer to a valid BridgeErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBridgeErrorTypeFromValue(v string) (*BridgeErrorType, error) {
	ev := BridgeErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BridgeErrorType: valid values are %v", v, allowedBridgeErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BridgeErrorType) IsValid() bool {
	for _, existing := range allowedBridgeErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BridgeErrorType value
func (v BridgeErrorType) Ptr() *BridgeErrorType {
	return &v
}

type NullableBridgeErrorType struct {
	value *BridgeErrorType
	isSet bool
}

func (v NullableBridgeErrorType) Get() *BridgeErrorType {
	return v.value
}

func (v *NullableBridgeErrorType) Set(val *BridgeErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableBridgeErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableBridgeErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBridgeErrorType(val *BridgeErrorType) *NullableBridgeErrorType {
	return &NullableBridgeErrorType{value: val, isSet: true}
}

func (v NullableBridgeErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBridgeErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


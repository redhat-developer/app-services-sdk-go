/*
 * Red Hat Openshift SmartEvents Fleet Manager
 *
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * API version: 0.0.1
 * Contact: openbridge-dev@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarteventsclient

import (
	"encoding/json"
)

// BaseFilter struct for BaseFilter
type BaseFilter struct {
	Type *string `json:"type,omitempty"`
	Key string `json:"key"`
}

// NewBaseFilter instantiates a new BaseFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseFilter(key string) *BaseFilter {
	this := BaseFilter{}
	this.Key = key
	return &this
}

// NewBaseFilterWithDefaults instantiates a new BaseFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseFilterWithDefaults() *BaseFilter {
	this := BaseFilter{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BaseFilter) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFilter) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BaseFilter) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BaseFilter) SetType(v string) {
	o.Type = &v
}

// GetKey returns the Key field value
func (o *BaseFilter) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *BaseFilter) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *BaseFilter) SetKey(v string) {
	o.Key = v
}

func (o BaseFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableBaseFilter struct {
	value *BaseFilter
	isSet bool
}

func (v NullableBaseFilter) Get() *BaseFilter {
	return v.value
}

func (v *NullableBaseFilter) Set(val *BaseFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseFilter(val *BaseFilter) *NullableBaseFilter {
	return &NullableBaseFilter{value: val, isSet: true}
}

func (v NullableBaseFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



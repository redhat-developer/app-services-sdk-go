/*
 * Red Hat Openshift SmartEvents Fleet Manager
 *
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * API version: 0.0.3
 * Contact: openbridge-dev@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarteventsclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type SchemaCatalogApi interface {

	/*
	 * SchemaAPIGetActionProcessorSchema Get action processor schema
	 * Get the action processor JSON schema.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id
	 * @return ApiSchemaAPIGetActionProcessorSchemaRequest
	 */
	SchemaAPIGetActionProcessorSchema(ctx _context.Context, id string) ApiSchemaAPIGetActionProcessorSchemaRequest

	/*
	 * SchemaAPIGetActionProcessorSchemaExecute executes the request
	 * @return map[string]interface{}
	 */
	SchemaAPIGetActionProcessorSchemaExecute(r ApiSchemaAPIGetActionProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error)

	/*
	 * SchemaAPIGetCatalog Get processor catalog
	 * Get the processor catalog with all the available sources and actions.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiSchemaAPIGetCatalogRequest
	 */
	SchemaAPIGetCatalog(ctx _context.Context) ApiSchemaAPIGetCatalogRequest

	/*
	 * SchemaAPIGetCatalogExecute executes the request
	 * @return ProcessorCatalogResponse
	 */
	SchemaAPIGetCatalogExecute(r ApiSchemaAPIGetCatalogRequest) (ProcessorCatalogResponse, *_nethttp.Response, error)

	/*
	 * SchemaAPIGetSourceProcessorSchema Get source processor schema
	 * Get the source processor JSON schema.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id
	 * @return ApiSchemaAPIGetSourceProcessorSchemaRequest
	 */
	SchemaAPIGetSourceProcessorSchema(ctx _context.Context, id string) ApiSchemaAPIGetSourceProcessorSchemaRequest

	/*
	 * SchemaAPIGetSourceProcessorSchemaExecute executes the request
	 * @return map[string]interface{}
	 */
	SchemaAPIGetSourceProcessorSchemaExecute(r ApiSchemaAPIGetSourceProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error)
}

// SchemaCatalogApiService SchemaCatalogApi service
type SchemaCatalogApiService service

type ApiSchemaAPIGetActionProcessorSchemaRequest struct {
	ctx _context.Context
	ApiService SchemaCatalogApi
	id string
}


func (r ApiSchemaAPIGetActionProcessorSchemaRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.SchemaAPIGetActionProcessorSchemaExecute(r)
}

/*
 * SchemaAPIGetActionProcessorSchema Get action processor schema
 * Get the action processor JSON schema.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSchemaAPIGetActionProcessorSchemaRequest
 */
func (a *SchemaCatalogApiService) SchemaAPIGetActionProcessorSchema(ctx _context.Context, id string) ApiSchemaAPIGetActionProcessorSchemaRequest {
	return ApiSchemaAPIGetActionProcessorSchemaRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *SchemaCatalogApiService) SchemaAPIGetActionProcessorSchemaExecute(r ApiSchemaAPIGetActionProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchemaCatalogApiService.SchemaAPIGetActionProcessorSchema")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/schemas/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSchemaAPIGetCatalogRequest struct {
	ctx _context.Context
	ApiService SchemaCatalogApi
}


func (r ApiSchemaAPIGetCatalogRequest) Execute() (ProcessorCatalogResponse, *_nethttp.Response, error) {
	return r.ApiService.SchemaAPIGetCatalogExecute(r)
}

/*
 * SchemaAPIGetCatalog Get processor catalog
 * Get the processor catalog with all the available sources and actions.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSchemaAPIGetCatalogRequest
 */
func (a *SchemaCatalogApiService) SchemaAPIGetCatalog(ctx _context.Context) ApiSchemaAPIGetCatalogRequest {
	return ApiSchemaAPIGetCatalogRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProcessorCatalogResponse
 */
func (a *SchemaCatalogApiService) SchemaAPIGetCatalogExecute(r ApiSchemaAPIGetCatalogRequest) (ProcessorCatalogResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProcessorCatalogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchemaCatalogApiService.SchemaAPIGetCatalog")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/schemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSchemaAPIGetSourceProcessorSchemaRequest struct {
	ctx _context.Context
	ApiService SchemaCatalogApi
	id string
}


func (r ApiSchemaAPIGetSourceProcessorSchemaRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.SchemaAPIGetSourceProcessorSchemaExecute(r)
}

/*
 * SchemaAPIGetSourceProcessorSchema Get source processor schema
 * Get the source processor JSON schema.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSchemaAPIGetSourceProcessorSchemaRequest
 */
func (a *SchemaCatalogApiService) SchemaAPIGetSourceProcessorSchema(ctx _context.Context, id string) ApiSchemaAPIGetSourceProcessorSchemaRequest {
	return ApiSchemaAPIGetSourceProcessorSchemaRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *SchemaCatalogApiService) SchemaAPIGetSourceProcessorSchemaExecute(r ApiSchemaAPIGetSourceProcessorSchemaRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SchemaCatalogApiService.SchemaAPIGetSourceProcessorSchema")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/schemas/sources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

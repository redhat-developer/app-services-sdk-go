/*
 * Red Hat Openshift SmartEvents Fleet Manager
 *
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * API version: 0.0.3
 * Contact: openbridge-dev@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarteventsclient

import (
	"encoding/json"
	"fmt"
)

// ProcessorType the model 'ProcessorType'
type ProcessorType string

// List of ProcessorType
const (
	PROCESSORTYPE_SOURCE ProcessorType = "source"
	PROCESSORTYPE_SINK ProcessorType = "sink"
	PROCESSORTYPE_ERROR_HANDLER ProcessorType = "error_handler"
)

var allowedProcessorTypeEnumValues = []ProcessorType{
	"source",
	"sink",
	"error_handler",
}

func (v *ProcessorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProcessorType(value)
	for _, existing := range allowedProcessorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProcessorType", value)
}

// NewProcessorTypeFromValue returns a pointer to a valid ProcessorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProcessorTypeFromValue(v string) (*ProcessorType, error) {
	ev := ProcessorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProcessorType: valid values are %v", v, allowedProcessorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProcessorType) IsValid() bool {
	for _, existing := range allowedProcessorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProcessorType value
func (v ProcessorType) Ptr() *ProcessorType {
	return &v
}

type NullableProcessorType struct {
	value *ProcessorType
	isSet bool
}

func (v NullableProcessorType) Get() *ProcessorType {
	return v.value
}

func (v *NullableProcessorType) Set(val *ProcessorType) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessorType) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessorType(val *ProcessorType) *NullableProcessorType {
	return &NullableProcessorType{value: val, isSet: true}
}

func (v NullableProcessorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


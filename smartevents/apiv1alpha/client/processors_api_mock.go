// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package smarteventsclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that ProcessorsApiMock does implement ProcessorsApi.
// If this is not the case, regenerate this file with moq.
var _ ProcessorsApi = &ProcessorsApiMock{}

// ProcessorsApiMock is a mock implementation of ProcessorsApi.
//
// 	func TestSomethingThatUsesProcessorsApi(t *testing.T) {
//
// 		// make and configure a mocked ProcessorsApi
// 		mockedProcessorsApi := &ProcessorsApiMock{
// 			ProcessorsAPIAddProcessorToBridgeFunc: func(ctx _context.Context, bridgeId string) ApiProcessorsAPIAddProcessorToBridgeRequest {
// 				panic("mock out the ProcessorsAPIAddProcessorToBridge method")
// 			},
// 			ProcessorsAPIAddProcessorToBridgeExecuteFunc: func(r ApiProcessorsAPIAddProcessorToBridgeRequest) (ProcessorResponse, *_nethttp.Response, error) {
// 				panic("mock out the ProcessorsAPIAddProcessorToBridgeExecute method")
// 			},
// 			ProcessorsAPIDeleteProcessorFunc: func(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIDeleteProcessorRequest {
// 				panic("mock out the ProcessorsAPIDeleteProcessor method")
// 			},
// 			ProcessorsAPIDeleteProcessorExecuteFunc: func(r ApiProcessorsAPIDeleteProcessorRequest) (*_nethttp.Response, error) {
// 				panic("mock out the ProcessorsAPIDeleteProcessorExecute method")
// 			},
// 			ProcessorsAPIGetProcessorFunc: func(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIGetProcessorRequest {
// 				panic("mock out the ProcessorsAPIGetProcessor method")
// 			},
// 			ProcessorsAPIGetProcessorExecuteFunc: func(r ApiProcessorsAPIGetProcessorRequest) (ProcessorResponse, *_nethttp.Response, error) {
// 				panic("mock out the ProcessorsAPIGetProcessorExecute method")
// 			},
// 			ProcessorsAPIListProcessorsFunc: func(ctx _context.Context, bridgeId string) ApiProcessorsAPIListProcessorsRequest {
// 				panic("mock out the ProcessorsAPIListProcessors method")
// 			},
// 			ProcessorsAPIListProcessorsExecuteFunc: func(r ApiProcessorsAPIListProcessorsRequest) (ProcessorListResponse, *_nethttp.Response, error) {
// 				panic("mock out the ProcessorsAPIListProcessorsExecute method")
// 			},
// 			ProcessorsAPIUpdateProcessorFunc: func(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIUpdateProcessorRequest {
// 				panic("mock out the ProcessorsAPIUpdateProcessor method")
// 			},
// 			ProcessorsAPIUpdateProcessorExecuteFunc: func(r ApiProcessorsAPIUpdateProcessorRequest) (ProcessorResponse, *_nethttp.Response, error) {
// 				panic("mock out the ProcessorsAPIUpdateProcessorExecute method")
// 			},
// 		}
//
// 		// use mockedProcessorsApi in code that requires ProcessorsApi
// 		// and then make assertions.
//
// 	}
type ProcessorsApiMock struct {
	// ProcessorsAPIAddProcessorToBridgeFunc mocks the ProcessorsAPIAddProcessorToBridge method.
	ProcessorsAPIAddProcessorToBridgeFunc func(ctx _context.Context, bridgeId string) ApiProcessorsAPIAddProcessorToBridgeRequest

	// ProcessorsAPIAddProcessorToBridgeExecuteFunc mocks the ProcessorsAPIAddProcessorToBridgeExecute method.
	ProcessorsAPIAddProcessorToBridgeExecuteFunc func(r ApiProcessorsAPIAddProcessorToBridgeRequest) (ProcessorResponse, *_nethttp.Response, error)

	// ProcessorsAPIDeleteProcessorFunc mocks the ProcessorsAPIDeleteProcessor method.
	ProcessorsAPIDeleteProcessorFunc func(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIDeleteProcessorRequest

	// ProcessorsAPIDeleteProcessorExecuteFunc mocks the ProcessorsAPIDeleteProcessorExecute method.
	ProcessorsAPIDeleteProcessorExecuteFunc func(r ApiProcessorsAPIDeleteProcessorRequest) (*_nethttp.Response, error)

	// ProcessorsAPIGetProcessorFunc mocks the ProcessorsAPIGetProcessor method.
	ProcessorsAPIGetProcessorFunc func(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIGetProcessorRequest

	// ProcessorsAPIGetProcessorExecuteFunc mocks the ProcessorsAPIGetProcessorExecute method.
	ProcessorsAPIGetProcessorExecuteFunc func(r ApiProcessorsAPIGetProcessorRequest) (ProcessorResponse, *_nethttp.Response, error)

	// ProcessorsAPIListProcessorsFunc mocks the ProcessorsAPIListProcessors method.
	ProcessorsAPIListProcessorsFunc func(ctx _context.Context, bridgeId string) ApiProcessorsAPIListProcessorsRequest

	// ProcessorsAPIListProcessorsExecuteFunc mocks the ProcessorsAPIListProcessorsExecute method.
	ProcessorsAPIListProcessorsExecuteFunc func(r ApiProcessorsAPIListProcessorsRequest) (ProcessorListResponse, *_nethttp.Response, error)

	// ProcessorsAPIUpdateProcessorFunc mocks the ProcessorsAPIUpdateProcessor method.
	ProcessorsAPIUpdateProcessorFunc func(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIUpdateProcessorRequest

	// ProcessorsAPIUpdateProcessorExecuteFunc mocks the ProcessorsAPIUpdateProcessorExecute method.
	ProcessorsAPIUpdateProcessorExecuteFunc func(r ApiProcessorsAPIUpdateProcessorRequest) (ProcessorResponse, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// ProcessorsAPIAddProcessorToBridge holds details about calls to the ProcessorsAPIAddProcessorToBridge method.
		ProcessorsAPIAddProcessorToBridge []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// BridgeId is the bridgeId argument value.
			BridgeId string
		}
		// ProcessorsAPIAddProcessorToBridgeExecute holds details about calls to the ProcessorsAPIAddProcessorToBridgeExecute method.
		ProcessorsAPIAddProcessorToBridgeExecute []struct {
			// R is the r argument value.
			R ApiProcessorsAPIAddProcessorToBridgeRequest
		}
		// ProcessorsAPIDeleteProcessor holds details about calls to the ProcessorsAPIDeleteProcessor method.
		ProcessorsAPIDeleteProcessor []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// BridgeId is the bridgeId argument value.
			BridgeId string
			// ProcessorId is the processorId argument value.
			ProcessorId string
		}
		// ProcessorsAPIDeleteProcessorExecute holds details about calls to the ProcessorsAPIDeleteProcessorExecute method.
		ProcessorsAPIDeleteProcessorExecute []struct {
			// R is the r argument value.
			R ApiProcessorsAPIDeleteProcessorRequest
		}
		// ProcessorsAPIGetProcessor holds details about calls to the ProcessorsAPIGetProcessor method.
		ProcessorsAPIGetProcessor []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// BridgeId is the bridgeId argument value.
			BridgeId string
			// ProcessorId is the processorId argument value.
			ProcessorId string
		}
		// ProcessorsAPIGetProcessorExecute holds details about calls to the ProcessorsAPIGetProcessorExecute method.
		ProcessorsAPIGetProcessorExecute []struct {
			// R is the r argument value.
			R ApiProcessorsAPIGetProcessorRequest
		}
		// ProcessorsAPIListProcessors holds details about calls to the ProcessorsAPIListProcessors method.
		ProcessorsAPIListProcessors []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// BridgeId is the bridgeId argument value.
			BridgeId string
		}
		// ProcessorsAPIListProcessorsExecute holds details about calls to the ProcessorsAPIListProcessorsExecute method.
		ProcessorsAPIListProcessorsExecute []struct {
			// R is the r argument value.
			R ApiProcessorsAPIListProcessorsRequest
		}
		// ProcessorsAPIUpdateProcessor holds details about calls to the ProcessorsAPIUpdateProcessor method.
		ProcessorsAPIUpdateProcessor []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// BridgeId is the bridgeId argument value.
			BridgeId string
			// ProcessorId is the processorId argument value.
			ProcessorId string
		}
		// ProcessorsAPIUpdateProcessorExecute holds details about calls to the ProcessorsAPIUpdateProcessorExecute method.
		ProcessorsAPIUpdateProcessorExecute []struct {
			// R is the r argument value.
			R ApiProcessorsAPIUpdateProcessorRequest
		}
	}
	lockProcessorsAPIAddProcessorToBridge        sync.RWMutex
	lockProcessorsAPIAddProcessorToBridgeExecute sync.RWMutex
	lockProcessorsAPIDeleteProcessor             sync.RWMutex
	lockProcessorsAPIDeleteProcessorExecute      sync.RWMutex
	lockProcessorsAPIGetProcessor                sync.RWMutex
	lockProcessorsAPIGetProcessorExecute         sync.RWMutex
	lockProcessorsAPIListProcessors              sync.RWMutex
	lockProcessorsAPIListProcessorsExecute       sync.RWMutex
	lockProcessorsAPIUpdateProcessor             sync.RWMutex
	lockProcessorsAPIUpdateProcessorExecute      sync.RWMutex
}

// ProcessorsAPIAddProcessorToBridge calls ProcessorsAPIAddProcessorToBridgeFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIAddProcessorToBridge(ctx _context.Context, bridgeId string) ApiProcessorsAPIAddProcessorToBridgeRequest {
	if mock.ProcessorsAPIAddProcessorToBridgeFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIAddProcessorToBridgeFunc: method is nil but ProcessorsApi.ProcessorsAPIAddProcessorToBridge was just called")
	}
	callInfo := struct {
		Ctx      _context.Context
		BridgeId string
	}{
		Ctx:      ctx,
		BridgeId: bridgeId,
	}
	mock.lockProcessorsAPIAddProcessorToBridge.Lock()
	mock.calls.ProcessorsAPIAddProcessorToBridge = append(mock.calls.ProcessorsAPIAddProcessorToBridge, callInfo)
	mock.lockProcessorsAPIAddProcessorToBridge.Unlock()
	return mock.ProcessorsAPIAddProcessorToBridgeFunc(ctx, bridgeId)
}

// ProcessorsAPIAddProcessorToBridgeCalls gets all the calls that were made to ProcessorsAPIAddProcessorToBridge.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIAddProcessorToBridgeCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIAddProcessorToBridgeCalls() []struct {
	Ctx      _context.Context
	BridgeId string
} {
	var calls []struct {
		Ctx      _context.Context
		BridgeId string
	}
	mock.lockProcessorsAPIAddProcessorToBridge.RLock()
	calls = mock.calls.ProcessorsAPIAddProcessorToBridge
	mock.lockProcessorsAPIAddProcessorToBridge.RUnlock()
	return calls
}

// ProcessorsAPIAddProcessorToBridgeExecute calls ProcessorsAPIAddProcessorToBridgeExecuteFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIAddProcessorToBridgeExecute(r ApiProcessorsAPIAddProcessorToBridgeRequest) (ProcessorResponse, *_nethttp.Response, error) {
	if mock.ProcessorsAPIAddProcessorToBridgeExecuteFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIAddProcessorToBridgeExecuteFunc: method is nil but ProcessorsApi.ProcessorsAPIAddProcessorToBridgeExecute was just called")
	}
	callInfo := struct {
		R ApiProcessorsAPIAddProcessorToBridgeRequest
	}{
		R: r,
	}
	mock.lockProcessorsAPIAddProcessorToBridgeExecute.Lock()
	mock.calls.ProcessorsAPIAddProcessorToBridgeExecute = append(mock.calls.ProcessorsAPIAddProcessorToBridgeExecute, callInfo)
	mock.lockProcessorsAPIAddProcessorToBridgeExecute.Unlock()
	return mock.ProcessorsAPIAddProcessorToBridgeExecuteFunc(r)
}

// ProcessorsAPIAddProcessorToBridgeExecuteCalls gets all the calls that were made to ProcessorsAPIAddProcessorToBridgeExecute.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIAddProcessorToBridgeExecuteCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIAddProcessorToBridgeExecuteCalls() []struct {
	R ApiProcessorsAPIAddProcessorToBridgeRequest
} {
	var calls []struct {
		R ApiProcessorsAPIAddProcessorToBridgeRequest
	}
	mock.lockProcessorsAPIAddProcessorToBridgeExecute.RLock()
	calls = mock.calls.ProcessorsAPIAddProcessorToBridgeExecute
	mock.lockProcessorsAPIAddProcessorToBridgeExecute.RUnlock()
	return calls
}

// ProcessorsAPIDeleteProcessor calls ProcessorsAPIDeleteProcessorFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIDeleteProcessor(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIDeleteProcessorRequest {
	if mock.ProcessorsAPIDeleteProcessorFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIDeleteProcessorFunc: method is nil but ProcessorsApi.ProcessorsAPIDeleteProcessor was just called")
	}
	callInfo := struct {
		Ctx         _context.Context
		BridgeId    string
		ProcessorId string
	}{
		Ctx:         ctx,
		BridgeId:    bridgeId,
		ProcessorId: processorId,
	}
	mock.lockProcessorsAPIDeleteProcessor.Lock()
	mock.calls.ProcessorsAPIDeleteProcessor = append(mock.calls.ProcessorsAPIDeleteProcessor, callInfo)
	mock.lockProcessorsAPIDeleteProcessor.Unlock()
	return mock.ProcessorsAPIDeleteProcessorFunc(ctx, bridgeId, processorId)
}

// ProcessorsAPIDeleteProcessorCalls gets all the calls that were made to ProcessorsAPIDeleteProcessor.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIDeleteProcessorCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIDeleteProcessorCalls() []struct {
	Ctx         _context.Context
	BridgeId    string
	ProcessorId string
} {
	var calls []struct {
		Ctx         _context.Context
		BridgeId    string
		ProcessorId string
	}
	mock.lockProcessorsAPIDeleteProcessor.RLock()
	calls = mock.calls.ProcessorsAPIDeleteProcessor
	mock.lockProcessorsAPIDeleteProcessor.RUnlock()
	return calls
}

// ProcessorsAPIDeleteProcessorExecute calls ProcessorsAPIDeleteProcessorExecuteFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIDeleteProcessorExecute(r ApiProcessorsAPIDeleteProcessorRequest) (*_nethttp.Response, error) {
	if mock.ProcessorsAPIDeleteProcessorExecuteFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIDeleteProcessorExecuteFunc: method is nil but ProcessorsApi.ProcessorsAPIDeleteProcessorExecute was just called")
	}
	callInfo := struct {
		R ApiProcessorsAPIDeleteProcessorRequest
	}{
		R: r,
	}
	mock.lockProcessorsAPIDeleteProcessorExecute.Lock()
	mock.calls.ProcessorsAPIDeleteProcessorExecute = append(mock.calls.ProcessorsAPIDeleteProcessorExecute, callInfo)
	mock.lockProcessorsAPIDeleteProcessorExecute.Unlock()
	return mock.ProcessorsAPIDeleteProcessorExecuteFunc(r)
}

// ProcessorsAPIDeleteProcessorExecuteCalls gets all the calls that were made to ProcessorsAPIDeleteProcessorExecute.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIDeleteProcessorExecuteCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIDeleteProcessorExecuteCalls() []struct {
	R ApiProcessorsAPIDeleteProcessorRequest
} {
	var calls []struct {
		R ApiProcessorsAPIDeleteProcessorRequest
	}
	mock.lockProcessorsAPIDeleteProcessorExecute.RLock()
	calls = mock.calls.ProcessorsAPIDeleteProcessorExecute
	mock.lockProcessorsAPIDeleteProcessorExecute.RUnlock()
	return calls
}

// ProcessorsAPIGetProcessor calls ProcessorsAPIGetProcessorFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIGetProcessor(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIGetProcessorRequest {
	if mock.ProcessorsAPIGetProcessorFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIGetProcessorFunc: method is nil but ProcessorsApi.ProcessorsAPIGetProcessor was just called")
	}
	callInfo := struct {
		Ctx         _context.Context
		BridgeId    string
		ProcessorId string
	}{
		Ctx:         ctx,
		BridgeId:    bridgeId,
		ProcessorId: processorId,
	}
	mock.lockProcessorsAPIGetProcessor.Lock()
	mock.calls.ProcessorsAPIGetProcessor = append(mock.calls.ProcessorsAPIGetProcessor, callInfo)
	mock.lockProcessorsAPIGetProcessor.Unlock()
	return mock.ProcessorsAPIGetProcessorFunc(ctx, bridgeId, processorId)
}

// ProcessorsAPIGetProcessorCalls gets all the calls that were made to ProcessorsAPIGetProcessor.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIGetProcessorCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIGetProcessorCalls() []struct {
	Ctx         _context.Context
	BridgeId    string
	ProcessorId string
} {
	var calls []struct {
		Ctx         _context.Context
		BridgeId    string
		ProcessorId string
	}
	mock.lockProcessorsAPIGetProcessor.RLock()
	calls = mock.calls.ProcessorsAPIGetProcessor
	mock.lockProcessorsAPIGetProcessor.RUnlock()
	return calls
}

// ProcessorsAPIGetProcessorExecute calls ProcessorsAPIGetProcessorExecuteFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIGetProcessorExecute(r ApiProcessorsAPIGetProcessorRequest) (ProcessorResponse, *_nethttp.Response, error) {
	if mock.ProcessorsAPIGetProcessorExecuteFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIGetProcessorExecuteFunc: method is nil but ProcessorsApi.ProcessorsAPIGetProcessorExecute was just called")
	}
	callInfo := struct {
		R ApiProcessorsAPIGetProcessorRequest
	}{
		R: r,
	}
	mock.lockProcessorsAPIGetProcessorExecute.Lock()
	mock.calls.ProcessorsAPIGetProcessorExecute = append(mock.calls.ProcessorsAPIGetProcessorExecute, callInfo)
	mock.lockProcessorsAPIGetProcessorExecute.Unlock()
	return mock.ProcessorsAPIGetProcessorExecuteFunc(r)
}

// ProcessorsAPIGetProcessorExecuteCalls gets all the calls that were made to ProcessorsAPIGetProcessorExecute.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIGetProcessorExecuteCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIGetProcessorExecuteCalls() []struct {
	R ApiProcessorsAPIGetProcessorRequest
} {
	var calls []struct {
		R ApiProcessorsAPIGetProcessorRequest
	}
	mock.lockProcessorsAPIGetProcessorExecute.RLock()
	calls = mock.calls.ProcessorsAPIGetProcessorExecute
	mock.lockProcessorsAPIGetProcessorExecute.RUnlock()
	return calls
}

// ProcessorsAPIListProcessors calls ProcessorsAPIListProcessorsFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIListProcessors(ctx _context.Context, bridgeId string) ApiProcessorsAPIListProcessorsRequest {
	if mock.ProcessorsAPIListProcessorsFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIListProcessorsFunc: method is nil but ProcessorsApi.ProcessorsAPIListProcessors was just called")
	}
	callInfo := struct {
		Ctx      _context.Context
		BridgeId string
	}{
		Ctx:      ctx,
		BridgeId: bridgeId,
	}
	mock.lockProcessorsAPIListProcessors.Lock()
	mock.calls.ProcessorsAPIListProcessors = append(mock.calls.ProcessorsAPIListProcessors, callInfo)
	mock.lockProcessorsAPIListProcessors.Unlock()
	return mock.ProcessorsAPIListProcessorsFunc(ctx, bridgeId)
}

// ProcessorsAPIListProcessorsCalls gets all the calls that were made to ProcessorsAPIListProcessors.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIListProcessorsCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIListProcessorsCalls() []struct {
	Ctx      _context.Context
	BridgeId string
} {
	var calls []struct {
		Ctx      _context.Context
		BridgeId string
	}
	mock.lockProcessorsAPIListProcessors.RLock()
	calls = mock.calls.ProcessorsAPIListProcessors
	mock.lockProcessorsAPIListProcessors.RUnlock()
	return calls
}

// ProcessorsAPIListProcessorsExecute calls ProcessorsAPIListProcessorsExecuteFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIListProcessorsExecute(r ApiProcessorsAPIListProcessorsRequest) (ProcessorListResponse, *_nethttp.Response, error) {
	if mock.ProcessorsAPIListProcessorsExecuteFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIListProcessorsExecuteFunc: method is nil but ProcessorsApi.ProcessorsAPIListProcessorsExecute was just called")
	}
	callInfo := struct {
		R ApiProcessorsAPIListProcessorsRequest
	}{
		R: r,
	}
	mock.lockProcessorsAPIListProcessorsExecute.Lock()
	mock.calls.ProcessorsAPIListProcessorsExecute = append(mock.calls.ProcessorsAPIListProcessorsExecute, callInfo)
	mock.lockProcessorsAPIListProcessorsExecute.Unlock()
	return mock.ProcessorsAPIListProcessorsExecuteFunc(r)
}

// ProcessorsAPIListProcessorsExecuteCalls gets all the calls that were made to ProcessorsAPIListProcessorsExecute.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIListProcessorsExecuteCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIListProcessorsExecuteCalls() []struct {
	R ApiProcessorsAPIListProcessorsRequest
} {
	var calls []struct {
		R ApiProcessorsAPIListProcessorsRequest
	}
	mock.lockProcessorsAPIListProcessorsExecute.RLock()
	calls = mock.calls.ProcessorsAPIListProcessorsExecute
	mock.lockProcessorsAPIListProcessorsExecute.RUnlock()
	return calls
}

// ProcessorsAPIUpdateProcessor calls ProcessorsAPIUpdateProcessorFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIUpdateProcessor(ctx _context.Context, bridgeId string, processorId string) ApiProcessorsAPIUpdateProcessorRequest {
	if mock.ProcessorsAPIUpdateProcessorFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIUpdateProcessorFunc: method is nil but ProcessorsApi.ProcessorsAPIUpdateProcessor was just called")
	}
	callInfo := struct {
		Ctx         _context.Context
		BridgeId    string
		ProcessorId string
	}{
		Ctx:         ctx,
		BridgeId:    bridgeId,
		ProcessorId: processorId,
	}
	mock.lockProcessorsAPIUpdateProcessor.Lock()
	mock.calls.ProcessorsAPIUpdateProcessor = append(mock.calls.ProcessorsAPIUpdateProcessor, callInfo)
	mock.lockProcessorsAPIUpdateProcessor.Unlock()
	return mock.ProcessorsAPIUpdateProcessorFunc(ctx, bridgeId, processorId)
}

// ProcessorsAPIUpdateProcessorCalls gets all the calls that were made to ProcessorsAPIUpdateProcessor.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIUpdateProcessorCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIUpdateProcessorCalls() []struct {
	Ctx         _context.Context
	BridgeId    string
	ProcessorId string
} {
	var calls []struct {
		Ctx         _context.Context
		BridgeId    string
		ProcessorId string
	}
	mock.lockProcessorsAPIUpdateProcessor.RLock()
	calls = mock.calls.ProcessorsAPIUpdateProcessor
	mock.lockProcessorsAPIUpdateProcessor.RUnlock()
	return calls
}

// ProcessorsAPIUpdateProcessorExecute calls ProcessorsAPIUpdateProcessorExecuteFunc.
func (mock *ProcessorsApiMock) ProcessorsAPIUpdateProcessorExecute(r ApiProcessorsAPIUpdateProcessorRequest) (ProcessorResponse, *_nethttp.Response, error) {
	if mock.ProcessorsAPIUpdateProcessorExecuteFunc == nil {
		panic("ProcessorsApiMock.ProcessorsAPIUpdateProcessorExecuteFunc: method is nil but ProcessorsApi.ProcessorsAPIUpdateProcessorExecute was just called")
	}
	callInfo := struct {
		R ApiProcessorsAPIUpdateProcessorRequest
	}{
		R: r,
	}
	mock.lockProcessorsAPIUpdateProcessorExecute.Lock()
	mock.calls.ProcessorsAPIUpdateProcessorExecute = append(mock.calls.ProcessorsAPIUpdateProcessorExecute, callInfo)
	mock.lockProcessorsAPIUpdateProcessorExecute.Unlock()
	return mock.ProcessorsAPIUpdateProcessorExecuteFunc(r)
}

// ProcessorsAPIUpdateProcessorExecuteCalls gets all the calls that were made to ProcessorsAPIUpdateProcessorExecute.
// Check the length with:
//     len(mockedProcessorsApi.ProcessorsAPIUpdateProcessorExecuteCalls())
func (mock *ProcessorsApiMock) ProcessorsAPIUpdateProcessorExecuteCalls() []struct {
	R ApiProcessorsAPIUpdateProcessorRequest
} {
	var calls []struct {
		R ApiProcessorsAPIUpdateProcessorRequest
	}
	mock.lockProcessorsAPIUpdateProcessorExecute.RLock()
	calls = mock.calls.ProcessorsAPIUpdateProcessorExecute
	mock.lockProcessorsAPIUpdateProcessorExecute.RUnlock()
	return calls
}
